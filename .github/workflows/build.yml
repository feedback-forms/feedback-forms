name: Build and Push

on:
  workflow_call:
    outputs:
      image_tag:
        description: "The tag of the built image"
        value: ${{ jobs.build.outputs.image_tag }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check Version Format in Tag
        if: startsWith(github.ref, 'refs/tags/v')
        uses: nowsprinting/check-version-format-action@v4.0.2
        id: check-version
        with:
          prefix: 'v'

      - name: Set tag
        id: set-tag
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          TAG1="dev"
          TAG2="commit-$SHORT_SHA"

          if [[ "${{ steps.check-version.outputs.is_valid }}" == 'true' ]]; then
            TAG1="latest"
            TAG2="${{ steps.check-version.outputs.full_without_prefix }}"
          fi

          echo "TAG1=$TAG1" >> $GITHUB_ENV
          echo "TAG2=$TAG2" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/feedback-forms/feedback-forms
          tags: |
            ${{ env.TAG1 }}
            ${{ env.TAG2 }}

      - name: Build and push
        uses: docker/build-push-action@v5
        id: build-push
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GIT_SHA=${{ env.SHORT_SHA }}