This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*, .cursorrules, .cursor/rules/*
- Files matching these patterns are excluded: .*.*, **/*.pbxproj, **/node_modules/**, **/dist/**, **/build/**, **/compile/**, **/*.spec.*, **/*.pyc, **/.env, **/.env.*, **/*.env, **/*.env.*, **/*.lock, **/*.lockb, **/package-lock.*, **/pnpm-lock.*, **/*.tsbuildinfo
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.github/
  ISSUE_TEMPLATE/
    issue-template.md
  workflows/
    build.yml
    ci-cd.yml
    deploy.yml
  pull_request_template.md
app/
  Console/
    Commands/
      CheckSurveyQuestions.php
      CheckSurveyStatistics.php
      ListTableQuestions.php
      UpdateAllTableSurveys.php
      UpdateSurveyQuestions.php
  Exceptions/
    InvalidAccessKeyException.php
    SurveyNotAvailableException.php
  Http/
    Controllers/
      Api/
        SurveyController.php
      Auth/
        VerifyEmailController.php
      Controller.php
      SurveyController.php
      SurveyResponseController.php
      SurveyStatisticsController.php
      WelcomeController.php
    Requests/
      SmileyRequest.php
  Livewire/
    Actions/
      Logout.php
    Admin/
      Panel.php
      Users.php
    Forms/
      LoginForm.php
      RegisterForm.php
    Surveys/
      Edit.php
      Overview.php
    TeacherInterface/
      Overview.php
    Templates/
      Overview.php
  Models/
    Department.php
    Feedback_template.php
    Feedback.php
    GradeLevel.php
    Question_template.php
    Question.php
    Registerkey.php
    Result.php
    SchoolClass.php
    SchoolYear.php
    Subject.php
    User.php
  Notifications/
    CustomVerifyEmail.php
  Policies/
    FeedbackPolicy.php
  Providers/
    AppServiceProvider.php
    VoltServiceProvider.php
  Services/
    SurveyService.php
  View/
    Components/
      AppLayout.php
      GuestLayout.php
      SurveyLayout.php
bootstrap/
  cache/
    .gitignore
  app.php
  providers.php
config/
  app.php
  auth.php
  blade-fontawesome.php
  blade-icons.php
  cache.php
  database.php
  filesystems.php
  livewire.php
  logging.php
  mail.php
  queue.php
  services.php
  session.php
database/
  factories/
    UserFactory.php
  migrations/
    0001_01_01_000000_create_registerkeys_table.php
    0001_01_01_000001_create_users_table.php
    0001_01_01_000002_create_cache_table.php
    0001_01_01_000003_create_jobs_table.php
    2025_01_21_104916_create_results_table.php
    2025_01_21_104933_create_questions_table.php
    2025_01_21_104948_create_feedback_table.php
    2025_01_21_105218_create_feedback_templates_table.php
    2025_01_21_105231_create_question_templates_table.php
    2025_02_25_104300_create_school_years_table.php
    2025_02_25_104301_create_departments_table.php
    2025_02_25_104302_create_grade_levels_table.php
    2025_02_25_104303_create_school_classes_table.php
    2025_02_25_104304_create_subjects_table.php
    2025_03_12_091007_drop_response_values_table.php
    2025_03_12_102518_add_submission_id_to_results_table.php
    2025_03_12_102527_add_status_to_feedback_table.php
    2025_03_12_102534_add_order_to_questions_table.php
    2025_03_12_102635_populate_default_values_for_results_updates.php
    2025_03_12_103110_make_submission_id_required_in_results_table.php
    2025_03_12_105717_add_indexes_for_performance_improvement.php
  seeders/
    DatabaseSeeder.php
    DepartmentSeeder.php
    FeedbackTemplateSeeder.php
    GradeLevelsSeeder.php
    QuestionSeeder.php
    QuestionTemplateSeeder.php
    RegisterKeySeeder.php
    SchoolClassSeeder.php
    SchoolYearSeeder.php
    SubjectSeeder.php
    TableTemplateUpdateSeeder.php
    UserSeeder.php
  .gitignore
deployments/
  app-deployment.yaml
  db-setup-job.yaml
  ingress.yaml
  nginx-configmap.yaml
  postgres-deployment.yaml
  queue-deployment.yaml
docker/
  8.0/
    Dockerfile
    php.ini
    start-container
    supervisord.conf
  8.1/
    Dockerfile
    php.ini
    start-container
    supervisord.conf
  8.2/
    Dockerfile
    php.ini
    start-container
    supervisord.conf
  8.3/
    Dockerfile
    php.ini
    start-container
    supervisord.conf
  8.4/
    Dockerfile
    php.ini
    start-container
    supervisord.conf
  mariadb/
    create-testing-database.sh
  mysql/
    create-testing-database.sh
  pgsql/
    create-testing-database.sql
lang/
  de/
    admin.php
    auth.php
    login.php
    navigation.php
    notification.php
    pagination.php
    passwords.php
    register.php
    surveys.php
    templates.php
    validation.php
    welcome.php
  en/
    admin.php
    surveys.php
    templates.php
public/
  .htaccess
  index.php
  robots.txt
resources/
  css/
    app.css
    surveys-page.css
  js/
    app.js
    bootstrap.js
    survey-filter.js
  views/
    auth/
      verify.blade.php
    components/
      action-message.blade.php
      application-logo.blade.php
      auth-session-status.blade.php
      chip.blade.php
      danger-button.blade.php
      dropdown-link.blade.php
      dropdown.blade.php
      footer.blade.php
      input-error.blade.php
      input-label.blade.php
      modal.blade.php
      nav-link.blade.php
      primary-button.blade.php
      responsive-nav-link.blade.php
      secondary-button.blade.php
      text-input.blade.php
    layouts/
      app.blade.php
      guest.blade.php
      survey.blade.php
    livewire/
      admin/
        panel.blade.php
        users.blade.php
      layout/
        navigation.blade.php
      pages/
        auth/
          confirm-password.blade.php
          forgot-password.blade.php
          login.blade.php
          register.blade.php
          reset-password.blade.php
          verify-email.blade.php
      profile/
        delete-user-form.blade.php
        update-password-form.blade.php
        update-profile-information-form.blade.php
      surveys/
        edit.blade.php
        overview.blade.php
      teacherInterface/
        overview.blade.php
      templates/
        overview.blade.php
      welcome/
        navigation.blade.php
    survey_templates/
      checkbox_respond.blade.php
      smiley_respond.blade.php
      smiley.blade.php
      table_respond.blade.php
      table.blade.php
      target_respond.blade.php
      target.blade.php
    surveys/
      create.blade.php
      respond.blade.php
      statistics.blade.php
      thank-you.blade.php
    vendor/
      livewire/
        bootstrap.blade.php
        simple-bootstrap.blade.php
        simple-tailwind.blade.php
        tailwind.blade.php
      notifications/
        email.blade.php
    dashboard.blade.php
    profile.blade.php
    welcome.blade.php
routes/
  auth.php
  console.php
  web.php
storage/
  app/
    private/
      .gitignore
    public/
      .gitignore
    .gitignore
  framework/
    cache/
      data/
        .gitignore
      .gitignore
    sessions/
      .gitignore
    testing/
      .gitignore
    views/
      .gitignore
    .gitignore
  logs/
    .gitignore
tests/
  Feature/
    Auth/
      AuthenticationTest.php
      EmailVerificationTest.php
      PasswordConfirmationTest.php
      PasswordResetTest.php
      PasswordUpdateTest.php
      RegistrationTest.php
    Livewire/
      Surveys/
        OverviewTest.php
      Templates/
        OverviewTest.php
    ExampleTest.php
    ProfileTest.php
    SurveyStatisticsTest.php
  Unit/
    ExampleTest.php
    SurveyServiceTest.php
  TestCase.php
.editorconfig
.gitattributes
.gitignore
artisan
CODEOWNERS
composer.json
Database_Relations.md
docker-compose.yml
Dockerfile
Makefile
package.json
phpunit.xml
postcss.config.js
README.md
statistics-page.html
tailwind.config.js
vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/ISSUE_TEMPLATE/issue-template.md">
---
name: Issue Template
about: The general template for issues
title: ''
labels: ''
assignees: ''

---

<!--
Use this issue template for pointing out a general issue.
-->

## Issue

<!--
Briefly describe the issue.
-->

### Problem to solve

<!-- Include the following detail as necessary:
* What product or feature(s) affected?
* Any other ideas or requests?
-->

### Further details

<!--
* Any concepts, procedures, reference info *
* Include use cases, benefits, and/or goals for this work.
-->

### Proposal

<!-- Further specifics for how can we solve the problem. -->

### Who can address the issue

<!-- What if any special expertise is required to resolve this issue? -->

### Other links/references

<!-- E.g. related Github issues/MRs -->
</file>

<file path=".github/workflows/build.yml">
name: Build and Push
on:
  workflow_call:
    outputs:
      image_tag:
        description: "The tag of the built image"
        value: ${{ jobs.build.outputs.image_tag }}
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check Version Format in Tag
        if: startsWith(github.ref, 'refs/tags/v')
        uses: nowsprinting/check-version-format-action@v4.0.2
        id: check-version
        with:
          prefix: 'v'
      - name: Set tag
        id: set-tag
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          TAG1="dev"
          TAG2="commit-$SHORT_SHA"
          if [[ "${{ steps.check-version.outputs.is_valid }}" == 'true' ]]; then
            TAG1="latest"
            TAG2="${{ steps.check-version.outputs.full_without_prefix }}"
          fi
          echo "TAG1=$TAG1" >> $GITHUB_ENV
          echo "TAG2=$TAG2" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/feedback-forms/feedback-forms
          tags: |
            ${{ env.TAG1 }}
            ${{ env.TAG2 }}
      - name: Build and push
        uses: docker/build-push-action@v5
        id: build-push
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GIT_SHA=${{ env.SHORT_SHA }}
</file>

<file path=".github/workflows/ci-cd.yml">
name: CI/CD Pipeline
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    uses: ./.github/workflows/build.yml
    secrets: inherit
  deploy-test:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    uses: ./.github/workflows/deploy.yml
    with:
      environment: test
      image_tag: ${{ needs.build.outputs.image_tag }}
    secrets: inherit
  deploy-production:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')  # Deploy to production only from tags
    uses: ./.github/workflows/deploy.yml
    with:
      environment: production
      image_tag: ${{ needs.build.outputs.image_tag }}
    secrets: inherit
</file>

<file path=".github/workflows/deploy.yml">
name: Deploy to Kubernetes
on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to (production/test)'
        required: true
        type: string
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        type: string
    secrets:
      KUBE_CONFIG:
        required: true
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set environment variables
        run: |
          if [[ "${{ inputs.environment }}" == "production" ]]; then
            echo "NAMESPACE=feedback-forms" >> $GITHUB_ENV
            echo "DOMAIN=feedback-forms.uts-x.com" >> $GITHUB_ENV
          else
            echo "NAMESPACE=feedback-forms-test" >> $GITHUB_ENV
            echo "DOMAIN=feedback-forms-test.uts-x.com" >> $GITHUB_ENV
          fi
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      - name: Create kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
      - name: Update deployment files
        run: |
          IMAGE_TAG=$(echo "${{ inputs.image_tag }}" | tr ',' '\n' | tail -n1 | tr -d ' ')
          # Update namespace and image tags in all deployment files
          for file in deployments/*deployment.yaml deployments/db-setup-job.yaml deployments/nginx-configmap.yaml deployments/ingress.yaml; do
            sed -i "s/namespace: feedback-forms/namespace: ${{ env.NAMESPACE }}/g" "$file"
            sed -i "s|:dev|:${IMAGE_TAG#ghcr.io/feedback-forms/feedback-forms:}|g" "$file"
          done
          # Update domain in ingress and APP_URL in deployments
          sed -i "s/feedback-forms.uts-x.com/${{ env.DOMAIN }}/g" deployments/ingress.yaml
          sed -i "s/\$(DOMAIN)/${{ env.DOMAIN }}/g" deployments/app-deployment.yaml
          sed -i "s/\$(DOMAIN)/${{ env.DOMAIN }}/g" deployments/queue-deployment.yaml
      - name: Apply ConfigMaps and Secrets first
        run: |
          kubectl apply -f deployments/nginx-configmap.yaml
          # Wait for resources to be available
          sleep 5
      - name: Deploy PostgreSQL
        run: |
          kubectl apply -f deployments/postgres-deployment.yaml
          kubectl rollout status deployment/postgres -n ${{ env.NAMESPACE }} --timeout=180s
          kubectl wait --for=condition=ready pod -l app=postgres -n ${{ env.NAMESPACE }} --timeout=300s
      - name: Deploy database setup
        run: |
          kubectl delete job db-setup -n ${{ env.NAMESPACE }} --ignore-not-found
          kubectl apply -f deployments/db-setup-job.yaml
          kubectl wait --for=condition=complete job/db-setup -n ${{ env.NAMESPACE }} --timeout=1800s
      - name: Deploy application and queue
        run: |
          kubectl apply -f deployments/app-deployment.yaml
          kubectl apply -f deployments/queue-deployment.yaml
          kubectl apply -f deployments/ingress.yaml
      - name: Verify deployments
        run: |
          kubectl rollout status deployment/feedback-forms -n ${{ env.NAMESPACE }} --timeout=900s
          kubectl rollout status deployment/feedback-forms-queue -n ${{ env.NAMESPACE }} --timeout=900s
      - name: Health check
        run: |
          echo "Waiting for application to be ready..."
          for i in {1..20}; do
            if curl -f -k https://${{ env.DOMAIN }}/ -H "Host: ${{ env.DOMAIN }}" --retry 3 --retry-delay 10; then
              echo "Application is responding successfully"
              exit 0
            fi
            echo "Attempt $i/20 - Waiting 15 seconds before next attempt..."
            sleep 15
          done
          echo "Application failed to respond within timeout"
          kubectl get pods -n ${{ env.NAMESPACE }}
          kubectl describe pods -n ${{ env.NAMESPACE }}
          kubectl logs -n ${{ env.NAMESPACE }} -l app=feedback-forms -c php-fpm --tail=100
          exit 1
</file>

<file path=".github/pull_request_template.md">
## Motivation

<!--
Explain briefly what this change aims to achieve and why it is important to do so.
Please keep this description updated with any discussion that takes place so
that reviewers can understand your intent. Keeping the description updated is
especially important if they didn't participate in the discussion.
-->

## Changes

<!--
List the changes made to the code base. Per default, all commits are listed here.
Please keep this description updated as you add new changes to the PR.
-->

## Tests done

<!--
List the tests that were done to verify the changes.
-->

## TODO

- [x] I've assigned myself to this PR
</file>

<file path="app/Console/Commands/CheckSurveyQuestions.php">
<?php
namespace App\Console\Commands;
use Illuminate\Console\Command;
use App\Models\Feedback;
use App\Models\Question;
class CheckSurveyQuestions extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'app:check-survey-questions {survey_id : The ID of the survey to check}';
    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Check questions for a specific survey';
    /**
     * Execute the console command.
     */
    public function handle()
    {
        $surveyId = $this->argument('survey_id');
        $survey = Feedback::find($surveyId);
        if (!$survey) {
            $this->error("Survey with ID {$surveyId} not found!");
            return 1;
        }
        $this->info("Checking survey: {$survey->id} (Template: {$survey->feedback_template->name})");
        $this->newLine();
        // Check template questions
        $templateQuestions = Question::whereNull('feedback_id')
            ->where('feedback_template_id', $survey->feedback_template_id)
            ->orderBy('order')
            ->get();
        $this->info("Template questions: " . $templateQuestions->count());
        $headers = ['ID', 'Question', 'Type', 'Order'];
        $rows = [];
        foreach ($templateQuestions as $question) {
            $rows[] = [
                $question->id,
                $question->question,
                $question->question_template->type ?? 'unknown',
                $question->order
            ];
        }
        if (!empty($rows)) {
            $this->table($headers, $rows);
        }
        $this->newLine();
        // Check survey-specific questions
        $surveyQuestions = Question::where('feedback_id', $survey->id)
            ->orderBy('order')
            ->get();
        $this->info("Survey-specific questions: " . $surveyQuestions->count());
        $rows = [];
        foreach ($surveyQuestions as $question) {
            $rows[] = [
                $question->id,
                $question->question,
                $question->question_template->type ?? 'unknown',
                $question->order
            ];
        }
        if (!empty($rows)) {
            $this->table($headers, $rows);
        }
        return 0;
    }
}
</file>

<file path="app/Console/Commands/CheckSurveyStatistics.php">
<?php
namespace App\Console\Commands;
use Illuminate\Console\Command;
use App\Models\Feedback;
use App\Services\SurveyService;
class CheckSurveyStatistics extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'app:check-survey-statistics {survey_id : The ID of the survey to check}';
    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Check statistics for a specific survey';
    /**
     * Execute the console command.
     */
    public function handle(SurveyService $surveyService)
    {
        $surveyId = $this->argument('survey_id');
        $survey = Feedback::find($surveyId);
        if (!$survey) {
            $this->error("Survey with ID {$surveyId} not found!");
            return 1;
        }
        $this->info("Checking statistics for survey: {$survey->id} (Template: {$survey->feedback_template->name})");
        $this->newLine();
        // Calculate statistics
        $statistics = $surveyService->calculateStatisticsForSurvey($survey);
        if (empty($statistics)) {
            $this->warn("No statistics found for this survey.");
            return 0;
        }
        $this->info("Found " . count($statistics) . " statistics entries.");
        // Display statistics
        foreach ($statistics as $index => $stat) {
            $this->line("Statistic #" . ($index + 1));
            $this->line("  Template Type: " . $stat['template_type']);
            if ($stat['question']) {
                $this->line("  Question: " . $stat['question']->question);
            } else {
                $this->line("  Question: null (template overview)");
            }
            $this->line("  Data:");
            foreach ($stat['data'] as $key => $value) {
                if (is_array($value)) {
                    $this->line("    {$key}: " . json_encode($value));
                } else if (is_object($value)) {
                    $this->line("    {$key}: [Object]");
                } else {
                    $this->line("    {$key}: {$value}");
                }
            }
            $this->newLine();
        }
        return 0;
    }
}
</file>

<file path="app/Console/Commands/ListTableQuestions.php">
<?php
namespace App\Console\Commands;
use Illuminate\Console\Command;
use App\Models\Feedback_template;
use App\Models\Question;
class ListTableQuestions extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'app:list-table-questions';
    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'List all questions for the table template';
    /**
     * Execute the console command.
     */
    public function handle()
    {
        $tableTemplate = Feedback_template::where('name', 'templates.feedback.table')->first();
        if (!$tableTemplate) {
            $this->error('Table template not found!');
            return 1;
        }
        $questions = Question::whereNull('feedback_id')
            ->where('feedback_template_id', $tableTemplate->id)
            ->orderBy('order')
            ->get();
        if ($questions->isEmpty()) {
            $this->warn('No questions found for the table template.');
            return 0;
        }
        $this->info('Found ' . $questions->count() . ' questions for the table template:');
        $this->newLine();
        $headers = ['ID', 'Question', 'Type', 'Order'];
        $rows = [];
        foreach ($questions as $question) {
            $rows[] = [
                $question->id,
                $question->question,
                $question->question_template->type ?? 'unknown',
                $question->order
            ];
        }
        $this->table($headers, $rows);
        return 0;
    }
}
</file>

<file path="app/Console/Commands/UpdateAllTableSurveys.php">
<?php
namespace App\Console\Commands;
use Illuminate\Console\Command;
use App\Models\Feedback;
use App\Models\Question;
use App\Models\Feedback_template;
use Illuminate\Support\Facades\DB;
class UpdateAllTableSurveys extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'app:update-all-table-surveys';
    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Update all table surveys to match the template';
    /**
     * Execute the console command.
     */
    public function handle()
    {
        // Find the table template
        $tableTemplate = Feedback_template::where('name', 'templates.feedback.table')->first();
        if (!$tableTemplate) {
            $this->error("Table template not found!");
            return 1;
        }
        $this->info("Found table template with ID: {$tableTemplate->id}");
        // Get all surveys using the table template
        $surveys = Feedback::where('feedback_template_id', $tableTemplate->id)->get();
        if ($surveys->isEmpty()) {
            $this->info("No table surveys found.");
            return 0;
        }
        $this->info("Found {$surveys->count()} table surveys to update.");
        // Get template questions
        $templateQuestions = Question::whereNull('feedback_id')
            ->where('feedback_template_id', $tableTemplate->id)
            ->orderBy('order')
            ->get();
        if ($templateQuestions->isEmpty()) {
            $this->error("No template questions found for table template!");
            return 1;
        }
        $this->info("Found {$templateQuestions->count()} template questions.");
        // Update each survey
        $successCount = 0;
        $errorCount = 0;
        foreach ($surveys as $survey) {
            $this->line("Updating survey ID: {$survey->id}");
            // Begin transaction
            DB::beginTransaction();
            try {
                // Delete existing survey questions
                $deletedCount = Question::where('feedback_id', $survey->id)->delete();
                // Create new survey questions based on template
                $createdCount = 0;
                foreach ($templateQuestions as $templateQuestion) {
                    Question::create([
                        'feedback_template_id' => $tableTemplate->id,
                        'feedback_id' => $survey->id,
                        'question_template_id' => $templateQuestion->question_template_id,
                        'question' => $templateQuestion->question,
                        'order' => $templateQuestion->order,
                    ]);
                    $createdCount++;
                }
                // Commit transaction
                DB::commit();
                $this->info("  - Deleted {$deletedCount} questions, created {$createdCount} questions.");
                $successCount++;
            } catch (\Exception $e) {
                // Rollback transaction on error
                DB::rollBack();
                $this->error("  - Error updating survey: " . $e->getMessage());
                $errorCount++;
            }
        }
        $this->newLine();
        $this->info("Update complete: {$successCount} surveys updated successfully, {$errorCount} errors.");
        return 0;
    }
}
</file>

<file path="app/Console/Commands/UpdateSurveyQuestions.php">
<?php
namespace App\Console\Commands;
use Illuminate\Console\Command;
use App\Models\Feedback;
use App\Models\Question;
use Illuminate\Support\Facades\DB;
class UpdateSurveyQuestions extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'app:update-survey-questions {survey_id : The ID of the survey to update}';
    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Update survey questions to match the template';
    /**
     * Execute the console command.
     */
    public function handle()
    {
        $surveyId = $this->argument('survey_id');
        $survey = Feedback::find($surveyId);
        if (!$survey) {
            $this->error("Survey with ID {$surveyId} not found!");
            return 1;
        }
        $this->info("Updating survey: {$survey->id} (Template: {$survey->feedback_template->name})");
        // Get template questions
        $templateQuestions = Question::whereNull('feedback_id')
            ->where('feedback_template_id', $survey->feedback_template_id)
            ->orderBy('order')
            ->get();
        if ($templateQuestions->isEmpty()) {
            $this->error("No template questions found for template ID {$survey->feedback_template_id}!");
            return 1;
        }
        $this->info("Found {$templateQuestions->count()} template questions.");
        // Begin transaction
        DB::beginTransaction();
        try {
            // Delete existing survey questions
            $deletedCount = Question::where('feedback_id', $survey->id)->delete();
            $this->info("Deleted {$deletedCount} existing survey questions.");
            // Create new survey questions based on template
            $createdCount = 0;
            foreach ($templateQuestions as $templateQuestion) {
                Question::create([
                    'feedback_template_id' => $survey->feedback_template_id,
                    'feedback_id' => $survey->id,
                    'question_template_id' => $templateQuestion->question_template_id,
                    'question' => $templateQuestion->question,
                    'order' => $templateQuestion->order,
                ]);
                $createdCount++;
            }
            $this->info("Created {$createdCount} new survey questions based on template.");
            // Commit transaction
            DB::commit();
            $this->info("Survey questions updated successfully!");
        } catch (\Exception $e) {
            // Rollback transaction on error
            DB::rollBack();
            $this->error("Error updating survey questions: " . $e->getMessage());
            return 1;
        }
        return 0;
    }
}
</file>

<file path="app/Exceptions/InvalidAccessKeyException.php">
<?php
namespace App\Exceptions;
use Exception;
use Illuminate\Http\Request;
use Illuminate\Http\RedirectResponse;
class InvalidAccessKeyException extends Exception
{
    /**
     * Render the exception into an HTTP response.
     *
     * @param Request $request
     * @return RedirectResponse
     */
    public function render(Request $request): RedirectResponse
    {
        return redirect()->route('welcome')
            ->with('error', __('surveys.invalid_access_key'));
    }
}
</file>

<file path="app/Exceptions/SurveyNotAvailableException.php">
<?php
namespace App\Exceptions;
use Exception;
use Illuminate\Http\Request;
use Illuminate\Http\RedirectResponse;
class SurveyNotAvailableException extends Exception
{
    /**
     * Render the exception into an HTTP response.
     *
     * @param Request $request
     * @return RedirectResponse
     */
    public function render(Request $request): RedirectResponse
    {
        return redirect()->route('welcome')
            ->with('error', __('surveys.survey_not_available'));
    }
}
</file>

<file path="app/Http/Controllers/Api/SurveyController.php">
<?php
namespace App\Http\Controllers\Api;
use App\Http\Controllers\Controller;
use App\Services\SurveyService;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
class SurveyController extends Controller
{
    public function __construct(
        protected SurveyService $surveyService
    ) {}
    /**
     * Create a new survey
     */
    public function store(Request $request): JsonResponse
    {
        $validated = $request->validate([
            'template_id' => 'required|exists:feedback_templates,id',
            'expire_date' => 'required|date|after:now',
            'response_limit' => 'nullable|integer|min:-1',
            'questions' => 'required|array|min:1',
            'questions.*.template_id' => 'required|exists:question_templates,id',
            'questions.*.text' => 'required|string|max:255',
        ]);
        try {
            $survey = $this->surveyService->createFromTemplate(
                $validated,
                auth()->id()
            );
            return response()->json([
                'message' => 'Survey created successfully',
                'survey' => $survey->load(['questions' => function($query) {
                    $query->orderBy('order')->with('question_template');
                }]),
            ], 201);
        } catch (\Exception $e) {
            return response()->json([
                'message' => 'Failed to create survey',
                'error' => $e->getMessage(),
            ], 500);
        }
    }
}
</file>

<file path="app/Http/Controllers/Auth/VerifyEmailController.php">
<?php
namespace App\Http\Controllers\Auth;
use App\Http\Controllers\Controller;
use Illuminate\Auth\Events\Verified;
use Illuminate\Foundation\Auth\EmailVerificationRequest;
use Illuminate\Http\RedirectResponse;
class VerifyEmailController extends Controller
{
    /**
     * Mark the authenticated user's email address as verified.
     */
    public function __invoke(EmailVerificationRequest $request): RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(route('dashboard', absolute: false).'?verified=1');
        }
        if ($request->user()->markEmailAsVerified()) {
            event(new Verified($request->user()));
        }
        return redirect()->intended(route('dashboard', absolute: false).'?verified=1');
    }
}
</file>

<file path="app/Http/Controllers/Controller.php">
<?php
namespace App\Http\Controllers;
abstract class Controller
{
    //
}
</file>

<file path="app/Http/Controllers/SurveyController.php">
<?php
namespace App\Http\Controllers;
use App\Http\Requests\SmileyRequest;
use Illuminate\Support\Facades\{Log};
use App\Services\SurveyService;
use App\Models\{Feedback_template, Question_template, Feedback, SchoolYear, Department, GradeLevel, SchoolClass, Subject};
use Illuminate\Http\Request;
use Illuminate\View\View;
use Illuminate\Http\RedirectResponse;
class SurveyController extends Controller
{
    public function __construct(
        protected SurveyService $surveyService
    ) {}
    /**
     * Show the survey creation form
     */
    public function create(Request $request): View|RedirectResponse
    {
        $templates = Feedback_template::all();
        $questionTemplates = Question_template::all();
        $selectedTemplate = $request->route('template') ?? $request->query('template');
        // If no template is selected, redirect to templates page
        if (!$selectedTemplate) {
            return redirect()->route('templates.index')
                ->with('info', __('surveys.select_template_first'));
        }
        // Load options from database
        $schoolYears = SchoolYear::active()->get();
        $departments = Department::active()->get();
        $gradeLevels = GradeLevel::active()->orderBy('level')->get();
        $schoolClasses = SchoolClass::active()->get();
        $subjects = Subject::active()->get();
        // Verify the template exists
        $template = $templates->where('name', 'templates.feedback.' . $selectedTemplate)->first();
        if (!$template) {
            return redirect()->route('templates.index')
                ->with('error', __('surveys.template_not_found'));
        }
        return view('surveys.create', [
            'templates' => $templates,
            'questionTemplates' => $questionTemplates,
            'selectedTemplate' => $selectedTemplate,
            'schoolYears' => $schoolYears,
            'departments' => $departments,
            'gradeLevels' => $gradeLevels,
            'schoolClasses' => $schoolClasses,
            'subjects' => $subjects,
        ]);
    }
    /**
     * Store a new survey
     */
    public function store(Request $request): RedirectResponse
    {
        $validated = $request->validate([
            'template_id' => 'required|exists:feedback_templates,id',
            'expire_date' => 'required|date|after:now',
            'response_limit' => 'nullable|integer|min:-1',
            'school_year' => 'required|string',
            'department' => 'required|string',
            'grade_level' => 'required|string',
            'class' => 'required|string',
            'subject' => 'required|string',
            'survey_data' => 'nullable|string',
        ]);
        try {
            // Process the survey data if it exists
            if (isset($validated['survey_data'])) {
                $surveyData = json_decode($validated['survey_data'], true);
                // Store the survey data for later use or processing
                session(['survey_data' => $surveyData]);
                unset($validated['survey_data']);
            }
            $survey = $this->surveyService->createFromTemplate(
                $validated,
                auth()->id()
            );
            // Ensure the survey was created successfully
            if (!$survey || !$survey->exists) {
                throw new \Exception('Survey creation failed');
            }
            // Force a redirect to the surveys index page
            return redirect()->to(route('surveys.list'))
                ->with('success', __('surveys.created_successfully'));
        } catch (\Exception $e) {
            // Log the error for debugging
            \Log::error('Survey creation failed: ' . $e->getMessage());
            return back()
                ->withInput()
                ->with('error', __('surveys.creation_failed') . ' ' . $e->getMessage());
        }
    }
    /**
     * Show survey details
     */
    public function show(Feedback $survey): View
    {
        $canBeAnswered = $this->surveyService->canBeAnswered($survey);
        return view('surveys.show', [
            'survey' => $survey->load(['questions.question_template']),
            'canBeAnswered' => $canBeAnswered,
        ]);
    }
    public function showSmiley()
    {
        return view('survey_templates.smiley');
    }
    public function showTable()
    {
        return view('survey_templates.table');
    }
    public function showTarget()
    {
        return view('survey_templates.target');
    }
    public function retrieveSmiley(SmileyRequest $request)
    {
        try {
            dd($request);
        } catch(\Exception $e) {
            Log::debug('Error while retrieving Data from Smiley Template: ' . $e);
        }
    }
}
</file>

<file path="app/Http/Controllers/SurveyResponseController.php">
<?php
namespace App\Http\Controllers;
use App\Exceptions\InvalidAccessKeyException;
use App\Exceptions\SurveyNotAvailableException;
use App\Models\Feedback;
use App\Models\Question;
use App\Models\Result;
use App\Services\SurveyService;
use Illuminate\Http\Request;
use Illuminate\View\View;
use Illuminate\Http\RedirectResponse;
use Illuminate\Support\Facades\Log;
use Illuminate\Validation\ValidationException;
class SurveyResponseController extends Controller
{
    public function __construct(
        protected SurveyService $surveyService
    ) {}
    /**
     * Submit survey responses
     *
     * @param Request $request
     * @param string $accesskey
     * @return RedirectResponse
     * @throws InvalidAccessKeyException
     * @throws SurveyNotAvailableException
     */
    public function submitResponses(Request $request, string $accesskey): RedirectResponse
    {
        Log::info("Survey submission attempt", [
            'accesskey' => $accesskey,
            'has_responses' => $request->has('responses'),
            'response_type' => gettype($request->input('responses'))
        ]);
        $survey = Feedback::where('accesskey', $accesskey)->first();
        if (!$survey) {
            Log::warning("Invalid access key used for survey submission", [
                'accesskey' => $accesskey
            ]);
            throw new InvalidAccessKeyException();
        }
        if (!$this->surveyService->canBeAnswered($survey)) {
            Log::warning("Attempt to submit to unavailable survey", [
                'survey_id' => $survey->id,
                'accesskey' => $accesskey,
                'expire_date' => $survey->expire_date,
                'limit' => $survey->limit,
                'submission_count' => $survey->submission_count
            ]);
            throw new SurveyNotAvailableException();
        }
        try {
            // Load the survey with its questions to ensure we're working with the correct data
            $survey->load(['questions' => function($query) {
                $query->orderBy('order')->with('question_template');
            }]);
            // Check if the response is a JSON string (from template-specific forms)
            $responses = $request->input('responses');
            $success = false;
            if (is_string($responses) && $this->isJson($responses)) {
                // Handle JSON string response
                $jsonData = json_decode($responses, true);
                $success = $this->storeJsonResponses($survey, $jsonData);
            } else {
                // Validate the responses with more flexible validation for array inputs
                $validated = $request->validate([
                    'responses' => 'required|array',
                    'responses.*' => 'required',
                ]);
                // Process and store the responses as an array
                $success = $this->surveyService->storeResponses($survey, $validated['responses']);
            }
            if (!$success) {
                throw new \Exception('Failed to store responses');
            }
            // Ensure the counter is updated
            $survey->refresh();
            Log::info("Survey submission successful", [
                'survey_id' => $survey->id,
                'accesskey' => $accesskey
            ]);
            return redirect()->route('surveys.thank-you')
                ->with('success', __('surveys.response_submitted'));
        } catch (ValidationException $e) {
            Log::error('Survey submission validation failed: ' . $e->getMessage(), [
                'survey_id' => $survey->id,
                'accesskey' => $accesskey,
                'exception' => $e
            ]);
            return back()
                ->withInput()
                ->withErrors($e->errors());
        } catch (\Exception $e) {
            Log::error('Survey submission failed: ' . $e->getMessage(), [
                'survey_id' => $survey->id,
                'accesskey' => $accesskey,
                'exception' => $e
            ]);
            return back()
                ->withInput()
                ->with('error', __('surveys.submission_failed'));
        }
    }
    /**
     * Check if a string is valid JSON
     *
     * @param mixed $string The string to check
     * @return bool True if the string is valid JSON, false otherwise
     */
    private function isJson($string): bool
    {
        if (!is_string($string)) {
            return false;
        }
        json_decode($string);
        return json_last_error() === JSON_ERROR_NONE;
    }
    /**
     * Store survey responses from JSON data
     *
     * @param Feedback $survey The survey to store responses for
     * @param array $jsonData The JSON data to store
     * @return bool True if responses were stored successfully, false otherwise
     */
    private function storeJsonResponses(Feedback $survey, array $jsonData): bool
    {
        if (empty($jsonData)) {
            Log::warning("Empty JSON data received for survey submission", [
                'survey_id' => $survey->id,
                'accesskey' => $survey->accesskey
            ]);
            return false;
        }
        Log::info("Processing JSON response", [
            'survey_id' => $survey->id,
            'json_data' => $jsonData
        ]);
        try {
            // Process and store the responses as structured data, not as JSON
            return $this->surveyService->storeResponses($survey, ['json_data' => $jsonData]);
        } catch (\Exception $e) {
            Log::error('Error storing survey responses from JSON: ' . $e->getMessage(), [
                'survey_id' => $survey->id,
                'exception' => $e,
                'json_data' => $jsonData
            ]);
            return false;
        }
    }
    /**
     * Show thank you page after survey submission
     *
     * @return View
     */
    public function showThankYou(): View
    {
        return view('surveys.thank-you');
    }
}
</file>

<file path="app/Http/Controllers/SurveyStatisticsController.php">
<?php
namespace App\Http\Controllers;
use App\Models\Feedback;
use App\Services\SurveyService;
use Illuminate\Http\Request;
use Illuminate\View\View;
use Illuminate\Support\Facades\Gate;
class SurveyStatisticsController extends Controller
{
    /**
     * Create a new controller instance.
     */
    public function __construct(protected SurveyService $surveyService)
    {
        // Auth middleware is applied in the route definition
    }
    /**
     * Show statistics for a specific survey.
     */
    public function show(Feedback $survey): View
    {
        // Authorization: Ensure the logged-in user owns the survey
        if (! Gate::allows('owns-survey', $survey)) {
            abort(403, 'Unauthorized action.');
        }
        // Eager load all necessary relationships for statistics calculation
        $survey->load(['feedback_template', 'questions.question_template', 'questions.results']);
        $statisticsData = $this->surveyService->calculateStatisticsForSurvey($survey);
        return view('surveys.statistics', [
            'survey' => $survey,
            'statisticsData' => $statisticsData,
        ]);
    }
}
</file>

<file path="app/Http/Controllers/WelcomeController.php">
<?php
namespace App\Http\Controllers;
use App\Models\Feedback;
use App\Services\SurveyService;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Http\RedirectResponse;
use Illuminate\View\View;
use Illuminate\Support\Facades\Log;
class WelcomeController extends Controller
{
    public function __construct(
        protected SurveyService $surveyService
    ) {}
    /**
     * Show the welcome page with survey access form
     */
    public function index(): View
    {
        return view('welcome');
    }
    /**
     * Access a survey through QR code scanning
     */
    public function scanQrAccess(Request $request): RedirectResponse
    {
        // Get the token from the URL query parameter
        $token = $request->query('token');
        Log::info("QR Code scan request received", [
            'token_exists' => !empty($token),
            'token_length' => !empty($token) ? strlen($token) : 0,
            'request_url' => $request->fullUrl(),
            'user_agent' => $request->userAgent()
        ]);
        if (empty($token)) {
            Log::warning("QR code scan missing token parameter");
            return redirect()->route('welcome')
                ->with('error', __('surveys.invalid_access_key'));
        }
        // Check if the token is valid (corresponds to an existing survey)
        $survey = Feedback::where('accesskey', $token)->first();
        if (!$survey) {
            Log::warning("Invalid access key used via QR code", [
                'accesskey' => $token
            ]);
            return redirect()->route('welcome')
                ->with('error', __('surveys.invalid_access_key'));
        }
        // Optionally, check if the survey can be answered
        if (!$this->surveyService->canBeAnswered($survey)) {
            Log::warning("Attempt to access unavailable survey via QR code", [
                'survey_id' => $survey->id,
                'accesskey' => $token,
                'expire_date' => $survey->expire_date,
                'limit' => $survey->limit,
                'already_answered' => $survey->already_answered
            ]);
            return redirect()->route('welcome')
                ->with('error', __('surveys.survey_not_available'));
        }
        Log::info("Valid survey access via QR code", [
            'survey_id' => $survey->id,
            'accesskey' => $token
        ]);
        // Redirect to welcome page with the token
        // The welcome page will handle form submission with the token
        return redirect()->route('welcome', ['token' => $token]);
    }
    /**
     * Access a survey using an access key
     */
    public function accessSurvey(Request $request): View|RedirectResponse
    {
        $validated = $request->validate([
            'token' => 'required|string',
        ]);
        Log::info("Survey access attempt", [
            'accesskey' => $validated['token']
        ]);
        $survey = Feedback::where('accesskey', $validated['token'])->first();
        if (!$survey) {
            Log::warning("Invalid access key used", [
                'accesskey' => $validated['token']
            ]);
            return back()->with('error', __('surveys.invalid_access_key'));
        }
        if (!$this->surveyService->canBeAnswered($survey)) {
            Log::warning("Attempt to access unavailable survey", [
                'survey_id' => $survey->id,
                'accesskey' => $validated['token'],
                'expire_date' => $survey->expire_date,
                'limit' => $survey->limit,
                'already_answered' => $survey->already_answered
            ]);
            return back()->with('error', __('surveys.survey_not_available'));
        }
        Log::info("Survey accessed successfully", [
            'survey_id' => $survey->id,
            'accesskey' => $validated['token']
        ]);
        // Load the survey with its template and questions
        $survey->load([
            'feedback_template',
            'questions' => function($query) {
                $query->with('question_template');
            }
        ]);
        // Get the template name from the feedback_template
        $templateName = $survey->feedback_template->name ?? '';
        // Extract the template type from the name (e.g., "templates.feedback.target" -> "target")
        $templateType = '';
        if (preg_match('/templates\.feedback\.(\w+)$/', $templateName, $matches)) {
            $templateType = $matches[1];
        }
        // If we have a valid template type, render that template
        if (in_array($templateType, ['target', 'smiley', 'table', 'checkbox'])) {
            return view("survey_templates.{$templateType}_respond", [
                'survey' => $survey,
                'isStudentView' => true,
            ]);
        }
        // Fallback to the generic response form
        return view('surveys.respond', [
            'survey' => $survey,
        ]);
    }
}
</file>

<file path="app/Http/Requests/SmileyRequest.php">
<?php
namespace App\Http\Requests;
use Illuminate\Foundation\Http\FormRequest;
class SmileyRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }
    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'positive' => 'required',
            'negative' => 'required'
        ];
    }
}
</file>

<file path="app/Livewire/Actions/Logout.php">
<?php
namespace App\Livewire\Actions;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Session;
class Logout
{
    /**
     * Log the current user out of the application.
     */
    public function __invoke(): void
    {
        Auth::guard('web')->logout();
        Session::invalidate();
        Session::regenerateToken();
    }
}
</file>

<file path="app/Livewire/Admin/Panel.php">
<?php
namespace App\Livewire\Admin;
use Livewire\Component;
use App\Models\User;
use App\Models\Registerkey;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Support\Str;
class Panel extends Component
{
    public Collection $users;
    public Collection $registerkeys;
    // Success message to show after token operations
    public ?string $successMessage = null;
    public function mount(): void
    {
        $this->users = User::all();
        $this->registerkeys = Registerkey::orderBy('created_at', 'desc')->get();
    }
    public function render()
    {
        return view('livewire/admin/panel', [
            'users' => $this->users,
            'registerkeys' => $this->registerkeys,
        ]);
    }
    /**
     * Generate a new registration key
     */
    public function createToken(): void
    {
        // Generate a token with format XXXX-XXXX (where X is alphanumeric)
        $code = Str::upper(Str::substr(Str::uuid(), 0, 4) . '-' . Str::substr(Str::uuid(), 0, 4));
        Registerkey::create(['code' => $code]);
        // Refresh the collection of registerkeys
        $this->registerkeys = Registerkey::orderBy('created_at', 'desc')->get();
        $this->successMessage = __('admin.token_created_successfully');
    }
    /**
     * Revoke (delete) a registration key
     */
    public function revokeToken(int $id): void
    {
        $registerkey = Registerkey::find($id);
        if ($registerkey) {
            // Set registerkey_id to NULL for all users associated with this key
            User::where('registerkey_id', $registerkey->id)->update(['registerkey_id' => null]);
            // Now it's safe to delete the registerkey
            $registerkey->delete();
            $this->successMessage = __('admin.token_revoked_successfully');
        }
        // Refresh the collection of registerkeys
        $this->registerkeys = Registerkey::orderBy('created_at', 'desc')->get();
    }
    /**
     * Clear the success message
     */
    public function clearMessage(): void
    {
        $this->successMessage = null;
    }
}
</file>

<file path="app/Livewire/Admin/Users.php">
<?php
namespace App\Livewire\Admin;
use Livewire\Component;
use App\Models\User;
use Illuminate\Database\Eloquent\Collection;
use Carbon\Carbon;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Log;
class Users extends Component
{
    public Collection $users;
    public $temporaryPassword = null;
    public $temporaryPasswordUserId = null;
    public function mount(): void
    {
        $this->users = User::all();
    }
    public function generateTemporaryPassword($userId): void
    {
        $user = User::find($userId);
        if (!$user) {
            return;
        }
        // Generate a random 10-character password
        $temporaryPassword = Str::random(10);
        // Hash the password and save it for the user
        $user->password = Hash::make($temporaryPassword);
        $user->save();
        // Flash a success message with the temporary password
        session()->flash('temporary_password_success', [
            'userId' => $userId,
            'userName' => $user->name,
            'password' => $temporaryPassword
        ]);
        // Log the action for security auditing
        Log::info('Temporary password generated', [
            'admin_user_id' => auth()->id(),
            'target_user_id' => $userId,
            'target_user_name' => $user->name
        ]);
    }
    public function render()
    {
        return view('livewire.admin.users', [
            'users' => $this->users,
        ]);
    }
}
</file>

<file path="app/Livewire/Forms/LoginForm.php">
<?php
namespace App\Livewire\Forms;
use Illuminate\Auth\Events\Lockout;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;
use Livewire\Attributes\Validate;
use Livewire\Form;
class LoginForm extends Form
{
    #[Validate('required|string|exists:users,name|max:255')]
    public string $name = '';
    #[Validate('required|string')]
    public string $password = '';
    #[Validate('boolean')]
    public bool $remember = false;
    /**
     * Attempt to authenticate the request's credentials.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function authenticate(): void
    {
        $this->ensureIsNotRateLimited();
        if (! Auth::attempt($this->only(['name', 'password']), $this->remember)) {
            RateLimiter::hit($this->throttleKey());
            throw ValidationException::withMessages([
                'form.username' => trans('auth.failed'),
            ]);
        }
        RateLimiter::clear($this->throttleKey());
    }
    /**
     * Ensure the authentication request is not rate limited.
     */
    protected function ensureIsNotRateLimited(): void
    {
        if (! RateLimiter::tooManyAttempts($this->throttleKey(), 5)) {
            return;
        }
        event(new Lockout(request()));
        $seconds = RateLimiter::availableIn($this->throttleKey());
        throw ValidationException::withMessages([
            'form.username' => trans('auth.throttle', [
                'seconds' => $seconds,
                'minutes' => ceil($seconds / 60),
            ]),
        ]);
    }
    /**
     * Get the authentication rate limiting throttle key.
     */
    protected function throttleKey(): string
    {
        return Str::transliterate(Str::lower($this->name).'|'.request()->ip());
    }
}
</file>

<file path="app/Livewire/Forms/RegisterForm.php">
<?php
namespace App\Livewire\Forms;
use App\Models\Registerkey;
use Illuminate\Auth\Events\Lockout;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;
use Livewire\Attributes\Validate;
use Livewire\Form;
class RegisterForm extends Form
{
    public string $name = '';
    public string $email = '';
    public string $password = '';
    public string $password_confirmation = '';
    public string $register_key = '';
    public function getRegisterKey(string $code): Registerkey
    {
        $registerKey = Registerkey::query()->where('code', $code)->first();
        return $registerKey;
    }
    /**
     * Ensure the authentication request is not rate limited.
     */
    protected function ensureIsNotRateLimited(): void
    {
        if (! RateLimiter::tooManyAttempts($this->throttleKey(), 5)) {
            return;
        }
        event(new Lockout(request()));
        $seconds = RateLimiter::availableIn($this->throttleKey());
        throw ValidationException::withMessages([
            'form.email' => trans('auth.throttle', [
                'seconds' => $seconds,
                'minutes' => ceil($seconds / 60),
            ]),
        ]);
    }
    /**
     * Get the authentication rate limiting throttle key.
     */
    protected function throttleKey(): string
    {
        return Str::transliterate(Str::lower($this->email).'|'.request()->ip());
    }
}
</file>

<file path="app/Livewire/Surveys/Edit.php">
<?php
namespace App\Livewire\Surveys;
use App\Models\Feedback;
use App\Models\SchoolYear;
use App\Models\Department;
use App\Models\GradeLevel;
use App\Models\SchoolClass;
use App\Models\Subject;
use Carbon\Carbon;
use Livewire\Component;
use Illuminate\Support\Facades\Log;
use Illuminate\Database\Eloquent\Collection;
class Edit extends Component
{
    public Feedback $survey;
    public Collection $schoolYears;
    public Collection $departments;
    public Collection $gradeLevels;
    public Collection $schoolClasses;
    public Collection $subjects;
    // Form fields
    public ?string $expire_date;
    public ?int $response_limit;
    public ?string $school_year;
    public ?string $department;
    public ?string $grade_level;
    public ?string $class;
    public ?string $subject;
    protected $rules = [
        'expire_date' => 'required|date|after:now',
        'response_limit' => 'nullable|integer|min:-1',
        'school_year' => 'required|string',
        'department' => 'required|string',
        'grade_level' => 'required|string',
        'class' => 'required|string',
        'subject' => 'required|string',
    ];
    public function mount($id)
    {
        // Initialize collections
        $this->schoolYears = new Collection();
        $this->departments = new Collection();
        $this->gradeLevels = new Collection();
        $this->schoolClasses = new Collection();
        $this->subjects = new Collection();
        // Load the survey
        $this->survey = Feedback::findOrFail($id);
        // Ensure the user can only edit their own surveys
        if ($this->survey->user_id !== auth()->id()) {
            abort(403, 'Unauthorized action.');
        }
        // Load options from database
        $this->schoolYears = SchoolYear::active()->get();
        $this->departments = Department::active()->get();
        $this->gradeLevels = GradeLevel::active()->orderBy('level')->get();
        $this->schoolClasses = SchoolClass::active()->get();
        $this->subjects = Subject::active()->get();
        // Set form values from the survey
        // Handle expire_date safely, ensuring it's a Carbon instance
        if ($this->survey->expire_date instanceof Carbon) {
            $this->expire_date = $this->survey->expire_date->format('Y-m-d\TH:i');
        } else {
            // If it's a string (for existing records), convert it to Carbon
            $this->expire_date = Carbon::parse($this->survey->expire_date)->format('Y-m-d\TH:i');
        }
        $this->response_limit = $this->survey->limit;
        $this->school_year = $this->survey->school_year;
        $this->department = $this->survey->department;
        $this->grade_level = $this->survey->grade_level;
        $this->class = $this->survey->class;
        $this->subject = $this->survey->subject;
    }
    public function save()
    {
        $this->validate();
        try {
            $this->survey->update([
                'expire_date' => Carbon::parse($this->expire_date),
                'limit' => $this->response_limit,
                'school_year' => $this->school_year,
                'department' => $this->department,
                'grade_level' => $this->grade_level,
                'class' => $this->class,
                'subject' => $this->subject,
            ]);
            session()->flash('success', __('surveys.updated_successfully'));
            return redirect()->route('surveys.list');
        } catch (\Exception $e) {
            Log::error('Survey update failed: ' . $e->getMessage());
            session()->flash('error', __('surveys.update_failed') . ' ' . $e->getMessage());
        }
    }
    public function render()
    {
        return view('livewire.surveys.edit');
    }
}
</file>

<file path="app/Livewire/Surveys/Overview.php">
<?php
namespace App\Livewire\Surveys;
use App\Models\Feedback;
use Carbon\Carbon;
use Livewire\Component;
class Overview extends Component
{
    public array $filterState = [
        'expired' => false,
        'running' => true,
        'cancelled' => false,
    ];
    public $surveys = [];
    public function mount()
    {
        $this->loadSurveys();
    }
    public function filter(string $filter): void
    {
        $this->filterState[$filter] = !$this->filterState[$filter];
        $this->loadSurveys();
    }
    protected function loadSurveys()
    {
        // Start with a base query for the authenticated user
        $query = Feedback::with(['feedback_template', 'user'])
            ->where('user_id', auth()->id());
        // Use a separate array to track conditions
        $conditions = [];
        // Add filter conditions
        if ($this->filterState['expired']) {
            $conditions[] = function($query) {
                $query->where('expire_date', '<', Carbon::now());
            };
        }
        if ($this->filterState['running']) {
            $conditions[] = function($query) {
                $query->where('expire_date', '>=', Carbon::now())
                      ->where(function($q) {
                          $q->where('limit', -1)
                            ->orWhereColumn('already_answered', '<', 'limit');
                      });
            };
        }
        // Apply conditions with orWhere if any exist
        if (count($conditions) > 0) {
            $query->where(function($q) use ($conditions) {
                foreach ($conditions as $index => $condition) {
                    if ($index === 0) {
                        $q->where(function($subQ) use ($condition) {
                            $condition($subQ);
                        });
                    } else {
                        $q->orWhere(function($subQ) use ($condition) {
                            $condition($subQ);
                        });
                    }
                }
            });
        }
        // Order by creation date
        $query->orderBy('created_at', 'desc');
        // Execute query and store results
        $this->surveys = $query->get();
    }
    public function render()
    {
        return view('livewire.surveys.overview', [
            'surveys' => $this->surveys
        ]);
    }
}
</file>

<file path="app/Livewire/TeacherInterface/Overview.php">
<?php
namespace App\Livewire\TeacherInterface;
use Livewire\Component;
class Overview extends Component
{
    public array $templates = [];
    public array $featuredItems = [];
    public function mount()
    {
        // Populate template gallery items
        $this->templates = [
            ['title' => 'Multiple-Choice', 'image' => 'img/preview.png'],
            ['title' => 'Checkbox Lists', 'image' => 'img/preview.png'],
            ['title' => 'Sliders', 'image' => 'img/preview.png'],
            ['title' => 'Rating Scale', 'image' => 'img/preview.png'],
            ['title' => 'Open Text', 'image' => 'img/preview.png'],
            ['title' => 'Customer Satisfaction Survey', 'image' => 'img/preview.png'],
            ['title' => 'Employee Engagement Survey', 'image' => 'img/preview.png'],
            ['title' => 'Product Feedback Form', 'image' => 'img/preview.png'],
            ['title' => 'Employee Satisfaction Survey', 'image' => 'img/preview.png'],
            ['title' => 'Customer Feedback Form', 'image' => 'img/preview.png'],
            ['title' => 'Employee Engagement Survey', 'image' => 'img/preview.png'],
            ['title' => 'Product Feedback Form', 'image' => 'img/preview.png'],
        ];
        // Populate featured items
        $this->featuredItems = [
            [
                'title' => 'Customer Satisfaction Survey',
                'description' => 'Comprehensive template for gathering customer feedback and measuring satisfaction levels.',
                'image' => 'img/preview.png'
            ],
            [
                'title' => 'Employee Engagement Survey',
                'description' => 'Template designed to measure employee satisfaction and engagement in the workplace.',
                'image' => 'img/preview.png'
            ],
            [
                'title' => 'Product Feedback Form',
                'description' => 'Structured template for collecting detailed product feedback from users.',
                'image' => 'img/preview.png'
            ],
        ];
    }
    public function render()
    {
        return view('livewire.teacherInterface.overview');
    }
}
</file>

<file path="app/Livewire/Templates/Overview.php">
<?php
namespace App\Livewire\Templates;
use App\Models\Feedback_template;
use Livewire\Component;
class Overview extends Component
{
    public array $templates = [];
    public array $featuredItems = [];
    public array $dbTemplates = [];
    public function mount()
    {
        // Get templates from database
        $this->dbTemplates = Feedback_template::all()->toArray();
        // Map database templates to display format
        $templateTypes = [
            'templates.feedback.target' => [
                'title' => __('templates.target_feedback'),
                'description' => __('templates.target_feedback_description'),
                'image' => 'img/preview.png',
                'route' => 'feedback/target'
            ],
            'templates.feedback.table' => [
                'title' => __('templates.table_feedback'),
                'description' => __('templates.table_feedback_description'),
                'image' => 'img/preview.png',
                'route' => 'feedback/table'
            ],
            'templates.feedback.smiley' => [
                'title' => __('templates.smiley_feedback'),
                'description' => __('templates.smiley_feedback_description'),
                'image' => 'img/preview.png',
                'route' => 'feedback/smiley'
            ],
            'templates.feedback.checkbox' => [
                'title' => __('templates.checkbox_feedback'),
                'description' => __('templates.checkbox_feedback_description'),
                'image' => 'img/preview.png',
                'route' => 'feedback/checkbox'
            ],
        ];
        // Populate template gallery items
        $this->templates = [];
        foreach ($this->dbTemplates as $template) {
            if (isset($templateTypes[$template['name']])) {
                $templateInfo = $templateTypes[$template['name']];
                $templateType = str_replace('templates.feedback.', '', $template['name']);
                $this->templates[] = [
                    'id' => $template['id'],
                    'name' => $template['name'],
                    'title' => $templateInfo['title'],
                    'description' => $templateInfo['description'],
                    'image' => $templateInfo['image'],
                    'route' => $templateInfo['route'],
                    'create_url' => route('surveys.create.from-template', $templateType)
                ];
            }
        }
        // Add some additional templates for the gallery
        $additionalTemplates = [
            ['title' => 'Multiple-Choice', 'image' => 'img/preview.png'],
            ['title' => 'Checkbox Lists', 'image' => 'img/preview.png'],
            ['title' => 'Sliders', 'image' => 'img/preview.png'],
            ['title' => 'Rating Scale', 'image' => 'img/preview.png'],
            ['title' => 'Open Text', 'image' => 'img/preview.png'],
        ];
        $this->templates = array_merge($this->templates, $additionalTemplates);
        // Populate featured items with actual templates that have create_url
        $featuredTemplates = array_filter($this->templates, function($template) {
            return isset($template['create_url']);
        });
        $this->featuredItems = array_slice($featuredTemplates, 0, 3);
    }
    public function render()
    {
        return view('livewire.templates.overview');
    }
}
</file>

<file path="app/Models/Department.php">
<?php
namespace App\Models;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;
class Department extends Model
{
    protected $fillable = ['code', 'name', 'is_active'];
    public function scopeActive($query)
    {
        return $query->where('is_active', true);
    }
    public function subjects(): HasMany
    {
        return $this->hasMany(Subject::class);
    }
}
</file>

<file path="app/Models/Feedback_template.php">
<?php
namespace App\Models;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\{HasOne, HasMany};
class Feedback_template extends Model
{
    protected $fillable = [
        'name',
        'title'
    ];
    public function feedbacks(): HasMany
    {
        return $this->hasMany(Feedback::class);
    }
    public function questions(): HasMany
    {
        return $this->hasMany(Question::class);
    }
}
</file>

<file path="app/Models/Feedback.php">
<?php
namespace App\Models;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\{BelongsTo, HasMany, HasManyThrough};
use Illuminate\Support\Facades\DB;
class Feedback extends Model
{
    protected $fillable = [
        'user_id',
        'feedback_template_id',
        'accesskey',
        'limit',
        'already_answered',
        'expire_date',
        'status',
        'school_year',
        'department',
        'grade_level',
        'class',
        'subject'
    ];
    /**
     * The attributes that should be cast.
     *
     * @var array
     */
    protected $casts = [
        'expire_date' => 'datetime',
    ];
    /**
     * The accessors to append to the model's array form.
     *
     * @var array
     */
    protected $appends = [
        'submission_count',
    ];
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }
    public function feedback_template(): BelongsTo
    {
        return $this->belongsTo(Feedback_template::class);
    }
    public function questions(): HasMany
    {
        return $this->hasMany(Question::class)->orderBy('order');
    }
    /**
     * Get all results associated with this feedback through its questions.
     */
    public function results(): HasManyThrough
    {
        return $this->hasManyThrough(Result::class, Question::class);
    }
    /**
     * Get the number of unique submissions for this feedback
     *
     * @return int
     */
    public function getSubmissionCountAttribute()
    {
        return DB::table('results')
            ->join('questions', 'results.question_id', '=', 'questions.id')
            ->where('questions.feedback_id', $this->id)
            ->distinct('results.submission_id')
            ->count('results.submission_id');
    }
    /**
     * Get the already_answered attribute dynamically
     *
     * @return int
     */
    public function getAlreadyAnsweredAttribute()
    {
        return $this->submission_count;
    }
    /**
     * Get all unique submission IDs for this feedback
     *
     * @return array
     */
    public function getUniqueSubmissionIdsAttribute()
    {
        return DB::table('results')
            ->join('questions', 'results.question_id', '=', 'questions.id')
            ->where('questions.feedback_id', $this->id)
            ->distinct('results.submission_id')
            ->pluck('results.submission_id')
            ->toArray();
    }
}
</file>

<file path="app/Models/GradeLevel.php">
<?php
namespace App\Models;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;
class GradeLevel extends Model
{
    protected $fillable = ['name', 'level', 'is_active'];
    public function scopeActive($query)
    {
        return $query->where('is_active', true);
    }
    public function schoolClasses(): HasMany
    {
        return $this->hasMany(SchoolClass::class);
    }
}
</file>

<file path="app/Models/Question_template.php">
<?php
namespace App\Models;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;
class Question_template extends Model
{
    protected $fillable = [
        'type',
        'min_value',
        'max_value'
    ];
    public function questions(): HasMany
    {
        return $this->hasMany(Question::class);
    }
}
</file>

<file path="app/Models/Question.php">
<?php
namespace App\Models;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\{BelongsTo, HasMany};
class Question extends Model
{
    protected $fillable = [
        'feedback_template_id',
        'question_template_id',
        'feedback_id',
        'question',
        'order'
    ];
    /**
     * The attributes that should be cast.
     *
     * @var array
     */
    protected $casts = [
        'order' => 'integer',
    ];
    public function feedback_template(): BelongsTo
    {
        return $this->belongsTo(Feedback_template::class);
    }
    public function feedback(): BelongsTo
    {
        return $this->belongsTo(Feedback::class);
    }
    public function question_template(): BelongsTo
    {
        return $this->belongsTo(Question_template::class);
    }
    public function results(): HasMany
    {
        return $this->hasMany(Result::class);
    }
    /**
     * Get the latest result for this question.
     */
    public function latestResult()
    {
        return $this->results()->latest()->first();
    }
    /**
     * Get all results for a specific submission.
     */
    public function submissionResults($submissionId)
    {
        return $this->results()->where('submission_id', $submissionId)->get();
    }
}
</file>

<file path="app/Models/Registerkey.php">
<?php
namespace App\Models;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;
class Registerkey extends Model
{
    protected $fillable = ['code'];
    public function users(): HasMany
    {
        return $this->hasMany(User::class);
    }
}
</file>

<file path="app/Models/Result.php">
<?php
namespace App\Models;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
class Result extends Model
{
    protected $fillable = [
        'question_id',
        'submission_id',
        'value_type',
        'rating_value'
    ];
    /**
     * The attributes that should be cast.
     *
     * @var array
     */
    protected $casts = [
        'submission_id' => 'string',
    ];
    public function question(): BelongsTo
    {
        return $this->belongsTo(Question::class);
    }
    /**
     * Scope a query to only include results from a specific submission.
     *
     * @param  \Illuminate\Database\Eloquent\Builder  $query
     * @param  string  $submissionId
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeSubmission($query, $submissionId)
    {
        return $query->where('submission_id', $submissionId);
    }
}
</file>

<file path="app/Models/SchoolClass.php">
<?php
namespace App\Models;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
class SchoolClass extends Model
{
    protected $fillable = ['name', 'grade_level_id', 'is_active'];
    public function scopeActive($query)
    {
        return $query->where('is_active', true);
    }
    public function gradeLevel(): BelongsTo
    {
        return $this->belongsTo(GradeLevel::class);
    }
}
</file>

<file path="app/Models/SchoolYear.php">
<?php
namespace App\Models;
use Illuminate\Database\Eloquent\Model;
class SchoolYear extends Model
{
    protected $fillable = ['name', 'is_active'];
    public function scopeActive($query)
    {
        return $query->where('is_active', true);
    }
}
</file>

<file path="app/Models/Subject.php">
<?php
namespace App\Models;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
class Subject extends Model
{
    protected $fillable = ['code', 'name', 'department_id', 'is_active'];
    public function scopeActive($query)
    {
        return $query->where('is_active', true);
    }
    public function department(): BelongsTo
    {
        return $this->belongsTo(Department::class);
    }
}
</file>

<file path="app/Models/User.php">
<?php
namespace App\Models;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use App\Notifications\CustomVerifyEmail;
use Illuminate\Support\Facades\Log;
class User extends Authenticatable implements MustVerifyEmail
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory, Notifiable;
    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'registerkey_id'
    ];
    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];
    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }
    /**
     * Send the email verification notification.
     */
    public function sendEmailVerificationNotification(): void
    {
        // Skip verification in non-production environments
        if (app()->environment('local', 'testing')) {
            $this->markEmailAsVerified();
            return;
        }
        if (!$this->email) {
            return;
        }
        try {
            $this->notify(new CustomVerifyEmail);
            Log::info('Verification email queued successfully', [
                'user_id' => $this->id,
                'email' => $this->email
            ]);
        } catch (\Exception $e) {
            Log::error('Failed to queue verification email', [
                'user_id' => $this->id,
                'error' => $e->getMessage()
            ]);
        }
    }
    public function registerkey(): BelongsTo
    {
        return $this->belongsTo(Registerkey::class);
    }
    public function feedbacks(): HasMany
    {
        return $this->hasMany(Feedback::class);
    }
}
</file>

<file path="app/Notifications/CustomVerifyEmail.php">
<?php
namespace App\Notifications;
use Illuminate\Auth\Notifications\VerifyEmail;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\URL;
use Illuminate\Support\Facades\Config;
class CustomVerifyEmail extends VerifyEmail implements ShouldQueue
{
    use Queueable;
    /**
     * Create a new notification instance.
     */
    public function __construct()
    {
    }
    /**
     * Get the notification's delivery channels.
     *
     * @return array<int, string>
     */
    public function via($notifiable): array
    {
        return ['mail'];
    }
    /**
     * Get the mail representation of the notification.
     */
    public function toMail($notifiable): MailMessage
    {
        $verificationUrl = $this->verificationUrl($notifiable);
        Log::info('Sending verification email', [
            'user' => $notifiable->name,
            'email' => $notifiable->email,
            'url' => $verificationUrl
        ]);
        return (new MailMessage)
            ->subject(__('notification.verify_email.subject'))
            ->markdown('vendor.notifications.email', [
                'greeting' => __('notification.verify_email.greeting', ['name' => $notifiable->name]),
                'introLines' => [__('notification.verify_email.intro')],
                'actionText' => __('notification.verify_email.action'),
                'actionUrl' => $verificationUrl,
                'level' => 'default',
                'outroLines' => [__('notification.verify_email.outro')],
                'salutation' => __('notification.verify_email.salutation') . "\n" . config('app.name') . ' Team'
            ]);
    }
    /**
     * Get the array representation of the notification.
     *
     * @return array<string, mixed>
     */
    public function toArray(object $notifiable): array
    {
        return [
            //
        ];
    }
}
</file>

<file path="app/Policies/FeedbackPolicy.php">
<?php
namespace App\Policies;
use App\Models\Feedback;
use App\Models\User;
class FeedbackPolicy
{
    /**
     * Create a new policy instance.
     */
    public function __construct()
    {
        //
    }
    /**
     * Determine if the user owns the survey/feedback.
     */
    public function ownsSurvey(User $user, Feedback $feedback): bool
    {
        return $feedback->user_id === $user->id;
    }
}
</file>

<file path="app/Providers/AppServiceProvider.php">
<?php
namespace App\Providers;
use App\Models\User;
use App\Models\Feedback;
use App\Policies\FeedbackPolicy;
use Illuminate\Support\Facades\Gate;
use Illuminate\Support\ServiceProvider;
class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }
    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        Gate::define('admin', function (User $user) {
            return $user->is_admin;
        });
        // Register the owns-survey gate
        Gate::define('owns-survey', [FeedbackPolicy::class, 'ownsSurvey']);
    }
}
</file>

<file path="app/Providers/VoltServiceProvider.php">
<?php
namespace App\Providers;
use Illuminate\Support\ServiceProvider;
use Livewire\Volt\Volt;
class VoltServiceProvider extends ServiceProvider
{
    /**
     * Register services.
     */
    public function register(): void
    {
        //
    }
    /**
     * Bootstrap services.
     */
    public function boot(): void
    {
        Volt::mount([
            config('livewire.view_path', resource_path('views/livewire')),
            resource_path('views/pages'),
        ]);
    }
}
</file>

<file path="app/Services/SurveyService.php">
<?php
namespace App\Services;
use App\Models\{Feedback, Question, Result, Feedback_template, Question_template};
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;
use Carbon\Carbon;
class SurveyService
{
    /**
     * Create a new survey from template
     */
    public function createFromTemplate(array $data, int $userId): Feedback
    {
        return DB::transaction(function () use ($data, $userId) {
            // Create the feedback/survey
            $survey = Feedback::create([
                'user_id' => $userId,
                'feedback_template_id' => $data['template_id'],
                'accesskey' => $this->generateUniqueAccessKey(),
                'limit' => $data['response_limit'] ?? -1,
                'expire_date' => Carbon::parse($data['expire_date']),
                'school_year' => $data['school_year'] ?? null,
                'department' => $data['department'] ?? null,
                'grade_level' => $data['grade_level'] ?? null,
                'class' => $data['class'] ?? null,
                'subject' => $data['subject'] ?? null,
            ]);
            // Get the template and its associated question templates
            $template = Feedback_template::with('questions.question_template')->findOrFail($data['template_id']);
            $templateName = $template->name ?? '';
            // Special handling for target template
            if (str_contains($templateName, 'templates.feedback.target')) {
                // Create 8 questions for the target template, one for each segment
                $targetStatements = [
                    'Ich lerne im Unterricht viel.',
                    'Die Lehrkraft hat ein großes Hintergrundwissen.',
                    'Die Lehrkraft ist immer gut vorbereitet.',
                    'Die Lehrkraft zeigt Interesse an ihren Schülern.',
                    'Die Lehrkraft sorgt für ein gutes Lernklima in der Klasse.',
                    'Die Notengebung ist fair und nachvollziehbar.',
                    'Ich konnte dem Unterricht immer gut folgen.',
                    'Der Unterricht wird vielfältig gestaltet.'
                ];
                // Find or create a range question template for target segments
                $rangeQuestionTemplate = Question_template::firstOrCreate(
                    ['type' => 'range', 'min_value' => 1, 'max_value' => 5],
                    ['min_value' => 1, 'max_value' => 5]
                );
                foreach ($targetStatements as $index => $statement) {
                    Question::create([
                        'feedback_template_id' => $data['template_id'],
                        'feedback_id' => $survey->id,
                        'question_template_id' => $rangeQuestionTemplate->id,
                        'question' => $statement,
                        'order' => $index + 1,
                    ]);
                }
                return $survey;
            }
            // Special handling for smiley template
            else if (str_contains($templateName, 'templates.feedback.smiley')) {
                // Find or create a text question template
                $textQuestionTemplate = Question_template::firstOrCreate(
                    ['type' => 'text'],
                    ['min_value' => null, 'max_value' => null]
                );
                // Create two questions: one for positive feedback and one for negative feedback
                Question::create([
                    'feedback_template_id' => $data['template_id'],
                    'feedback_id' => $survey->id,
                    'question_template_id' => $textQuestionTemplate->id,
                    'question' => 'Positive Feedback',
                    'order' => 1,
                ]);
                Question::create([
                    'feedback_template_id' => $data['template_id'],
                    'feedback_id' => $survey->id,
                    'question_template_id' => $textQuestionTemplate->id,
                    'question' => 'Negative Feedback',
                    'order' => 2,
                ]);
                return $survey;
            }
            // If the template has predefined questions, use those
            else if ($template->questions->count() > 0) {
                foreach ($template->questions as $index => $templateQuestion) {
                    Question::create([
                        'feedback_template_id' => $data['template_id'],
                        'feedback_id' => $survey->id,
                        'question_template_id' => $templateQuestion->question_template_id ?? null,
                        'question' => $templateQuestion->question,
                        'order' => $templateQuestion->order ?? ($index + 1),
                    ]);
                }
            }
            // For other templates or fallback
            else {
                // Find or create a text question template to use
                $textQuestionTemplate = Question_template::firstOrCreate(
                    ['type' => 'text'],
                    ['min_value' => null, 'max_value' => null]
                );
                // Create a default question for this survey
                Question::create([
                    'feedback_template_id' => $data['template_id'],
                    'feedback_id' => $survey->id,
                    'question_template_id' => $textQuestionTemplate->id,
                    'question' => 'General Feedback', // Generic question text
                    'order' => 1,
                ]);
            }
            return $survey;
        });
    }
    /**
     * Generate a unique 8-character access key
     */
    private function generateUniqueAccessKey(): string
    {
        do {
            $key = strtoupper(substr(md5(uniqid()), 0, 8));
        } while (Feedback::where('accesskey', $key)->exists());
        return $key;
    }
    /**
     * Validate if survey can be answered (not expired, within limits)
     *
     * @param Feedback $survey The survey to check
     * @return bool True if the survey can be answered, false otherwise
     */
    public function canBeAnswered(Feedback $survey): bool
    {
        if ($survey->expire_date < Carbon::now()) {
            return false;
        }
        if ($survey->limit > 0 && $survey->submission_count >= $survey->limit) {
            return false;
        }
        return true;
    }
    /**
     * Store survey responses
     *
     * @param Feedback $survey The survey to store responses for
     * @param array $responses The responses to store
     * @return bool True if responses were stored successfully, false otherwise
     * @throws \Exception If there's an error during response storage
     */
    public function storeResponses(Feedback $survey, array $responses): bool
    {
        try {
            return DB::transaction(function () use ($survey, $responses) {
                // Generate a unique submission ID to group all responses from this submission
                $submissionId = (string) Str::uuid();
                // Log the submission attempt
                Log::info("Processing survey submission", [
                    'survey_id' => $survey->id,
                    'accesskey' => $survey->accesskey,
                    'submission_id' => $submissionId
                ]);
                // Get all questions for this survey
                $questions = $survey->questions;
                $responseCount = 0;
                // Check if this is a JSON data structure (from template-specific forms like target)
                if (isset($responses['json_data']) && is_array($responses['json_data'])) {
                    try {
                        // Handle template-specific response format using pre-decoded JSON data
                        $this->storeTemplateSpecificResponses($survey, $responses['json_data'], $submissionId);
                        // Set the status to update if it's a draft or running
                        if (in_array($survey->status, ['draft', 'running'])) {
                            $survey->update(['status' => 'running']);
                        }
                        return true;
                    } catch (\Exception $e) {
                        Log::error('Error processing structured JSON data: ' . $e->getMessage(), [
                            'survey_id' => $survey->id,
                            'response_data' => $responses['json_data'],
                            'exception' => $e
                        ]);
                        return false;
                    }
                // Legacy check for JSON string (can be removed after frontend updates)
                } else if (count($responses) === 1 && isset($responses[0]) && is_string($responses[0])) {
                    try {
                        $jsonData = json_decode($responses[0], true);
                        if (json_last_error() === JSON_ERROR_NONE && is_array($jsonData)) {
                            // Handle template-specific response format
                            $this->storeTemplateSpecificResponses($survey, $jsonData, $submissionId);
                            // Set the status to update if it's a draft or running
                            if (in_array($survey->status, ['draft', 'running'])) {
                                $survey->update(['status' => 'running']);
                            }
                            return true;
                        }
                    } catch (\Exception $e) {
                        Log::error('Error parsing JSON response: ' . $e->getMessage(), [
                            'survey_id' => $survey->id,
                            'response_data' => $responses[0],
                            'exception' => $e
                        ]);
                        return false;
                    }
                }
                // Handle regular question-by-question responses
                foreach ($responses as $questionId => $value) {
                    // Skip non-numeric keys (like 'feedback' from the form)
                    // Non-numeric keys are typically form metadata or special fields that are not directly tied to questions
                    // 'feedback' is handled separately as a special case for general survey feedback
                    if (!is_numeric($questionId) && $questionId !== 'feedback') {
                        continue;
                    }
                    // Special handling for feedback
                    if ($questionId === 'feedback' && !empty($value)) {
                        $result = Result::create([
                            'question_id' => $questions->first()->id ?? null,
                            'submission_id' => $submissionId,
                            'value_type' => 'text',
                            'rating_value' => $value,
                        ]);
                        $responseCount++;
                        continue;
                    }
                    // Verify the question belongs to this survey
                    $question = $questions->firstWhere('id', $questionId);
                    if (!$question) {
                        // Try to find by index if the questionId is numeric but not an actual ID
                        $index = (int)$questionId;
                        if ($index >= 0 && $index < $questions->count()) {
                            $question = $questions[$index];
                        } else {
                            Log::warning("Question not found for survey", [
                                'survey_id' => $survey->id,
                                'question_id' => $questionId,
                                'index' => $index
                            ]);
                            continue; // Skip if question doesn't belong to this survey
                        }
                    }
                    // Get the question template type
                    $questionTemplateType = $question->question_template->type ?? 'text'; // Default to 'text'
                    // Set the appropriate value_type based on question template type
                    $valueType = 'text'; // Default
                    switch ($questionTemplateType) {
                        case 'range':
                            $valueType = 'number';
                            break;
                        case 'checkboxes':
                        case 'checkbox':
                            $valueType = 'checkbox';
                            break;
                        case 'textarea':
                        case 'text':
                            $valueType = 'text';
                            break;
                        default:
                            $valueType = 'text';
                            break;
                    }
                    // Data validation based on value_type
                    $isValidValue = true;
                    switch ($valueType) {
                        case 'number':
                            if (!is_numeric($value)) {
                                $isValidValue = false;
                                Log::warning("Invalid rating_value for number type", [
                                    'survey_id' => $survey->id,
                                    'question_id' => $question->id,
                                    'value_type' => $valueType,
                                    'provided_value' => $value,
                                ]);
                            }
                            break;
                        // For 'text' and 'checkbox', any string value is considered valid for this basic example.
                        default:
                            break;
                    }
                    if (!$isValidValue) {
                        Log::warning("Skipping invalid response value", [
                            'survey_id' => $survey->id,
                            'question_id' => $question->id,
                            'value' => $value,
                        ]);
                        continue;
                    }
                    // Handle different question types
                    switch ($questionTemplateType) {
                        case 'range':
                            // Create a new result record with a scalar rating value
                            $result = Result::create([
                                'question_id' => $question->id,
                                'submission_id' => $submissionId,
                                'value_type' => $valueType,
                                'rating_value' => $value,
                            ]);
                            break;
                        case 'checkboxes':
                        case 'checkbox':
                            // If the value is an array of checkbox options
                            if (is_array($value)) {
                                // Validate the array values
                                $validValues = array_filter($value, function($optionValue) {
                                    return is_string($optionValue) || is_numeric($optionValue);
                                });
                                if (empty($validValues)) {
                                    Log::warning("No valid values found in checkbox response", [
                                        'survey_id' => $survey->id,
                                        'question_id' => $question->id,
                                        'values' => $value
                                    ]);
                                    continue 2; // Skip to next response
                                }
                                // For each selected checkbox option, create a separate result
                                try {
                                    foreach ($validValues as $optionValue) {
                                        Result::create([
                                            'question_id' => $question->id,
                                            'submission_id' => $submissionId,
                                            'value_type' => $valueType,
                                            'rating_value' => (string)$optionValue, // Ensure it's a string
                                        ]);
                                        Log::info("Stored checkbox option", [
                                            'survey_id' => $survey->id,
                                            'question_id' => $question->id,
                                            'option' => $optionValue
                                        ]);
                                    }
                                    $responseCount += count($validValues);
                                } catch (\Exception $e) {
                                    Log::error("Failed to store checkbox options", [
                                        'survey_id' => $survey->id,
                                        'question_id' => $question->id,
                                        'values' => $validValues,
                                        'error' => $e->getMessage()
                                    ]);
                                }
                                // Since we've already created the results above, continue to next response
                                continue 2; // Skip the rest of the switch and outer loop iteration
                            } else if (is_string($value) || is_numeric($value)) {
                                // Handle case where a single value is submitted instead of an array
                                Log::info("Converting single checkbox value to array", [
                                    'survey_id' => $survey->id,
                                    'question_id' => $question->id,
                                    'value' => $value
                                ]);
                                // Continue normal processing with the single value
                            } else {
                                Log::warning("Invalid checkbox value type", [
                                    'survey_id' => $survey->id,
                                    'question_id' => $question->id,
                                    'value_type' => gettype($value)
                                ]);
                                continue 2; // Skip to next response
                            }
                            // Create a single result for a single checkbox value
                            $result = Result::create([
                                'question_id' => $question->id,
                                'submission_id' => $submissionId,
                                'value_type' => $valueType,
                                'rating_value' => (string)$value,
                            ]);
                            break;
                        default: // Default case, e.g., 'text' or unknown types
                            // Create a new result with default text value_type
                            $result = Result::create([
                                'question_id' => $question->id,
                                'submission_id' => $submissionId,
                                'value_type' => $valueType,
                                'rating_value' => $value,
                            ]);
                            break;
                    }
                    $responseCount++;
                }
                // Only increment if we actually stored responses
                if ($responseCount > 0) {
                    // Set the status to update if it's a draft or running
                    if (in_array($survey->status, ['draft', 'running'])) {
                        $survey->update(['status' => 'running']);
                    }
                    Log::info("Survey response stored successfully", [
                        'survey_id' => $survey->id,
                        'submission_id' => $submissionId,
                        'response_count' => $responseCount
                    ]);
                } else {
                    Log::warning("No responses were stored for survey", [
                        'survey_id' => $survey->id
                    ]);
                    return false;
                }
                return true;
            });
        } catch (\Exception $e) {
            Log::error('Error storing survey responses: ' . $e->getMessage(), [
                'survey_id' => $survey->id,
                'exception' => $e,
                'exception_class' => get_class($e),
                'exception_trace' => $e->getTraceAsString(),
                'responses' => $responses
            ]);
            return false;
        }
    }
    /**
     * Store responses from template-specific forms (like target diagram)
     */
    private function storeTemplateSpecificResponses(Feedback $survey, array $jsonData, string $submissionId): void
    {
        // Get the template type
        $templateName = $survey->feedback_template->name ?? '';
        $templateType = '';
        if (preg_match('/templates\.feedback\.(\w+)$/', $templateName, $matches)) {
            $templateType = $matches[1];
        }
        // Log the template type for debugging
        Log::info("Processing template-specific response", [
            'survey_id' => $survey->id,
            'template_type' => $templateType,
            'submission_id' => $submissionId
        ]);
        // For target template
        if ($templateType === 'target') {
            // Validate the expected structure of jsonData
            if (!isset($jsonData['ratings']) || !is_array($jsonData['ratings'])) {
                Log::warning("Invalid target response format: 'ratings' array missing or not an array", [
                    'survey_id' => $survey->id,
                    'jsonData' => $jsonData
                ]);
                return;
            }
            // Define the expected statements for target template
            $targetStatements = [
                'Ich lerne im Unterricht viel.',
                'Die Lehrkraft hat ein großes Hintergrundwissen.',
                'Die Lehrkraft ist immer gut vorbereitet.',
                'Die Lehrkraft zeigt Interesse an ihren Schülern.',
                'Die Lehrkraft sorgt für ein gutes Lernklima in der Klasse.',
                'Die Notengebung ist fair und nachvollziehbar.',
                'Ich konnte dem Unterricht immer gut folgen.',
                'Der Unterricht wird vielfältig gestaltet.'
            ];
            // Load all questions for this survey
            $questions = $survey->questions()->get();
            // Create a mapping of segment index to question based on question text
            $segmentQuestionMap = [];
            foreach ($questions as $question) {
                $statementIndex = array_search($question->question, $targetStatements);
                if ($statementIndex !== false) {
                    $segmentQuestionMap[$statementIndex] = $question;
                }
            }
            // Process each segment rating
            foreach ($jsonData['ratings'] as $ratingData) {
                // Validate the rating data structure
                if (!isset($ratingData['segment']) || !isset($ratingData['rating'])) {
                    Log::warning("Invalid rating data in target response: missing 'segment' or 'rating'", [
                        'survey_id' => $survey->id,
                        'ratingData' => $ratingData
                    ]);
                    continue;
                }
                $segment = $ratingData['segment'];
                $ratingValue = $ratingData['rating'];
                // Validate segment index
                if (!isset($segmentQuestionMap[$segment])) {
                    Log::warning("Invalid segment index or question not found for segment", [
                        'survey_id' => $survey->id,
                        'segment' => $segment,
                        'total_questions' => count($questions)
                    ]);
                    continue;
                }
                // Validate rating value (should be 1-5 for target template)
                if (!is_numeric($ratingValue) || $ratingValue < 1 || $ratingValue > 5) {
                    Log::warning("Invalid rating value for target template", [
                        'survey_id' => $survey->id,
                        'segment' => $segment,
                        'rating' => $ratingValue
                    ]);
                    continue;
                }
                // Get corresponding question for this segment
                $question = $segmentQuestionMap[$segment];
                // Create a result with scalar rating value
                try {
                    $result = Result::create([
                        'question_id' => $question->id,
                        'submission_id' => $submissionId,
                        'value_type' => 'number',
                        'rating_value' => (string)$ratingValue, // Ensure it's a string
                    ]);
                    Log::info("Stored target segment rating", [
                        'survey_id' => $survey->id,
                        'segment' => $segment,
                        'question_id' => $question->id,
                        'rating' => $ratingValue
                    ]);
                } catch (\Exception $e) {
                    Log::error("Failed to store target segment rating", [
                        'survey_id' => $survey->id,
                        'segment' => $segment,
                        'question_id' => $question->id,
                        'rating' => $ratingValue,
                        'error' => $e->getMessage()
                    ]);
                }
            }
        }
        // For smiley template
        else if ($templateType === 'smiley') {
            // Validate the expected structure of jsonData
            $hasPositive = isset($jsonData['positive']) && is_string($jsonData['positive']);
            $hasNegative = isset($jsonData['negative']) && is_string($jsonData['negative']);
            if (!$hasPositive && !$hasNegative) {
                Log::warning("Invalid smiley response format: neither 'positive' nor 'negative' found", [
                    'survey_id' => $survey->id,
                    'jsonData' => $jsonData
                ]);
                return;
            }
            // Get the positive and negative feedback questions
            $positiveQuestion = $survey->questions()->where('question', 'Positive Feedback')->first();
            $negativeQuestion = $survey->questions()->where('question', 'Negative Feedback')->first();
            // Store positive feedback if provided
            if ($positiveQuestion && $hasPositive && !empty($jsonData['positive'])) {
                try {
                    Result::create([
                        'question_id' => $positiveQuestion->id,
                        'submission_id' => $submissionId,
                        'value_type' => 'text',
                        'rating_value' => $jsonData['positive'],
                    ]);
                    Log::info("Stored smiley positive feedback", [
                        'survey_id' => $survey->id,
                        'question_id' => $positiveQuestion->id
                    ]);
                } catch (\Exception $e) {
                    Log::error("Failed to store smiley positive feedback", [
                        'survey_id' => $survey->id,
                        'question_id' => $positiveQuestion->id,
                        'error' => $e->getMessage()
                    ]);
                }
            } else if (!$positiveQuestion) {
                Log::warning("Positive feedback question not found for smiley template", [
                    'survey_id' => $survey->id
                ]);
            }
            // Store negative feedback if provided
            if ($negativeQuestion && $hasNegative && !empty($jsonData['negative'])) {
                try {
                    Result::create([
                        'question_id' => $negativeQuestion->id,
                        'submission_id' => $submissionId,
                        'value_type' => 'text',
                        'rating_value' => $jsonData['negative'],
                    ]);
                    Log::info("Stored smiley negative feedback", [
                        'survey_id' => $survey->id,
                        'question_id' => $negativeQuestion->id
                    ]);
                } catch (\Exception $e) {
                    Log::error("Failed to store smiley negative feedback", [
                        'survey_id' => $survey->id,
                        'question_id' => $negativeQuestion->id,
                        'error' => $e->getMessage()
                    ]);
                }
            } else if (!$negativeQuestion) {
                Log::warning("Negative feedback question not found for smiley template", [
                    'survey_id' => $survey->id
                ]);
            }
        }
        // For table template
        else if ($templateType === 'table') {
            Log::info("Processing table template response", [
                'survey_id' => $survey->id,
                'submission_id' => $submissionId,
                'data' => $jsonData
            ]);
            // Validate the expected structure of jsonData for table template
            if (!isset($jsonData['ratings']) || !is_array($jsonData['ratings'])) {
                Log::warning("Invalid table response format: 'ratings' array missing or not an array", [
                    'survey_id' => $survey->id,
                    'jsonData' => $jsonData
                ]);
                return;
            }
            // Load all questions for this survey
            $questions = $survey->questions()->get();
            // Process each question rating
            foreach ($jsonData['ratings'] as $questionKey => $ratingValue) {
                // Find the corresponding question by the question text
                $question = $questions->firstWhere('question', $questionKey);
                if (!$question) {
                    Log::warning("Question not found for table template rating", [
                        'survey_id' => $survey->id,
                        'questionKey' => $questionKey
                    ]);
                    continue;
                }
                // Validate rating value (should be 1-5 for table template questions)
                if (!is_numeric($ratingValue) || $ratingValue < 1 || $ratingValue > 5) {
                    Log::warning("Invalid rating value for table template question", [
                        'survey_id' => $survey->id,
                        'questionKey' => $questionKey,
                        'rating' => $ratingValue
                    ]);
                    continue;
                }
                // Create a result with scalar rating value
                try {
                    $result = Result::create([
                        'question_id' => $question->id,
                        'submission_id' => $submissionId,
                        'value_type' => 'number',
                        'rating_value' => (string)$ratingValue, // Ensure it's a string
                    ]);
                    Log::info("Stored table question rating", [
                        'survey_id' => $survey->id,
                        'question_id' => $question->id,
                        'rating' => $ratingValue
                    ]);
                } catch (\Exception $e) {
                    Log::error("Failed to store table question rating", [
                        'survey_id' => $survey->id,
                        'question_id' => $question->id,
                        'rating' => $ratingValue,
                        'error' => $e->getMessage()
                    ]);
                }
            }
            // Store open feedback responses if provided
            if (isset($jsonData['feedback']) && is_array($jsonData['feedback'])) {
                // Find the general feedback questions if they exist
                $positiveQuestion = $questions->firstWhere('question', 'Das hat mir besonders gut gefallen');
                $negativeQuestion = $questions->firstWhere('question', 'Das hat mir nicht gefallen');
                $suggestionsQuestion = $questions->firstWhere('question', 'Verbesserungsvorschläge');
                // Store positive feedback
                if ($positiveQuestion && isset($jsonData['feedback']['positive']) && !empty($jsonData['feedback']['positive'])) {
                    try {
                        Result::create([
                            'question_id' => $positiveQuestion->id,
                            'submission_id' => $submissionId,
                            'value_type' => 'text',
                            'rating_value' => $jsonData['feedback']['positive'],
                        ]);
                        Log::info("Stored table positive feedback", [
                            'survey_id' => $survey->id,
                            'question_id' => $positiveQuestion->id
                        ]);
                    } catch (\Exception $e) {
                        Log::error("Failed to store table positive feedback", [
                            'survey_id' => $survey->id,
                            'question_id' => $positiveQuestion->id,
                            'error' => $e->getMessage()
                        ]);
                    }
                }
                // Store negative feedback
                if ($negativeQuestion && isset($jsonData['feedback']['negative']) && !empty($jsonData['feedback']['negative'])) {
                    try {
                        Result::create([
                            'question_id' => $negativeQuestion->id,
                            'submission_id' => $submissionId,
                            'value_type' => 'text',
                            'rating_value' => $jsonData['feedback']['negative'],
                        ]);
                        Log::info("Stored table negative feedback", [
                            'survey_id' => $survey->id,
                            'question_id' => $negativeQuestion->id
                        ]);
                    } catch (\Exception $e) {
                        Log::error("Failed to store table negative feedback", [
                            'survey_id' => $survey->id,
                            'question_id' => $negativeQuestion->id,
                            'error' => $e->getMessage()
                        ]);
                    }
                }
                // Store suggestions feedback
                if ($suggestionsQuestion && isset($jsonData['feedback']['suggestions']) && !empty($jsonData['feedback']['suggestions'])) {
                    try {
                        Result::create([
                            'question_id' => $suggestionsQuestion->id,
                            'submission_id' => $submissionId,
                            'value_type' => 'text',
                            'rating_value' => $jsonData['feedback']['suggestions'],
                        ]);
                        Log::info("Stored table suggestions feedback", [
                            'survey_id' => $survey->id,
                            'question_id' => $suggestionsQuestion->id
                        ]);
                    } catch (\Exception $e) {
                        Log::error("Failed to store table suggestions feedback", [
                            'survey_id' => $survey->id,
                            'question_id' => $suggestionsQuestion->id,
                            'error' => $e->getMessage()
                        ]);
                    }
                }
            }
        }
        // Fallback for other template types or if template-specific handling fails
        else {
            Log::warning("Unsupported template type or invalid data format", [
                'survey_id' => $survey->id,
                'template_type' => $templateType,
                'data' => $jsonData
            ]);
            // Get the first question as a fallback
            $firstQuestion = $survey->questions->first();
            // If no question exists, create a default one
            if (!$firstQuestion) {
                try {
                    // Find or create a text question template
                    $textQuestionTemplate = Question_template::firstOrCreate(
                        ['type' => 'text'],
                        ['min_value' => null, 'max_value' => null]
                    );
                    // Create a default question for this survey
                    $firstQuestion = Question::create([
                        'feedback_template_id' => $survey->feedback_template_id,
                        'feedback_id' => $survey->id,
                        'question_template_id' => $textQuestionTemplate->id,
                        'question' => 'General Feedback', // Generic question text
                        'order' => 1,
                    ]);
                    Log::info("Created default question for unsupported template response", [
                        'survey_id' => $survey->id,
                        'question_id' => $firstQuestion->id,
                        'template_type' => $templateType
                    ]);
                } catch (\Exception $e) {
                    Log::error("Failed to create default question for template response", [
                        'survey_id' => $survey->id,
                        'template_type' => $templateType,
                        'error' => $e->getMessage()
                    ]);
                    return;
                }
            }
            // Store a simple text response indicating the template type
            try {
                Result::create([
                    'question_id' => $firstQuestion->id,
                    'submission_id' => $submissionId,
                    'value_type' => 'text',
                    'rating_value' => "Response from {$templateType} template",
                ]);
            } catch (\Exception $e) {
                Log::error("Failed to store fallback response", [
                    'survey_id' => $survey->id,
                    'question_id' => $firstQuestion->id,
                    'template_type' => $templateType,
                    'error' => $e->getMessage()
                ]);
            }
        }
        // Set the status to running
        if (in_array($survey->status, ['draft', 'running'])) {
            try {
                $survey->update(['status' => 'running']);
            } catch (\Exception $e) {
                Log::error("Failed to update survey status", [
                    'survey_id' => $survey->id,
                    'error' => $e->getMessage()
                ]);
            }
        }
    }
    /**
     * Calculate statistics for a survey
     *
     * This method processes all questions in a survey and calculates appropriate
     * statistics based on the question type. It handles different question types
     * (range, checkbox, text, etc.) and generates statistics like averages, medians,
     * and distributions.
     *
     * @param Feedback $survey The survey to calculate statistics for
     * @return array An array of statistics data for each question
     */
    public function calculateStatisticsForSurvey(Feedback $survey): array
    {
        $statistics = [];
        try {
            // Eager load all relationships upfront to avoid N+1 query issues
            $survey->load(['feedback_template', 'questions.question_template', 'questions.results']);
            // Check if this is a target template
            $templateName = $survey->feedback_template->name ?? '';
            // Get submission count using the new attribute that counts distinct submission_ids
            $submissionCount = $survey->submission_count;
            if (str_contains($templateName, 'templates.feedback.target')) {
                // This is a target template survey
                $segmentStatistics = $this->calculateTargetStatistics($survey);
                // Add the target statistics to the result
                $statistics[] = [
                    'question' => null, // No specific question for target template overview
                    'template_type' => 'target',
                    'data' => [
                        'segment_statistics' => $segmentStatistics,
                        'submission_count' => $submissionCount,
                    ],
                ];
            }
            // Check if this is a smiley template
            else if (str_contains($templateName, 'templates.feedback.smiley')) {
                // This is a smiley template survey
                // Get positive and negative feedback questions
                $positiveQuestion = $survey->questions()->where('question', 'Positive Feedback')->first();
                $negativeQuestion = $survey->questions()->where('question', 'Negative Feedback')->first();
                // Collect positive and negative feedback
                $positiveFeedback = $positiveQuestion ? $positiveQuestion->results->pluck('rating_value')->filter() : collect();
                $negativeFeedback = $negativeQuestion ? $negativeQuestion->results->pluck('rating_value')->filter() : collect();
                // Add smiley statistics
                $statistics[] = [
                    'question' => null,
                    'template_type' => 'smiley',
                    'data' => [
                        'positive_feedback' => $positiveFeedback->toArray(),
                        'negative_feedback' => $negativeFeedback->toArray(),
                        'positive_count' => $positiveFeedback->count(),
                        'negative_count' => $negativeFeedback->count(),
                        'submission_count' => $submissionCount,
                    ],
                ];
            }
            // Check if this is a table template
            else if (str_contains($templateName, 'templates.feedback.table')) {
                // For table templates, we need to calculate statistics for each question,
                // as table templates are composed of multiple range-type questions
                // We'll handle table templates in the question loop below, no special handling needed here
                // But if we need template-wide statistics in the future, they would go here
                // Add a marker that this is a table template for reference
                $statistics[] = [
                    'question' => null,
                    'template_type' => 'table',
                    'data' => [
                        'submission_count' => $submissionCount,
                        'table_survey' => true,
                    ],
                ];
            }
            // Original statistics calculation for other templates or in addition to template-specific stats
            foreach ($survey->questions as $question) {
                // Skip template-specific questions that have already been handled above
                if ((str_contains($templateName, 'templates.feedback.smiley') &&
                    in_array($question->question, ['Positive Feedback', 'Negative Feedback'])) ||
                    (str_contains($templateName, 'templates.feedback.target') &&
                    $question->question_template && $question->question_template->type === 'range')) {
                    // Skip these questions as they're already handled in template-specific stats
                    continue;
                }
                $questionStatistics = [];
                $questionTemplateType = $question->question_template->type ?? 'text';
                switch ($questionTemplateType) {
                    case 'range':
                        // Get only the numeric results for range questions
                        $ratings = $question->results
                            ->where('value_type', 'number')
                            ->pluck('rating_value')
                            ->filter()
                            ->toArray();
                        if (!empty($ratings)) {
                            // Convert to numeric values
                            $ratings = array_map('floatval', $ratings);
                            // Calculate average (mean) rating
                            $questionStatistics['average_rating'] = round(array_sum($ratings) / count($ratings), 2);
                            // Count occurrences of each rating value
                            $questionStatistics['rating_counts'] = array_count_values(array_map('strval', $ratings));
                            // Calculate median rating
                            sort($ratings);
                            $count = count($ratings);
                            $questionStatistics['median_rating'] = $count % 2 === 0
                                ? ($ratings[($count / 2) - 1] + $ratings[$count / 2]) / 2
                                : $ratings[floor($count / 2)];
                            // Add count of unique submissions that answered this question
                            $questionStatistics['submission_count'] = $question->results
                                ->pluck('submission_id')
                                ->unique()
                                ->count();
                        } else {
                            $questionStatistics['average_rating'] = 'No responses';
                            $questionStatistics['median_rating'] = 'No responses';
                            $questionStatistics['rating_counts'] = [];
                            $questionStatistics['submission_count'] = 0;
                        }
                        break;
                    case 'checkboxes':
                    case 'checkbox':
                        // For checkbox questions, only get checkbox type results
                        $checkboxResponses = $question->results
                            ->where('value_type', 'checkbox')
                            ->pluck('rating_value')
                            ->filter()
                            ->toArray();
                        $questionStatistics['option_counts'] = !empty($checkboxResponses)
                            ? array_count_values($checkboxResponses)
                            : [];
                        // Add count of unique submissions that answered this question
                        $questionStatistics['submission_count'] = $question->results
                            ->pluck('submission_id')
                            ->unique()
                            ->count();
                        break;
                    case 'textarea':
                    case 'text':
                        // Only get text type results
                        $textResponses = $question->results
                            ->where('value_type', 'text')
                            ->pluck('rating_value')
                            ->filter()
                            ->toArray();
                        $questionStatistics['response_count'] = count($textResponses);
                        $questionStatistics['responses'] = $textResponses;
                        // Add count of unique submissions that answered this question
                        $questionStatistics['submission_count'] = $question->results
                            ->pluck('submission_id')
                            ->unique()
                            ->count();
                        break;
                    default:
                        // Handle unknown question types gracefully
                        $questionStatistics['message'] = 'Statistics not implemented for this question type.';
                        $questionStatistics['submission_count'] = 0;
                }
                // Build the complete statistics object for this question
                $statistics[] = [
                    'question' => $question,
                    'template_type' => $questionTemplateType,
                    'data' => $questionStatistics,
                ];
            }
        } catch (\Exception $e) {
            // Log the error but return a graceful empty result with more specific error information
            \Log::error('Error calculating survey statistics: ' . $e->getMessage(), [
                'survey_id' => $survey->id,
                'exception' => $e
            ]);
            return [
                [
                    'question' => null,
                    'template_type' => 'error',
                    'data' => [
                        'message' => 'An error occurred while calculating statistics: ' . $e->getMessage(),
                        'error_type' => get_class($e),
                        'survey_id' => $survey->id
                    ]
                ]
            ];
        }
        return $statistics;
    }
    /**
     * Calculate statistics for target template surveys
     *
     * This method processes target survey responses and calculates statistics
     * for each segment in the target diagram.
     *
     * @param Feedback $survey The target survey to calculate statistics for
     * @return array An array of statistics data for each segment
     */
    protected function calculateTargetStatistics(Feedback $survey): array
    {
        $segmentStatisticsData = [];
        // Use the already loaded questions and sort them in code
        $questions = $survey->questions
            ->sortBy('order')
            ->sortBy('id')
            ->values();
        // Process each question (segment)
        foreach ($questions as $index => $question) {
            // Get ratings for this segment/question (only numeric values)
            $ratings = $question->results
                ->where('value_type', 'number')
                ->pluck('rating_value')
                ->filter()
                ->toArray();
            // Convert to numeric values
            $ratings = array_map('floatval', $ratings);
            if (!empty($ratings)) {
                $averageRating = round(array_sum($ratings) / count($ratings), 2);
                $ratingCounts = array_count_values(array_map('strval', $ratings));
                // Count unique submissions for this segment question
                $submissionCount = $question->results
                    ->pluck('submission_id')
                    ->unique()
                    ->count();
            } else {
                $averageRating = 'No responses';
                $ratingCounts = [];
                $submissionCount = 0;
            }
            $segmentStatisticsData[] = [
                'segment_index' => $index,
                'statement' => $question->question,
                'average_rating' => $averageRating,
                'response_count' => count($ratings),
                'submission_count' => $submissionCount,
                'rating_counts' => $ratingCounts,
            ];
        }
        return $segmentStatisticsData;
    }
}
</file>

<file path="app/View/Components/AppLayout.php">
<?php
namespace App\View\Components;
use Illuminate\View\Component;
use Illuminate\View\View;
class AppLayout extends Component
{
    /**
     * Get the view / contents that represents the component.
     */
    public function render(): View
    {
        return view('layouts.app');
    }
}
</file>

<file path="app/View/Components/GuestLayout.php">
<?php
namespace App\View\Components;
use Illuminate\View\Component;
use Illuminate\View\View;
class GuestLayout extends Component
{
    /**
     * Get the view / contents that represents the component.
     */
    public function render(): View
    {
        return view('layouts.guest');
    }
}
</file>

<file path="app/View/Components/SurveyLayout.php">
<?php
namespace App\View\Components;
use Illuminate\View\Component;
use Illuminate\View\View;
class SurveyLayout extends Component
{
    /**
     * Get the view / contents that represents the component.
     */
    public function render(): View
    {
        return view('layouts.survey');
    }
}
</file>

<file path="bootstrap/cache/.gitignore">
*
!.gitignore
</file>

<file path="bootstrap/app.php">
<?php
use Illuminate\Foundation\Application;
use Illuminate\Foundation\Configuration\Exceptions;
use Illuminate\Foundation\Configuration\Middleware;
return Application::configure(basePath: dirname(__DIR__))
    ->withRouting(
        web: __DIR__.'/../routes/web.php',
        commands: __DIR__.'/../routes/console.php',
        health: '/up',
    )
    ->withMiddleware(function (Middleware $middleware) {
        //
    })
    ->withExceptions(function (Exceptions $exceptions) {
        //
    })->create();
</file>

<file path="bootstrap/providers.php">
<?php
return [
    App\Providers\AppServiceProvider::class,
    App\Providers\VoltServiceProvider::class,
];
</file>

<file path="config/app.php">
<?php
return [
    /*
    |--------------------------------------------------------------------------
    | Application Name
    |--------------------------------------------------------------------------
    |
    | This value is the name of your application, which will be used when the
    | framework needs to place the application's name in a notification or
    | other UI elements where an application name needs to be displayed.
    |
    */
    'name' => env('APP_NAME', 'Laravel'),
    /*
    |--------------------------------------------------------------------------
    | Application Environment
    |--------------------------------------------------------------------------
    |
    | This value determines the "environment" your application is currently
    | running in. This may determine how you prefer to configure various
    | services the application utilizes. Set this in your ".env" file.
    |
    */
    'env' => env('APP_ENV', 'production'),
    /*
    |--------------------------------------------------------------------------
    | Application Debug Mode
    |--------------------------------------------------------------------------
    |
    | When your application is in debug mode, detailed error messages with
    | stack traces will be shown on every error that occurs within your
    | application. If disabled, a simple generic error page is shown.
    |
    */
    'debug' => (bool) env('APP_DEBUG', false),
    /*
    |--------------------------------------------------------------------------
    | Application URL
    |--------------------------------------------------------------------------
    |
    | This URL is used by the console to properly generate URLs when using
    | the Artisan command line tool. You should set this to the root of
    | the application so that it's available within Artisan commands.
    |
    */
    'url' => env('APP_URL', 'http://localhost'),
    /*
    |--------------------------------------------------------------------------
    | Application Timezone
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default timezone for your application, which
    | will be used by the PHP date and date-time functions. The timezone
    | is set to "UTC" by default as it is suitable for most use cases.
    |
    */
    'timezone' => env('APP_TIMEZONE', 'UTC'),
    /*
    |--------------------------------------------------------------------------
    | Application Locale Configuration
    |--------------------------------------------------------------------------
    |
    | The application locale determines the default locale that will be used
    | by Laravel's translation / localization methods. This option can be
    | set to any locale for which you plan to have translation strings.
    |
    */
    'locale' => env('APP_LOCALE', 'en'),
    'fallback_locale' => env('APP_FALLBACK_LOCALE', 'en'),
    'faker_locale' => env('APP_FAKER_LOCALE', 'en_US'),
    /*
    |--------------------------------------------------------------------------
    | Encryption Key
    |--------------------------------------------------------------------------
    |
    | This key is utilized by Laravel's encryption services and should be set
    | to a random, 32 character string to ensure that all encrypted values
    | are secure. You should do this prior to deploying the application.
    |
    */
    'cipher' => 'AES-256-CBC',
    'key' => env('APP_KEY'),
    'previous_keys' => [
        ...array_filter(
            explode(',', env('APP_PREVIOUS_KEYS', ''))
        ),
    ],
    /*
    |--------------------------------------------------------------------------
    | Maintenance Mode Driver
    |--------------------------------------------------------------------------
    |
    | These configuration options determine the driver used to determine and
    | manage Laravel's "maintenance mode" status. The "cache" driver will
    | allow maintenance mode to be controlled across multiple machines.
    |
    | Supported drivers: "file", "cache"
    |
    */
    'maintenance' => [
        'driver' => env('APP_MAINTENANCE_DRIVER', 'file'),
        'store' => env('APP_MAINTENANCE_STORE', 'database'),
    ],
];
</file>

<file path="config/auth.php">
<?php
return [
    /*
    |--------------------------------------------------------------------------
    | Authentication Defaults
    |--------------------------------------------------------------------------
    |
    | This option defines the default authentication "guard" and password
    | reset "broker" for your application. You may change these values
    | as required, but they're a perfect start for most applications.
    |
    */
    'defaults' => [
        'guard' => env('AUTH_GUARD', 'web'),
        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),
    ],
    /*
    |--------------------------------------------------------------------------
    | Authentication Guards
    |--------------------------------------------------------------------------
    |
    | Next, you may define every authentication guard for your application.
    | Of course, a great default configuration has been defined for you
    | which utilizes session storage plus the Eloquent user provider.
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | Supported: "session"
    |
    */
    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],
    ],
    /*
    |--------------------------------------------------------------------------
    | User Providers
    |--------------------------------------------------------------------------
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | If you have multiple user tables or models you may configure multiple
    | providers to represent the model / table. These providers may then
    | be assigned to any extra authentication guards you have defined.
    |
    | Supported: "database", "eloquent"
    |
    */
    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => env('AUTH_MODEL', App\Models\User::class),
        ],
        // 'users' => [
        //     'driver' => 'database',
        //     'table' => 'users',
        // ],
    ],
    /*
    |--------------------------------------------------------------------------
    | Resetting Passwords
    |--------------------------------------------------------------------------
    |
    | These configuration options specify the behavior of Laravel's password
    | reset functionality, including the table utilized for token storage
    | and the user provider that is invoked to actually retrieve users.
    |
    | The expiry time is the number of minutes that each reset token will be
    | considered valid. This security feature keeps tokens short-lived so
    | they have less time to be guessed. You may change this as needed.
    |
    | The throttle setting is the number of seconds a user must wait before
    | generating more password reset tokens. This prevents the user from
    | quickly generating a very large amount of password reset tokens.
    |
    */
    'passwords' => [
        'users' => [
            'provider' => 'users',
            'table' => env('AUTH_PASSWORD_RESET_TOKEN_TABLE', 'password_reset_tokens'),
            'expire' => 60,
            'throttle' => 60,
        ],
    ],
    /*
    |--------------------------------------------------------------------------
    | Password Confirmation Timeout
    |--------------------------------------------------------------------------
    |
    | Here you may define the amount of seconds before a password confirmation
    | window expires and users are asked to re-enter their password via the
    | confirmation screen. By default, the timeout lasts for three hours.
    |
    */
    'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),
];
</file>

<file path="config/blade-fontawesome.php">
<?php
return [
    'brands' => [
        'prefix' => 'fab',
        'fallback' => '',
        'class' => '',
        'attributes' => [
            // 'width' => 50,
            // 'height' => 50,
        ],
    ],
    'regular' => [
        'prefix' => 'far',
        'fallback' => '',
        'class' => '',
        'attributes' => [
            // 'width' => 50,
            // 'height' => 50,
        ],
    ],
    'solid' => [
        'prefix' => 'fas',
        'fallback' => '',
        'class' => '',
        'attributes' => [
            // 'width' => 50,
            // 'height' => 50,
        ],
    ],
    /*
    |-----------------------------------------------------------------
    | Pro Icon Sets
    |-----------------------------------------------------------------
    |
    | The following configuration values are for configuring the
    | icon sets available as part of Font Awesome Pro.
    |
    | If you are not using Font Awesome Pro, this can be removed.
    |
    */
    'duotone' => [
        'prefix' => 'fad',
        'fallback' => '',
        'class' => '',
        'attributes' => [
            // 'width' => 50,
            // 'height' => 50,
        ],
    ],
    'light' => [
        'prefix' => 'fal',
        'fallback' => '',
        'class' => '',
        'attributes' => [
            // 'width' => 50,
            // 'height' => 50,
        ],
    ],
    'thin' => [
        'prefix' => 'fat',
        'fallback' => '',
        'class' => '',
        'attributes' => [
            // 'width' => 50,
            // 'height' => 50,
        ],
    ],
    'sharp-light' => [
        'prefix' => 'fal:sharp',
        'fallback' => '',
        'class' => '',
        'attributes' => [
            // 'width' => 50,
            // 'height' => 50,
        ],
    ],
    'sharp-regular' => [
        'prefix' => 'far:sharp',
        'fallback' => '',
        'class' => '',
        'attributes' => [
            // 'width' => 50,
            // 'height' => 50,
        ],
    ],
    'sharp-solid' => [
        'prefix' => 'fas:sharp',
        'fallback' => '',
        'class' => '',
        'attributes' => [
            // 'width' => 50,
            // 'height' => 50,
        ],
    ],
    'sharp-duotone-solid' => [
        'prefix' => 'fad:sharp',
        'fallback' => '',
        'class' => '',
        'attributes' => [
            // 'width' => 50,
            // 'height' => 50,
        ],
    ],
    'sharp-thin' => [
        'prefix' => 'fat:sharp',
        'fallback' => '',
        'class' => '',
        'attributes' => [
            // 'width' => 50,
            // 'height' => 50,
        ],
    ],
    /*
    |-----------------------------------------------------------------
    | Pro Icon Kits
    |-----------------------------------------------------------------
    |
    | The following configuration values are for configuring the
    | icon sets available as part of Font Awesome Pro.
    |
    | If you are not using Font Awesome Pro, this can be removed.
    |
    */
    'custom' => [
        'prefix' => 'fak',
        'fallback' => '',
        'class' => '',
        'attributes' => [
            // 'width' => 50,
            // 'height' => 50,
        ],
    ],
];
</file>

<file path="config/blade-icons.php">
<?php
return [
    /*
    |--------------------------------------------------------------------------
    | Icons Sets
    |--------------------------------------------------------------------------
    |
    | With this config option you can define a couple of
    | default icon sets. Provide a key name for your icon
    | set and a combination from the options below.
    |
    */
    'sets' => [
         'default' => [
             /*
             |-----------------------------------------------------------------
             | Icons Path
             |-----------------------------------------------------------------
             |
             | Provide the relative path from your app root to your SVG icons
             | directory. Icons are loaded recursively so there's no need to
             | list every sub-directory.
             |
             | Relative to the disk root when the disk option is set.
             |
             */
             'path' => 'resources/svg',
             /*
             |-----------------------------------------------------------------
             | Filesystem Disk
             |-----------------------------------------------------------------
             |
             | Optionally, provide a specific filesystem disk to read
             | icons from. When defining a disk, the "path" option
             | starts relatively from the disk root.
             |
             */
             'disk' => '',
             /*
             |-----------------------------------------------------------------
             | Default Prefix
             |-----------------------------------------------------------------
             |
             | This config option allows you to define a default prefix for
             | your icons. The dash separator will be applied automatically
             | to every icon name. It's required and needs to be unique.
             |
             */
             'prefix' => 'icon',
             /*
             |-----------------------------------------------------------------
             | Fallback Icon
             |-----------------------------------------------------------------
             |
             | This config option allows you to define a fallback
             | icon when an icon in this set cannot be found.
             |
             */
             'fallback' => '',
             /*
             |-----------------------------------------------------------------
             | Default Set Classes
             |-----------------------------------------------------------------
             |
             | This config option allows you to define some classes which
             | will be applied by default to all icons within this set.
             |
             */
             'class' => '',
             /*
             |-----------------------------------------------------------------
             | Default Set Attributes
             |-----------------------------------------------------------------
             |
             | This config option allows you to define some attributes which
             | will be applied by default to all icons within this set.
             |
             */
             'attributes' => [
                 // 'width' => 50,
                 // 'height' => 50,
             ],
         ],
    ],
    /*
    |--------------------------------------------------------------------------
    | Global Default Classes
    |--------------------------------------------------------------------------
    |
    | This config option allows you to define some classes which
    | will be applied by default to all icons.
    |
    */
    'class' => '',
    /*
    |--------------------------------------------------------------------------
    | Global Default Attributes
    |--------------------------------------------------------------------------
    |
    | This config option allows you to define some attributes which
    | will be applied by default to all icons.
    |
    */
    'attributes' => [
        // 'width' => 50,
        // 'height' => 50,
    ],
    /*
    |--------------------------------------------------------------------------
    | Global Fallback Icon
    |--------------------------------------------------------------------------
    |
    | This config option allows you to define a global fallback
    | icon when an icon in any set cannot be found. It can
    | reference any icon from any configured set.
    |
    */
    'fallback' => '',
    /*
    |--------------------------------------------------------------------------
    | Components
    |--------------------------------------------------------------------------
    |
    | These config options allow you to define some
    | settings related to Blade Components.
    |
    */
    'components' => [
        /*
        |----------------------------------------------------------------------
        | Disable Components
        |----------------------------------------------------------------------
        |
        | This config option allows you to disable Blade components
        | completely. It's useful to avoid performance problems
        | when working with large icon libraries.
        |
        */
        'disabled' => false,
        /*
        |----------------------------------------------------------------------
        | Default Icon Component Name
        |----------------------------------------------------------------------
        |
        | This config option allows you to define the name
        | for the default Icon class component.
        |
        */
        'default' => 'icon',
    ],
];
</file>

<file path="config/cache.php">
<?php
use Illuminate\Support\Str;
return [
    /*
    |--------------------------------------------------------------------------
    | Default Cache Store
    |--------------------------------------------------------------------------
    |
    | This option controls the default cache store that will be used by the
    | framework. This connection is utilized if another isn't explicitly
    | specified when running a cache operation inside the application.
    |
    */
    'default' => env('CACHE_STORE', 'database'),
    /*
    |--------------------------------------------------------------------------
    | Cache Stores
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the cache "stores" for your application as
    | well as their drivers. You may even define multiple stores for the
    | same cache driver to group types of items stored in your caches.
    |
    | Supported drivers: "array", "database", "file", "memcached",
    |                    "redis", "dynamodb", "octane", "null"
    |
    */
    'stores' => [
        'array' => [
            'driver' => 'array',
            'serialize' => false,
        ],
        'database' => [
            'driver' => 'database',
            'connection' => env('DB_CACHE_CONNECTION'),
            'table' => env('DB_CACHE_TABLE', 'cache'),
            'lock_connection' => env('DB_CACHE_LOCK_CONNECTION'),
            'lock_table' => env('DB_CACHE_LOCK_TABLE'),
        ],
        'file' => [
            'driver' => 'file',
            'path' => storage_path('framework/cache/data'),
            'lock_path' => storage_path('framework/cache/data'),
        ],
        'memcached' => [
            'driver' => 'memcached',
            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),
            'sasl' => [
                env('MEMCACHED_USERNAME'),
                env('MEMCACHED_PASSWORD'),
            ],
            'options' => [
                // Memcached::OPT_CONNECT_TIMEOUT => 2000,
            ],
            'servers' => [
                [
                    'host' => env('MEMCACHED_HOST', '127.0.0.1'),
                    'port' => env('MEMCACHED_PORT', 11211),
                    'weight' => 100,
                ],
            ],
        ],
        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_CACHE_CONNECTION', 'cache'),
            'lock_connection' => env('REDIS_CACHE_LOCK_CONNECTION', 'default'),
        ],
        'dynamodb' => [
            'driver' => 'dynamodb',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),
            'endpoint' => env('DYNAMODB_ENDPOINT'),
        ],
        'octane' => [
            'driver' => 'octane',
        ],
    ],
    /*
    |--------------------------------------------------------------------------
    | Cache Key Prefix
    |--------------------------------------------------------------------------
    |
    | When utilizing the APC, database, memcached, Redis, and DynamoDB cache
    | stores, there might be other applications using the same cache. For
    | that reason, you may prefix every cache key to avoid collisions.
    |
    */
    'prefix' => env('CACHE_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_cache_'),
];
</file>

<file path="config/database.php">
<?php
use Illuminate\Support\Str;
return [
    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    |
    | Here you may specify which of the database connections below you wish
    | to use as your default connection for database operations. This is
    | the connection which will be utilized unless another connection
    | is explicitly specified when you execute a query / statement.
    |
    */
    'default' => env('DB_CONNECTION', 'sqlite'),
    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    |
    | Below are all of the database connections defined for your application.
    | An example configuration is provided for each database system which
    | is supported by Laravel. You're free to add / remove connections.
    |
    */
    'connections' => [
        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DB_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
            'busy_timeout' => null,
            'journal_mode' => null,
            'synchronous' => null,
        ],
        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],
        'mariadb' => [
            'driver' => 'mariadb',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],
        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],
        'sqlsrv' => [
            'driver' => 'sqlsrv',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', 'localhost'),
            'port' => env('DB_PORT', '1433'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            // 'encrypt' => env('DB_ENCRYPT', 'yes'),
            // 'trust_server_certificate' => env('DB_TRUST_SERVER_CERTIFICATE', 'false'),
        ],
    ],
    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    |
    | This table keeps track of all the migrations that have already run for
    | your application. Using this information, we can determine which of
    | the migrations on disk haven't actually been run on the database.
    |
    */
    'migrations' => [
        'table' => 'migrations',
        'update_date_on_publish' => true,
    ],
    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |
    | Redis is an open source, fast, and advanced key-value store that also
    | provides a richer body of commands than a typical key-value system
    | such as Memcached. You may define your connection settings here.
    |
    */
    'redis' => [
        'client' => env('REDIS_CLIENT', 'phpredis'),
        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),
        ],
        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
        ],
        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
        ],
    ],
];
</file>

<file path="config/filesystems.php">
<?php
return [
    /*
    |--------------------------------------------------------------------------
    | Default Filesystem Disk
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default filesystem disk that should be used
    | by the framework. The "local" disk, as well as a variety of cloud
    | based disks are available to your application for file storage.
    |
    */
    'default' => env('FILESYSTEM_DISK', 'local'),
    /*
    |--------------------------------------------------------------------------
    | Filesystem Disks
    |--------------------------------------------------------------------------
    |
    | Below you may configure as many filesystem disks as necessary, and you
    | may even configure multiple disks for the same driver. Examples for
    | most supported storage drivers are configured here for reference.
    |
    | Supported drivers: "local", "ftp", "sftp", "s3"
    |
    */
    'disks' => [
        'local' => [
            'driver' => 'local',
            'root' => storage_path('app/private'),
            'serve' => true,
            'throw' => false,
        ],
        'public' => [
            'driver' => 'local',
            'root' => storage_path('app/public'),
            'url' => env('APP_URL').'/storage',
            'visibility' => 'public',
            'throw' => false,
        ],
        's3' => [
            'driver' => 's3',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION'),
            'bucket' => env('AWS_BUCKET'),
            'url' => env('AWS_URL'),
            'endpoint' => env('AWS_ENDPOINT'),
            'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false),
            'throw' => false,
        ],
    ],
    /*
    |--------------------------------------------------------------------------
    | Symbolic Links
    |--------------------------------------------------------------------------
    |
    | Here you may configure the symbolic links that will be created when the
    | `storage:link` Artisan command is executed. The array keys should be
    | the locations of the links and the values should be their targets.
    |
    */
    'links' => [
        public_path('storage') => storage_path('app/public'),
    ],
];
</file>

<file path="config/livewire.php">
<?php
return [
    /*
    |---------------------------------------------------------------------------
    | Class Namespace
    |---------------------------------------------------------------------------
    |
    | This value sets the root class namespace for Livewire component classes in
    | your application. This value will change where component auto-discovery
    | finds components. It's also referenced by the file creation commands.
    |
    */
    'class_namespace' => 'App\\Livewire',
    /*
    |---------------------------------------------------------------------------
    | View Path
    |---------------------------------------------------------------------------
    |
    | This value is used to specify where Livewire component Blade templates are
    | stored when running file creation commands like `artisan make:livewire`.
    | It is also used if you choose to omit a component's render() method.
    |
    */
    'view_path' => resource_path('views/livewire'),
    /*
    |---------------------------------------------------------------------------
    | Layout
    |---------------------------------------------------------------------------
    | The view that will be used as the layout when rendering a single component
    | as an entire page via `Route::get('/post/create', CreatePost::class);`.
    | In this case, the view returned by CreatePost will render into $slot.
    |
    */
    'layout' => 'layouts.app',
    /*
    |---------------------------------------------------------------------------
    | Lazy Loading Placeholder
    |---------------------------------------------------------------------------
    | Livewire allows you to lazy load components that would otherwise slow down
    | the initial page load. Every component can have a custom placeholder or
    | you can define the default placeholder view for all components below.
    |
    */
    'lazy_placeholder' => null,
    /*
    |---------------------------------------------------------------------------
    | Temporary File Uploads
    |---------------------------------------------------------------------------
    |
    | Livewire handles file uploads by storing uploads in a temporary directory
    | before the file is stored permanently. All file uploads are directed to
    | a global endpoint for temporary storage. You may configure this below:
    |
    */
    'temporary_file_upload' => [
        'disk' => null,        // Example: 'local', 's3'              | Default: 'default'
        'rules' => null,       // Example: ['file', 'mimes:png,jpg']  | Default: ['required', 'file', 'max:12288'] (12MB)
        'directory' => null,   // Example: 'tmp'                      | Default: 'livewire-tmp'
        'middleware' => null,  // Example: 'throttle:5,1'             | Default: 'throttle:60,1'
        'preview_mimes' => [   // Supported file types for temporary pre-signed file URLs...
            'png', 'gif', 'bmp', 'svg', 'wav', 'mp4',
            'mov', 'avi', 'wmv', 'mp3', 'm4a',
            'jpg', 'jpeg', 'mpga', 'webp', 'wma',
        ],
        'max_upload_time' => 5, // Max duration (in minutes) before an upload is invalidated...
        'cleanup' => true, // Should cleanup temporary uploads older than 24 hrs...
    ],
    /*
    |---------------------------------------------------------------------------
    | Render On Redirect
    |---------------------------------------------------------------------------
    |
    | This value determines if Livewire will run a component's `render()` method
    | after a redirect has been triggered using something like `redirect(...)`
    | Setting this to true will render the view once more before redirecting
    |
    */
    'render_on_redirect' => false,
    /*
    |---------------------------------------------------------------------------
    | Eloquent Model Binding
    |---------------------------------------------------------------------------
    |
    | Previous versions of Livewire supported binding directly to eloquent model
    | properties using wire:model by default. However, this behavior has been
    | deemed too "magical" and has therefore been put under a feature flag.
    |
    */
    'legacy_model_binding' => false,
    /*
    |---------------------------------------------------------------------------
    | Auto-inject Frontend Assets
    |---------------------------------------------------------------------------
    |
    | By default, Livewire automatically injects its JavaScript and CSS into the
    | <head> and <body> of pages containing Livewire components. By disabling
    | this behavior, you need to use @livewireStyles and @livewireScripts.
    |
    */
    'inject_assets' => true,
    /*
    |---------------------------------------------------------------------------
    | Navigate (SPA mode)
    |---------------------------------------------------------------------------
    |
    | By adding `wire:navigate` to links in your Livewire application, Livewire
    | will prevent the default link handling and instead request those pages
    | via AJAX, creating an SPA-like effect. Configure this behavior here.
    |
    */
    'navigate' => [
        'show_progress_bar' => true,
        'progress_bar_color' => '#2299dd',
    ],
    /*
    |---------------------------------------------------------------------------
    | HTML Morph Markers
    |---------------------------------------------------------------------------
    |
    | Livewire intelligently "morphs" existing HTML into the newly rendered HTML
    | after each update. To make this process more reliable, Livewire injects
    | "markers" into the rendered Blade surrounding @if, @class & @foreach.
    |
    */
    'inject_morph_markers' => true,
    /*
    |---------------------------------------------------------------------------
    | Pagination Theme
    |---------------------------------------------------------------------------
    |
    | When enabling Livewire's pagination feature by using the `WithPagination`
    | trait, Livewire will use Tailwind templates to render pagination views
    | on the page. If you want Bootstrap CSS, you can specify: "bootstrap"
    |
    */
    'pagination_theme' => 'tailwind',
];
</file>

<file path="config/logging.php">
<?php
use Monolog\Handler\NullHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\SyslogUdpHandler;
use Monolog\Processor\PsrLogMessageProcessor;
return [
    /*
    |--------------------------------------------------------------------------
    | Default Log Channel
    |--------------------------------------------------------------------------
    |
    | This option defines the default log channel that is utilized to write
    | messages to your logs. The value provided here should match one of
    | the channels present in the list of "channels" configured below.
    |
    */
    'default' => env('LOG_CHANNEL', 'stack'),
    /*
    |--------------------------------------------------------------------------
    | Deprecations Log Channel
    |--------------------------------------------------------------------------
    |
    | This option controls the log channel that should be used to log warnings
    | regarding deprecated PHP and library features. This allows you to get
    | your application ready for upcoming major versions of dependencies.
    |
    */
    'deprecations' => [
        'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),
        'trace' => env('LOG_DEPRECATIONS_TRACE', false),
    ],
    /*
    |--------------------------------------------------------------------------
    | Log Channels
    |--------------------------------------------------------------------------
    |
    | Here you may configure the log channels for your application. Laravel
    | utilizes the Monolog PHP logging library, which includes a variety
    | of powerful log handlers and formatters that you're free to use.
    |
    | Available drivers: "single", "daily", "slack", "syslog",
    |                    "errorlog", "monolog", "custom", "stack"
    |
    */
    'channels' => [
        'stack' => [
            'driver' => 'stack',
            'channels' => explode(',', env('LOG_STACK', 'single')),
            'ignore_exceptions' => false,
        ],
        'single' => [
            'driver' => 'single',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],
        'daily' => [
            'driver' => 'daily',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'days' => env('LOG_DAILY_DAYS', 14),
            'replace_placeholders' => true,
        ],
        'slack' => [
            'driver' => 'slack',
            'url' => env('LOG_SLACK_WEBHOOK_URL'),
            'username' => env('LOG_SLACK_USERNAME', 'Laravel Log'),
            'emoji' => env('LOG_SLACK_EMOJI', ':boom:'),
            'level' => env('LOG_LEVEL', 'critical'),
            'replace_placeholders' => true,
        ],
        'papertrail' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => env('LOG_PAPERTRAIL_HANDLER', SyslogUdpHandler::class),
            'handler_with' => [
                'host' => env('PAPERTRAIL_URL'),
                'port' => env('PAPERTRAIL_PORT'),
                'connectionString' => 'tls://'.env('PAPERTRAIL_URL').':'.env('PAPERTRAIL_PORT'),
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],
        'stderr' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => StreamHandler::class,
            'formatter' => env('LOG_STDERR_FORMATTER'),
            'with' => [
                'stream' => 'php://stderr',
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],
        'syslog' => [
            'driver' => 'syslog',
            'level' => env('LOG_LEVEL', 'debug'),
            'facility' => env('LOG_SYSLOG_FACILITY', LOG_USER),
            'replace_placeholders' => true,
        ],
        'errorlog' => [
            'driver' => 'errorlog',
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],
        'null' => [
            'driver' => 'monolog',
            'handler' => NullHandler::class,
        ],
        'emergency' => [
            'path' => storage_path('logs/laravel.log'),
        ],
    ],
];
</file>

<file path="config/mail.php">
<?php
return [
    /*
    |--------------------------------------------------------------------------
    | Default Mailer
    |--------------------------------------------------------------------------
    |
    | This option controls the default mailer that is used to send all email
    | messages unless another mailer is explicitly specified when sending
    | the message. All additional mailers can be configured within the
    | "mailers" array. Examples of each type of mailer are provided.
    |
    */
    'default' => env('MAIL_MAILER', 'smtp'),
    /*
    |--------------------------------------------------------------------------
    | Mailer Configurations
    |--------------------------------------------------------------------------
    |
    | Here you may configure all of the mailers used by your application plus
    | their respective settings. Several examples have been configured for
    | you and you are free to add your own as your application requires.
    |
    | Laravel supports a variety of mail "transport" drivers that can be used
    | when delivering an email. You may specify which one you're using for
    | your mailers below. You may also add additional mailers if needed.
    |
    | Supported: "smtp", "sendmail", "mailgun", "ses", "ses-v2",
    |            "postmark", "resend", "log", "array",
    |            "failover", "roundrobin"
    |
    */
    'mailers' => [
        'smtp' => [
            'transport' => 'smtp',
            'scheme' => env('MAIL_SCHEME'),
            'url' => env('MAIL_URL'),
            'host' => env('MAIL_HOST', '127.0.0.1'),
            'port' => env('MAIL_PORT', 2525),
            'username' => env('MAIL_USERNAME'),
            'password' => env('MAIL_PASSWORD'),
            'timeout' => null,
            'local_domain' => env('MAIL_EHLO_DOMAIN', parse_url(env('APP_URL', 'http://localhost'), PHP_URL_HOST)),
        ],
        'ses' => [
            'transport' => 'ses',
        ],
        'postmark' => [
            'transport' => 'postmark',
            // 'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),
            // 'client' => [
            //     'timeout' => 5,
            // ],
        ],
        'resend' => [
            'transport' => 'resend',
        ],
        'sendmail' => [
            'transport' => 'sendmail',
            'path' => env('MAIL_SENDMAIL_PATH', '/usr/sbin/sendmail -bs -i'),
        ],
        'log' => [
            'transport' => 'log',
            'channel' => env('MAIL_LOG_CHANNEL'),
        ],
        'array' => [
            'transport' => 'array',
        ],
        'failover' => [
            'transport' => 'failover',
            'mailers' => [
                'smtp',
                'log',
            ],
        ],
        'roundrobin' => [
            'transport' => 'roundrobin',
            'mailers' => [
                'ses',
                'postmark',
            ],
        ],
    ],
    /*
    |--------------------------------------------------------------------------
    | Global "From" Address
    |--------------------------------------------------------------------------
    |
    | You may wish for all emails sent by your application to be sent from
    | the same address. Here you may specify a name and address that is
    | used globally for all emails that are sent by your application.
    |
    */
    'from' => [
        'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),
        'name' => env('MAIL_FROM_NAME', 'Example'),
    ],
];
</file>

<file path="config/queue.php">
<?php
return [
    /*
    |--------------------------------------------------------------------------
    | Default Queue Connection Name
    |--------------------------------------------------------------------------
    |
    | Laravel's queue supports a variety of backends via a single, unified
    | API, giving you convenient access to each backend using identical
    | syntax for each. The default queue connection is defined below.
    |
    */
    'default' => env('QUEUE_CONNECTION', 'database'),
    /*
    |--------------------------------------------------------------------------
    | Queue Connections
    |--------------------------------------------------------------------------
    |
    | Here you may configure the connection options for every queue backend
    | used by your application. An example configuration is provided for
    | each backend supported by Laravel. You're also free to add more.
    |
    | Drivers: "sync", "database", "beanstalkd", "sqs", "redis", "null"
    |
    */
    'connections' => [
        'sync' => [
            'driver' => 'sync',
        ],
        'database' => [
            'driver' => 'database',
            'connection' => env('DB_QUEUE_CONNECTION'),
            'table' => env('DB_QUEUE_TABLE', 'jobs'),
            'queue' => env('DB_QUEUE', 'default'),
            'retry_after' => (int) env('DB_QUEUE_RETRY_AFTER', 90),
            'after_commit' => false,
        ],
        'beanstalkd' => [
            'driver' => 'beanstalkd',
            'host' => env('BEANSTALKD_QUEUE_HOST', 'localhost'),
            'queue' => env('BEANSTALKD_QUEUE', 'default'),
            'retry_after' => (int) env('BEANSTALKD_QUEUE_RETRY_AFTER', 90),
            'block_for' => 0,
            'after_commit' => false,
        ],
        'sqs' => [
            'driver' => 'sqs',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),
            'queue' => env('SQS_QUEUE', 'default'),
            'suffix' => env('SQS_SUFFIX'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'after_commit' => false,
        ],
        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_QUEUE_CONNECTION', 'default'),
            'queue' => env('REDIS_QUEUE', 'default'),
            'retry_after' => (int) env('REDIS_QUEUE_RETRY_AFTER', 90),
            'block_for' => null,
            'after_commit' => false,
        ],
    ],
    /*
    |--------------------------------------------------------------------------
    | Job Batching
    |--------------------------------------------------------------------------
    |
    | The following options configure the database and table that store job
    | batching information. These options can be updated to any database
    | connection and table which has been defined by your application.
    |
    */
    'batching' => [
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'job_batches',
    ],
    /*
    |--------------------------------------------------------------------------
    | Failed Queue Jobs
    |--------------------------------------------------------------------------
    |
    | These options configure the behavior of failed queue job logging so you
    | can control how and where failed jobs are stored. Laravel ships with
    | support for storing failed jobs in a simple file or in a database.
    |
    | Supported drivers: "database-uuids", "dynamodb", "file", "null"
    |
    */
    'failed' => [
        'driver' => env('QUEUE_FAILED_DRIVER', 'database-uuids'),
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'failed_jobs',
    ],
];
</file>

<file path="config/services.php">
<?php
return [
    /*
    |--------------------------------------------------------------------------
    | Third Party Services
    |--------------------------------------------------------------------------
    |
    | This file is for storing the credentials for third party services such
    | as Mailgun, Postmark, AWS and more. This file provides the de facto
    | location for this type of information, allowing packages to have
    | a conventional file to locate the various service credentials.
    |
    */
    'postmark' => [
        'token' => env('POSTMARK_TOKEN'),
    ],
    'ses' => [
        'key' => env('AWS_ACCESS_KEY_ID'),
        'secret' => env('AWS_SECRET_ACCESS_KEY'),
        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
    ],
    'resend' => [
        'key' => env('RESEND_KEY'),
    ],
    'slack' => [
        'notifications' => [
            'bot_user_oauth_token' => env('SLACK_BOT_USER_OAUTH_TOKEN'),
            'channel' => env('SLACK_BOT_USER_DEFAULT_CHANNEL'),
        ],
    ],
];
</file>

<file path="config/session.php">
<?php
use Illuminate\Support\Str;
return [
    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | This option determines the default session driver that is utilized for
    | incoming requests. Laravel supports a variety of storage options to
    | persist session data. Database storage is a great default choice.
    |
    | Supported: "file", "cookie", "database", "apc",
    |            "memcached", "redis", "dynamodb", "array"
    |
    */
    'driver' => env('SESSION_DRIVER', 'database'),
    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
    | Here you may specify the number of minutes that you wish the session
    | to be allowed to remain idle before it expires. If you want them
    | to expire immediately when the browser is closed then you may
    | indicate that via the expire_on_close configuration option.
    |
    */
    'lifetime' => env('SESSION_LIFETIME', 120),
    'expire_on_close' => env('SESSION_EXPIRE_ON_CLOSE', false),
    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | This option allows you to easily specify that all of your session data
    | should be encrypted before it's stored. All encryption is performed
    | automatically by Laravel and you may use the session like normal.
    |
    */
    'encrypt' => env('SESSION_ENCRYPT', false),
    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | When utilizing the "file" session driver, the session files are placed
    | on disk. The default storage location is defined here; however, you
    | are free to provide another location where they should be stored.
    |
    */
    'files' => storage_path('framework/sessions'),
    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | When using the "database" or "redis" session drivers, you may specify a
    | connection that should be used to manage these sessions. This should
    | correspond to a connection in your database configuration options.
    |
    */
    'connection' => env('SESSION_CONNECTION'),
    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | When using the "database" session driver, you may specify the table to
    | be used to store sessions. Of course, a sensible default is defined
    | for you; however, you're welcome to change this to another table.
    |
    */
    'table' => env('SESSION_TABLE', 'sessions'),
    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | When using one of the framework's cache driven session backends, you may
    | define the cache store which should be used to store the session data
    | between requests. This must match one of your defined cache stores.
    |
    | Affects: "apc", "dynamodb", "memcached", "redis"
    |
    */
    'store' => env('SESSION_STORE'),
    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | Some session drivers must manually sweep their storage location to get
    | rid of old sessions from storage. Here are the chances that it will
    | happen on a given request. By default, the odds are 2 out of 100.
    |
    */
    'lottery' => [2, 100],
    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | Here you may change the name of the session cookie that is created by
    | the framework. Typically, you should not need to change this value
    | since doing so does not grant a meaningful security improvement.
    |
    */
    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
    ),
    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | The session cookie path determines the path for which the cookie will
    | be regarded as available. Typically, this will be the root path of
    | your application, but you're free to change this when necessary.
    |
    */
    'path' => env('SESSION_PATH', '/'),
    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | This value determines the domain and subdomains the session cookie is
    | available to. By default, the cookie will be available to the root
    | domain and all subdomains. Typically, this shouldn't be changed.
    |
    */
    'domain' => env('SESSION_DOMAIN'),
    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | By setting this option to true, session cookies will only be sent back
    | to the server if the browser has a HTTPS connection. This will keep
    | the cookie from being sent to you when it can't be done securely.
    |
    */
    'secure' => env('SESSION_SECURE_COOKIE'),
    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will prevent JavaScript from accessing the
    | value of the cookie and the cookie will only be accessible through
    | the HTTP protocol. It's unlikely you should disable this option.
    |
    */
    'http_only' => env('SESSION_HTTP_ONLY', true),
    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | This option determines how your cookies behave when cross-site requests
    | take place, and can be used to mitigate CSRF attacks. By default, we
    | will set this value to "lax" to permit secure cross-site requests.
    |
    | See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value
    |
    | Supported: "lax", "strict", "none", null
    |
    */
    'same_site' => env('SESSION_SAME_SITE', 'lax'),
    /*
    |--------------------------------------------------------------------------
    | Partitioned Cookies
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will tie the cookie to the top-level site for
    | a cross-site context. Partitioned cookies are accepted by the browser
    | when flagged "secure" and the Same-Site attribute is set to "none".
    |
    */
    'partitioned' => env('SESSION_PARTITIONED_COOKIE', false),
];
</file>

<file path="database/factories/UserFactory.php">
<?php
namespace Database\Factories;
use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;
/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }
    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}
</file>

<file path="database/migrations/0001_01_01_000000_create_registerkeys_table.php">
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use App\Models\User;
return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('registerkeys', function (Blueprint $table) {
            $table->id();
            $table->char('code', 9)->unique();
            $table->timestamps();
        });
    }
    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('registerkeys');
    }
};
</file>

<file path="database/migrations/0001_01_01_000001_create_users_table.php">
<?php
use App\Models\Registerkey;
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->string('email')->unique()->nullable();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->foreignId('registerkey_id')->nullable()->constrained();
            $table->boolean('is_admin')->default(false);
            $table->rememberToken();
            $table->timestamps();
        });
        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });
        Schema::create('sessions', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->foreignId('user_id')->nullable()->index();
            $table->string('ip_address', 45)->nullable();
            $table->text('user_agent')->nullable();
            $table->longText('payload');
            $table->integer('last_activity')->index();
        });
    }
    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users');
        Schema::dropIfExists('password_reset_tokens');
        Schema::dropIfExists('sessions');
    }
};
</file>

<file path="database/migrations/0001_01_01_000002_create_cache_table.php">
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('cache', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->mediumText('value');
            $table->integer('expiration');
        });
        Schema::create('cache_locks', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->string('owner');
            $table->integer('expiration');
        });
    }
    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('cache');
        Schema::dropIfExists('cache_locks');
    }
};
</file>

<file path="database/migrations/0001_01_01_000003_create_jobs_table.php">
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('jobs', function (Blueprint $table) {
            $table->id();
            $table->string('queue')->index();
            $table->longText('payload');
            $table->unsignedTinyInteger('attempts');
            $table->unsignedInteger('reserved_at')->nullable();
            $table->unsignedInteger('available_at');
            $table->unsignedInteger('created_at');
        });
        Schema::create('job_batches', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->string('name');
            $table->integer('total_jobs');
            $table->integer('pending_jobs');
            $table->integer('failed_jobs');
            $table->longText('failed_job_ids');
            $table->mediumText('options')->nullable();
            $table->integer('cancelled_at')->nullable();
            $table->integer('created_at');
            $table->integer('finished_at')->nullable();
        });
        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }
    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('jobs');
        Schema::dropIfExists('job_batches');
        Schema::dropIfExists('failed_jobs');
    }
};
</file>

<file path="database/migrations/2025_01_21_104916_create_results_table.php">
<?php
use Illuminate\Database\Migrations\Migration;
use App\Models\Question;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('results', function (Blueprint $table) {
            $table->id();
            $table->foreignIdFor(Question::class);
            $table->string('rating_value');
            $table->timestamps();
        });
    }
    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('results');
    }
};
</file>

<file path="database/migrations/2025_01_21_104933_create_questions_table.php">
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use App\Models\{Feedback_template, Question_template, Feedback};
return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('questions', function (Blueprint $table) {
            $table->id();
            $table->foreignIdFor(Feedback_template::class);
            $table->foreignIdFor(Question_template::class);
            $table->foreignIdFor(Feedback::class)->nullable();
            $table->string('question');
            $table->timestamps();
        });
    }
    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('questions');
    }
};
</file>

<file path="database/migrations/2025_01_21_104948_create_feedback_table.php">
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use App\Models\{User, Feedback_template};
return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('feedback', function (Blueprint $table) {
            $table->id();
            $table->foreignIdFor(User::class);
            $table->foreignIdFor(Feedback_template::class);
            $table->string('accesskey', 8);
            $table->integer('limit');
            $table->integer('already_answered');
            $table->date('expire_date');
            $table->string('school_year')->nullable();
            $table->string('department')->nullable();
            $table->string('grade_level')->nullable();
            $table->string('class')->nullable();
            $table->string('subject')->nullable();
            $table->timestamps();
        });
    }
    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('feedback');
    }
};
</file>

<file path="database/migrations/2025_01_21_105218_create_feedback_templates_table.php">
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('feedback_templates', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('title')->nullable();
            $table->timestamps();
        });
    }
    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('feedback_templates');
    }
};
</file>

<file path="database/migrations/2025_01_21_105231_create_question_templates_table.php">
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('question_templates', function (Blueprint $table) {
            $table->id();
            $table->string('type');
            $table->integer('max_value')->nullable();
            $table->integer('min_value')->nullable();
            $table->timestamps();
        });
    }
    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('question_templates');
    }
};
</file>

<file path="database/migrations/2025_02_25_104300_create_school_years_table.php">
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('school_years', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->boolean('is_active')->default(true);
            $table->timestamps();
        });
    }
    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('school_years');
    }
};
</file>

<file path="database/migrations/2025_02_25_104301_create_departments_table.php">
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('departments', function (Blueprint $table) {
            $table->id();
            $table->string('code');
            $table->string('name');
            $table->boolean('is_active')->default(true);
            $table->timestamps();
        });
    }
    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('departments');
    }
};
</file>

<file path="database/migrations/2025_02_25_104302_create_grade_levels_table.php">
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('grade_levels', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->integer('level');
            $table->boolean('is_active')->default(true);
            $table->timestamps();
        });
    }
    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('grade_levels');
    }
};
</file>

<file path="database/migrations/2025_02_25_104303_create_school_classes_table.php">
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('school_classes', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->foreignId('grade_level_id')->constrained();
            $table->boolean('is_active')->default(true);
            $table->timestamps();
        });
    }
    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('school_classes');
    }
};
</file>

<file path="database/migrations/2025_02_25_104304_create_subjects_table.php">
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('subjects', function (Blueprint $table) {
            $table->id();
            $table->string('code');
            $table->string('name');
            $table->foreignId('department_id')->nullable()->constrained();
            $table->boolean('is_active')->default(true);
            $table->timestamps();
        });
    }
    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('subjects');
    }
};
</file>

<file path="database/migrations/2025_03_12_091007_drop_response_values_table.php">
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        // Check if the table exists first
        if (Schema::hasTable('response_values')) {
            // Drop the foreign key constraint first if it exists
            Schema::table('response_values', function (Blueprint $table) {
                if (Schema::hasColumn('response_values', 'result_id')) {
                    $table->dropForeign(['result_id']);
                }
            });
            Schema::dropIfExists('response_values');
        }
    }
    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::create('response_values', function (Blueprint $table) {
            $table->id();
            $table->foreignId('result_id')->constrained()->cascadeOnDelete();
            $table->string('question_template_type')->nullable()->index();
            $table->integer('range_value')->nullable();
            $table->text('text_value')->nullable();
            $table->json('json_value')->nullable();
            $table->timestamps();
            $table->index(['question_template_type', 'range_value'], 'response_values_range_index');
        });
    }
};
</file>

<file path="database/migrations/2025_03_12_102518_add_submission_id_to_results_table.php">
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('results', function (Blueprint $table) {
            // Add submission_id as UUID to group results from a single submission (nullable initially)
            $table->uuid('submission_id')->nullable()->after('question_id');
            // Add index for performance optimization on common queries
            $table->index('submission_id');
            // Add value_type column to explicitly indicate the data type of rating_value
            $table->string('value_type')->default('text')->after('submission_id');
        });
    }
    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('results', function (Blueprint $table) {
            // Remove the columns and index
            $table->dropIndex(['submission_id']);
            $table->dropColumn('submission_id');
            $table->dropColumn('value_type');
        });
    }
};
</file>

<file path="database/migrations/2025_03_12_102527_add_status_to_feedback_table.php">
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('feedback', function (Blueprint $table) {
            // Add status field to track the lifecycle of the feedback/survey
            $table->string('status')->default('running')->after('expire_date');
            // Make already_answered nullable (since we'll calculate it dynamically from submission_ids)
            $table->integer('already_answered')->nullable()->change();
        });
    }
    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('feedback', function (Blueprint $table) {
            // Remove status field
            $table->dropColumn('status');
            // Make already_answered required again
            $table->integer('already_answered')->nullable(false)->change();
        });
    }
};
</file>

<file path="database/migrations/2025_03_12_102534_add_order_to_questions_table.php">
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('questions', function (Blueprint $table) {
            // Add order field to explicitly manage question sequence within a survey
            $table->integer('order')->nullable()->after('question');
            // Add index for efficient ordering queries
            $table->index(['feedback_id', 'order']);
        });
    }
    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('questions', function (Blueprint $table) {
            // Remove order field and index
            $table->dropIndex(['feedback_id', 'order']);
            $table->dropColumn('order');
        });
    }
};
</file>

<file path="database/migrations/2025_03_12_102635_populate_default_values_for_results_updates.php">
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;
return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        // Get all existing questions to process their results
        $questions = DB::table('questions')->get();
        // Group questions by feedback_id
        $questionsByFeedback = [];
        foreach ($questions as $question) {
            if (!isset($questionsByFeedback[$question->feedback_id])) {
                $questionsByFeedback[$question->feedback_id] = [];
            }
            $questionsByFeedback[$question->feedback_id][] = $question->id;
        }
        // For each feedback, process all question results as a single submission
        foreach ($questionsByFeedback as $feedbackId => $questionIds) {
            // For existing results, check if any results exist for these questions
            $resultsExist = DB::table('results')
                ->whereIn('question_id', $questionIds)
                ->exists();
            if ($resultsExist) {
                // Generate a single submission ID for all results from this feedback
                $submissionId = Str::uuid()->toString();
                // Update all results for these questions with the submission ID
                DB::table('results')
                    ->whereIn('question_id', $questionIds)
                    ->update([
                        'submission_id' => $submissionId,
                        'value_type' => 'text' // Default type
                    ]);
                // Update existing records based on question template types
                // Get question template types
                $questions = DB::table('questions')
                    ->join('question_templates', 'questions.question_template_id', '=', 'question_templates.id')
                    ->whereIn('questions.id', $questionIds)
                    ->select('questions.id', 'question_templates.type')
                    ->get();
                foreach ($questions as $question) {
                    if ($question->type === 'range') {
                        DB::table('results')
                            ->where('question_id', $question->id)
                            ->update(['value_type' => 'number']);
                    } else if (in_array($question->type, ['checkboxes', 'checkbox'])) {
                        DB::table('results')
                            ->where('question_id', $question->id)
                            ->update(['value_type' => 'checkbox']);
                    }
                }
            }
        }
    }
    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        // No need to reverse this migration as it only populates default values
        // The columns will be dropped by the other migrations if needed
    }
};
</file>

<file path="database/migrations/2025_03_12_103110_make_submission_id_required_in_results_table.php">
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('results', function (Blueprint $table) {
            // Make submission_id required after it has been populated
            $table->uuid('submission_id')->nullable(false)->change();
        });
    }
    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('results', function (Blueprint $table) {
            // Make submission_id nullable again
            $table->uuid('submission_id')->nullable()->change();
        });
    }
};
</file>

<file path="database/migrations/2025_03_12_105717_add_indexes_for_performance_improvement.php">
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;
return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        // Add indexes to 'results' table
        $this->addIndexesIfNotExist('results', [
            'question_id', 'submission_id', 'value_type',
            ['question_id', 'submission_id']
        ]);
        // Add indexes to 'questions' table
        $this->addIndexesIfNotExist('questions', [
            'feedback_id', 'feedback_template_id', 'order',
            ['feedback_id', 'order']
        ]);
        // Add indexes to 'feedback' table
        $this->addIndexesIfNotExist('feedback', [
            'user_id', 'feedback_template_id', 'expire_date', 'status'
        ]);
        // Add unique indexes if not exist
        $this->addUniqueIndexIfNotExist('feedback', 'accesskey');
        $this->addUniqueIndexIfNotExist('feedback_templates', 'name');
        $this->addUniqueIndexIfNotExist('question_templates', 'type');
    }
    /**
     * Reverse the migrations.
     *
     * Note: This won't remove indexes that existed before this migration.
     * Only removes indexes added by this migration.
     */
    public function down(): void
    {
        // We'll only attempt to drop indexes that we created
        // This avoids errors when trying to drop non-existent indexes
    }
    /**
     * Add indexes to a table if they don't already exist
     */
    private function addIndexesIfNotExist(string $tableName, array $columns): void
    {
        Schema::table($tableName, function (Blueprint $table) use ($tableName, $columns) {
            foreach ($columns as $column) {
                if (is_array($column)) {
                    // Composite index
                    $indexName = $this->getIndexName($tableName, $column);
                    if (!$this->hasIndex($tableName, $indexName)) {
                        $table->index($column);
                    }
                } else {
                    // Single column index
                    $indexName = $this->getIndexName($tableName, [$column]);
                    if (!$this->hasIndex($tableName, $indexName)) {
                        $table->index($column);
                    }
                }
            }
        });
    }
    /**
     * Add a unique index to a table if it doesn't already exist
     */
    private function addUniqueIndexIfNotExist(string $tableName, string $column): void
    {
        Schema::table($tableName, function (Blueprint $table) use ($tableName, $column) {
            $indexName = $tableName . '_' . $column . '_unique';
            if (!$this->hasIndex($tableName, $indexName)) {
                $table->unique($column);
            }
        });
    }
    /**
     * Check if an index exists for a table
     */
    private function hasIndex(string $tableName, string $indexName): bool
    {
        // For PostgreSQL
        if (DB::connection()->getDriverName() === 'pgsql') {
            return DB::select("SELECT to_regclass('public.{$indexName}') as index_exists")[0]->index_exists !== null;
        }
        // For MySQL and others
        return Schema::hasTable($tableName) &&
               count(DB::select("SHOW INDEXES FROM {$tableName} WHERE Key_name = '{$indexName}'")) > 0;
    }
    /**
     * Generate standard index name based on Laravel's conventions
     */
    private function getIndexName(string $tableName, array $columns): string
    {
        return $tableName . '_' . implode('_', $columns) . '_index';
    }
};
</file>

<file path="database/seeders/DatabaseSeeder.php">
<?php
namespace Database\Seeders;
use App\Models\User;
// use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        $this->call([
            FeedbackTemplateSeeder::class,
            QuestionTemplateSeeder::class,
            RegisterKeySeeder::class,
            UserSeeder::class,
            DepartmentSeeder::class,
            GradeLevelsSeeder::class,
            SchoolClassSeeder::class,
            SchoolYearSeeder::class,
            SubjectSeeder::class,
            QuestionSeeder::class,
        ]);
    }
}
</file>

<file path="database/seeders/DepartmentSeeder.php">
<?php
namespace Database\Seeders;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use App\Models\Department;
use Illuminate\Database\Seeder;
class DepartmentSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $departments = [
            ['code' => 'M', 'name' => 'Metall'],
            ['code' => 'I', 'name' => 'Informatik'],
            ['code' => 'K', 'name' => 'Kaufleute'],
            ['code' => 'TAI', 'name' => 'Technischer Assistent'],
            ['code' => 'BVJ', 'name' => 'Berufsvorbereitung']
        ];
        foreach ($departments as $dept) {
            Department::updateOrCreate($dept);
        }
    }
}
</file>

<file path="database/seeders/FeedbackTemplateSeeder.php">
<?php
namespace Database\Seeders;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Feedback_template;
class FeedbackTemplateSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        Feedback_template::updateOrCreate(
            ['name' => 'templates.feedback.target'],
            ['title' => 'Target Survey']
        );
        Feedback_template::updateOrCreate(
            ['name' => 'templates.feedback.smiley'],
            ['title' => 'Smiley Survey']
        );
        Feedback_template::updateOrCreate(
            ['name' => 'templates.feedback.checkbox'],
            ['title' => 'Checkbox Survey']
        );
        Feedback_template::updateOrCreate(
            ['name' => 'templates.feedback.table'],
            ['title' => 'Table Survey']
        );
    }
}
</file>

<file path="database/seeders/GradeLevelsSeeder.php">
<?php
namespace Database\Seeders;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use App\Models\GradeLevel;
use Illuminate\Database\Seeder;
class GradeLevelsSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $gradeLevels = [
            ['name' => '10. Jahrgang', 'level' => 1],
            ['name' => '11. Jahrgang', 'level' => 2],
            ['name' => '12. Jahrgang', 'level' => 3],
            ['name' => '13. Jahrgang', 'level' => 4]
        ];
        foreach ($gradeLevels as $grade) {
            GradeLevel::UpdateOrcreate($grade);
        }
    }
}
</file>

<file path="database/seeders/QuestionSeeder.php">
<?php
namespace Database\Seeders;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Question;
use App\Models\Feedback_template;
use App\Models\Question_template;
class QuestionSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // Find the feedback templates
        $targetTemplate = Feedback_template::where('name', 'templates.feedback.target')->first();
        $smileyTemplate = Feedback_template::where('name', 'templates.feedback.smiley')->first();
        $checkboxTemplate = Feedback_template::where('name', 'templates.feedback.checkbox')->first();
        $tableTemplate = Feedback_template::where('name', 'templates.feedback.table')->first();
        // Find question templates
        $rangeTemplate = Question_template::where('type', 'range')->first();
        $textTemplate = Question_template::where('type', 'textarea')->first()
            ?? Question_template::firstOrCreate(['type' => 'text']);
        $checkboxTemplate = Question_template::where('type', 'checkboxes')->first();
        // Clear existing questions that aren't linked to a feedback (survey)
        Question::whereNull('feedback_id')->delete();
        // Seed target template questions
        if ($targetTemplate && $rangeTemplate) {
            $targetStatements = [
                'Ich lerne im Unterricht viel.',
                'Die Lehrkraft hat ein großes Hintergrundwissen.',
                'Die Lehrkraft ist immer gut vorbereitet.',
                'Die Lehrkraft zeigt Interesse an ihren Schülern.',
                'Die Lehrkraft sorgt für ein gutes Lernklima in der Klasse.',
                'Die Notengebung ist fair und nachvollziehbar.',
                'Ich konnte dem Unterricht immer gut folgen.',
                'Der Unterricht wird vielfältig gestaltet.'
            ];
            foreach ($targetStatements as $index => $statement) {
                Question::create([
                    'feedback_template_id' => $targetTemplate->id,
                    'question_template_id' => $rangeTemplate->id,
                    'feedback_id' => null, // Template questions not linked to a specific feedback
                    'question' => $statement,
                    'order' => $index + 1,
                ]);
            }
        }
        // Seed smiley template questions
        if ($smileyTemplate && $textTemplate) {
            Question::create([
                'feedback_template_id' => $smileyTemplate->id,
                'question_template_id' => $textTemplate->id,
                'feedback_id' => null,
                'question' => 'Positive Feedback',
                'order' => 1,
            ]);
            Question::create([
                'feedback_template_id' => $smileyTemplate->id,
                'question_template_id' => $textTemplate->id,
                'feedback_id' => null,
                'question' => 'Negative Feedback',
                'order' => 2,
            ]);
        }
        // Seed checkbox template questions
        if ($checkboxTemplate && $checkboxTemplate) {
            $checkboxQuestions = [
                'What do you like about this course?',
                'Which topics would you like to see covered in more detail?',
                'What resources were most helpful to you?'
            ];
            foreach ($checkboxQuestions as $index => $question) {
                Question::create([
                    'feedback_template_id' => $checkboxTemplate->id,
                    'question_template_id' => $checkboxTemplate->id,
                    'feedback_id' => null,
                    'question' => $question,
                    'order' => $index + 1,
                ]);
            }
        }
        // Seed table template questions
        if ($tableTemplate && $rangeTemplate) {
            $tableQuestions = [
                // Behavior questions
                '... ungeduldig',
                '... sicher im Auftreten',
                '... freundlich',
                '... energisch und aufbauend',
                '... tatkräftig, aktiv',
                '... aufgeschlossen',
                // Fairness questions
                '... bevorzugt manche Schülerinnen oder Schüler.',
                '... nimmt die Schülerinnen und Schüler ernst.',
                '... ermutigt und lobt viel.',
                '... entscheidet immer allein.',
                '... gesteht eigene Fehler ein.',
                // Class quality questions
                'Die Ziele des Unterrichts sind klar erkennbar.',
                'Der Lehrer redet zu viel.',
                'Der Lehrer schweift oft vom Thema ab.',
                'Die Fragen und Beiträge der Schülerinnen und Schüler werden ernst genommen.',
                'Die Sprache des Lehrers ist gut verständlich.',
                'Der Lehrer achtet auf Ruhe und Disziplin im Unterricht.',
                'Der Unterricht ist abwechslungsreich.',
                'Unterrichtsmaterialien sind ansprechend und gut verständlich gestaltet.',
                'Der Stoff wird ausreichend wiederholt und geübt.',
                // Evaluation questions
                'Die Themen der Schulaufgaben werden rechtzeitig vorher bekannt gegeben.',
                'Der Schwierigkeitsgrad der Leistungsnachweise entspricht dem der Unterrichtsinhalte.',
                'Die Bewertungen sind nachvollziehbar und verständlich.'
            ];
            foreach ($tableQuestions as $index => $question) {
                Question::create([
                    'feedback_template_id' => $tableTemplate->id,
                    'question_template_id' => $rangeTemplate->id,
                    'feedback_id' => null,
                    'question' => $question,
                    'order' => $index + 1,
                ]);
            }
            // Create the text questions for feedback
            $textTemplate = Question_template::where('type', 'text')->first()
                ?? Question_template::firstOrCreate(['type' => 'text']);
            $feedbackQuestions = [
                'Das hat mir besonders gut gefallen',
                'Das hat mir nicht gefallen',
                'Verbesserungsvorschläge'
            ];
            foreach ($feedbackQuestions as $index => $question) {
                Question::create([
                    'feedback_template_id' => $tableTemplate->id,
                    'question_template_id' => $textTemplate->id,
                    'feedback_id' => null,
                    'question' => $question,
                    'order' => count($tableQuestions) + $index + 1,
                ]);
            }
        }
    }
}
</file>

<file path="database/seeders/QuestionTemplateSeeder.php">
<?php
namespace Database\Seeders;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Question_template;
class QuestionTemplateSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        # Target Feedback
        Question_template::updateOrCreate([
            'type' => 'range',
            'min_value' => 1,
            'max_value' => 5,
        ]);
        Question_template::updateOrCreate([
            'type' => 'checkboxes',
            'max_value' => 4,
        ]);
        Question_template::updateOrCreate([
            'type' => 'textarea',
            'max_value' => 3,
        ]);
    }
}
</file>

<file path="database/seeders/RegisterKeySeeder.php">
<?php
namespace Database\Seeders;
use App\Models\Registerkey;
use Illuminate\Database\Seeder;
class RegisterKeySeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        Registerkey::updateOrCreate([
            'code' => 'ABCD-EFGH'
        ]);
    }
}
</file>

<file path="database/seeders/SchoolClassSeeder.php">
<?php
namespace Database\Seeders;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use App\Models\SchoolClass;
use Illuminate\Database\Seeder;
class SchoolClassSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $schoolClasses = [
            ['name' => '5a', 'grade_level_id' => 3],
            ['name' => '5b', 'grade_level_id' => 3],
            ['name' => '6a', 'grade_level_id' => 3],
            ['name' => '6b', 'grade_level_id' => 3],
        ];
        foreach ($schoolClasses as $class) {
            SchoolClass::UpdateOrcreate($class);
        }
    }
}
</file>

<file path="database/seeders/SchoolYearSeeder.php">
<?php
namespace Database\Seeders;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use App\Models\SchoolYear;
use Illuminate\Database\Seeder;
class SchoolYearSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $schoolYears = [
            ['name' => '2023/24'],
            ['name' => '2024/25'],
        ];
        foreach ($schoolYears as $year) {
            SchoolYear::create($year);
        }
    }
}
</file>

<file path="database/seeders/SubjectSeeder.php">
<?php
namespace Database\Seeders;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use App\Models\Subject;
use Illuminate\Database\Seeder;
class SubjectSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $subjects = [
            ['code' => 'AWP', 'name' => 'Anwendungsentwicklung & Programmierung'],
            ['code' => 'ITT', 'name' => 'Informationstechnologie Technik'],
            ['code' => 'ITS', 'name' => 'Informationstechnologie Systeme'],
            ['code' => 'SP', 'name' => 'Sport'],
            ['code' => 'ITP', 'name' => 'Informationstechnologie Projekt'],
            ['code' => 'D', 'name' => 'Deutsch'],
            ['code' => 'E', 'name' => 'Englisch'],
            ['code' => 'PUG', 'name' => 'Politik und Gesellschaft'],
            ['code' => 'BGP', 'name' => 'Betriebs- und gesamtwirtschaftliche Prozesse'],
            ['code' => 'kRel', 'name' => 'Katholische Religion'],
            ['code' => 'eRel', 'name' => 'Evangelische Religion'],
            ['code' => 'ET', 'name' => 'Ethik'],
        ];
        foreach ($subjects as $subject) {
            Subject::updateOrCreate($subject);
        }
    }
}
</file>

<file path="database/seeders/TableTemplateUpdateSeeder.php">
<?php
namespace Database\Seeders;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Feedback_template;
use App\Models\Question;
use App\Models\Question_template;
use Illuminate\Support\Facades\DB;
class TableTemplateUpdateSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $tableTemplate = Feedback_template::where('name', 'templates.feedback.table')->first();
        if (!$tableTemplate) {
            $this->command->error('Table feedback template not found!');
            return;
        }
        $rangeTemplate = Question_template::where('type', 'range')->first();
        $textTemplate = Question_template::where('type', 'text')->first()
            ?? Question_template::firstOrCreate(['type' => 'text']);
        if (!$rangeTemplate) {
            $this->command->error('Range question template not found!');
            return;
        }
        // First, delete all existing questions for the table template that don't belong to a specific feedback
        DB::table('questions')
            ->where('feedback_template_id', $tableTemplate->id)
            ->whereNull('feedback_id')
            ->delete();
        $this->command->info('Deleted existing table template questions.');
        // Seed table template questions
        $tableQuestions = [
            // Behavior questions
            '... ungeduldig',
            '... sicher im Auftreten',
            '... freundlich',
            '... energisch und aufbauend',
            '... tatkräftig, aktiv',
            '... aufgeschlossen',
            // Fairness questions
            '... bevorzugt manche Schülerinnen oder Schüler.',
            '... nimmt die Schülerinnen und Schüler ernst.',
            '... ermutigt und lobt viel.',
            '... entscheidet immer allein.',
            '... gesteht eigene Fehler ein.',
            // Class quality questions
            'Die Ziele des Unterrichts sind klar erkennbar.',
            'Der Lehrer redet zu viel.',
            'Der Lehrer schweift oft vom Thema ab.',
            'Die Fragen und Beiträge der Schülerinnen und Schüler werden ernst genommen.',
            'Die Sprache des Lehrers ist gut verständlich.',
            'Der Lehrer achtet auf Ruhe und Disziplin im Unterricht.',
            'Der Unterricht ist abwechslungsreich.',
            'Unterrichtsmaterialien sind ansprechend und gut verständlich gestaltet.',
            'Der Stoff wird ausreichend wiederholt und geübt.',
            // Evaluation questions
            'Die Themen der Schulaufgaben werden rechtzeitig vorher bekannt gegeben.',
            'Der Schwierigkeitsgrad der Leistungsnachweise entspricht dem der Unterrichtsinhalte.',
            'Die Bewertungen sind nachvollziehbar und verständlich.'
        ];
        foreach ($tableQuestions as $index => $question) {
            Question::create([
                'feedback_template_id' => $tableTemplate->id,
                'question_template_id' => $rangeTemplate->id,
                'feedback_id' => null,
                'question' => $question,
                'order' => $index + 1,
            ]);
        }
        $this->command->info('Created ' . count($tableQuestions) . ' rating questions for table template.');
        // Create the text questions for feedback
        $feedbackQuestions = [
            'Das hat mir besonders gut gefallen',
            'Das hat mir nicht gefallen',
            'Verbesserungsvorschläge'
        ];
        foreach ($feedbackQuestions as $index => $question) {
            Question::create([
                'feedback_template_id' => $tableTemplate->id,
                'question_template_id' => $textTemplate->id,
                'feedback_id' => null,
                'question' => $question,
                'order' => count($tableQuestions) + $index + 1,
            ]);
        }
        $this->command->info('Created ' . count($feedbackQuestions) . ' text feedback questions for table template.');
    }
}
</file>

<file path="database/seeders/UserSeeder.php">
<?php
namespace Database\Seeders;
use App\Models\User;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\Hash;
class UserSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // First check if admin user already exists to avoid unique constraint violation
        $adminExists = User::where('name', 'admin')->exists();
        if (!$adminExists) {
            User::create([
                'name' => 'admin',
                'email' => 'noreply@uts-x.com',
                'password' => Hash::make('admin'),
                'is_admin' => 1,
                'email_verified_at' => now(),
            ]);
        } else {
            // Optionally update existing admin user if needed
            User::where('name', 'admin')->update([
                'email' => 'noreply@uts-x.com',
                'is_admin' => 1,
                'email_verified_at' => now(),
            ]);
        }
    }
}
</file>

<file path="database/.gitignore">
*.sqlite*
</file>

<file path="deployments/app-deployment.yaml">
apiVersion: apps/v1
kind: Deployment
metadata:
  name: feedback-forms
  namespace: feedback-forms
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: feedback-forms
  template:
    metadata:
      labels:
        app: feedback-forms
    spec:
      securityContext:
        fsGroup: 82
      volumes:
        - name: app-files
          emptyDir: {}
        - name: nginx-config
          configMap:
            name: nginx-config
      initContainers:
        - name: app-files
          image: ghcr.io/feedback-forms/feedback-forms:dev
          command: ["/bin/sh", "-c"]
          args:
            - |
              cp -r /app/. /var/www/html/
              chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache
              chmod -R 775 /var/www/html/storage /var/www/html/bootstrap/cache
          volumeMounts:
            - name: app-files
              mountPath: /var/www/html
      containers:
        - name: php-fpm
          image: ghcr.io/feedback-forms/feedback-forms:dev
          securityContext:
            runAsUser: 82
            runAsGroup: 82
          volumeMounts:
            - name: app-files
              mountPath: /app
          env:
            - name: APP_KEY
              valueFrom:
                secretKeyRef:
                  name: laravel-secret
                  key: app-key
            - name: APP_URL
              value: "https://$(DOMAIN)"
            - name: DB_HOST
              value: postgres
            - name: DB_DATABASE
              value: "feedback_forms"
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: password
            - name: MAIL_MAILER
              value: "smtp"
            - name: MAIL_HOST
              value: "mail.smtp2go.com"
            - name: MAIL_PORT
              value: "2525"
            - name: MAIL_FROM_ADDRESS
              value: "noreply@uts-x.com"
            - name: MAIL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: smtp-secret
                  key: username
            - name: MAIL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: smtp-secret
                  key: password
            - name: SESSION_DRIVER
              value: "database"
            - name: SESSION_LIFETIME
              value: "120"
            - name: DB_CONNECTION
              value: "pgsql"
            - name: DB_PORT
              value: "5432"
          readinessProbe:
            httpGet:
              path: /
              port: 80
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          livenessProbe:
            tcpSocket:
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 20
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "200m"
        - name: nginx
          image: nginx:alpine
          volumeMounts:
            - name: app-files
              mountPath: /app
            - name: nginx-config
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: nginx.conf
          ports:
            - containerPort: 80
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
---
apiVersion: v1
kind: Service
metadata:
  name: feedback-forms
  namespace: feedback-forms
spec:
  selector:
    app: feedback-forms
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
</file>

<file path="deployments/db-setup-job.yaml">
apiVersion: batch/v1
kind: Job
metadata:
  name: db-setup
  namespace: feedback-forms
spec:
  backoffLimit: 10
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: db-migrations
          image: ghcr.io/feedback-forms/feedback-forms:dev
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for postgres..."
              while ! nc -z postgres 5432; do
                sleep 1
              done
              php artisan migrate --force
              php artisan db:seed
          env:
            - name: DB_CONNECTION
              value: "pgsql"
            - name: DB_HOST
              value: postgres
            - name: DB_PORT
              value: "5432"
            - name: DB_DATABASE
              value: "feedback_forms"
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: password
</file>

<file path="deployments/ingress.yaml">
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: feedback-forms-ingress
  namespace: feedback-forms
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  rules:
  - host: feedback-forms.uts-x.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: feedback-forms
            port:
              number: 80
</file>

<file path="deployments/nginx-configmap.yaml">
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: feedback-forms
data:
  nginx.conf: |
    server {
        listen 80;
        root /app/public;
        index index.php;
        location / {
            try_files $uri $uri/ /index.php?$query_string;
        }
        location ~ \.php$ {
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include fastcgi_params;
        }
    }
</file>

<file path="deployments/postgres-deployment.yaml">
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: feedback-forms
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:17.0-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "feedback_forms"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: feedback-forms
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: feedback-forms
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
</file>

<file path="deployments/queue-deployment.yaml">
apiVersion: apps/v1
kind: Deployment
metadata:
  name: feedback-forms-queue
  namespace: feedback-forms
spec:
  replicas: 1
  selector:
    matchLabels:
      app: feedback-forms-queue
  template:
    metadata:
      labels:
        app: feedback-forms-queue
    spec:
      containers:
      - name: queue
        image: ghcr.io/feedback-forms/feedback-forms:dev
        command: ["php", "artisan", "queue:work", "--tries=3", "--timeout=90"]
        env:
          - name: APP_KEY
            valueFrom:
              secretKeyRef:
                name: laravel-secret
                key: app-key
          - name: APP_URL
            value: "https://$(DOMAIN)"
          - name: DB_CONNECTION
            value: "pgsql"
          - name: DB_HOST
            value: postgres
          - name: DB_PORT
            value: "5432"
          - name: DB_DATABASE
            value: "feedback_forms"
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                name: postgres-secret
                key: username
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: postgres-secret
                key: password
          - name: CACHE_DRIVER
            value: "database"
          - name: QUEUE_CONNECTION
            value: "database"
          - name: SESSION_DRIVER
            value: "database"
          - name: MAIL_MAILER
            value: "smtp"
          - name: MAIL_HOST
            value: "mail.smtp2go.com"
          - name: MAIL_PORT
            value: "2525"
          - name: MAIL_FROM_ADDRESS
            value: "noreply@uts-x.com"
          - name: MAIL_USERNAME
            valueFrom:
              secretKeyRef:
                name: smtp-secret
                key: username
          - name: MAIL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: smtp-secret
                key: password
</file>

<file path="docker/8.0/Dockerfile">
FROM ubuntu:24.04

LABEL maintainer="Taylor Otwell"

ARG WWWGROUP
ARG NODE_VERSION=22
ARG POSTGRES_VERSION=17

WORKDIR /var/www/html

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV SUPERVISOR_PHP_COMMAND="/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan serve --host=0.0.0.0 --port=80"
ENV SUPERVISOR_PHP_USER="sail"

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN echo "Acquire::http::Pipeline-Depth 0;" > /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::http::No-Cache true;" >> /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::BrokenProxy    true;" >> /etc/apt/apt.conf.d/99custom

RUN apt-get update && apt-get upgrade -y \
    && mkdir -p /etc/apt/keyrings \
    && apt-get install -y gnupg gosu curl ca-certificates zip unzip git supervisor sqlite3 libcap2-bin libpng-dev python3 dnsutils librsvg2-bin fswatch ffmpeg nano \
    && curl -sS 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xb8dc7e53946656efbce4c1dd71daeaab4ad4cab6' | gpg --dearmor | tee /usr/share/keyrings/ppa_ondrej_php.gpg > /dev/null \
    && echo "deb [signed-by=/usr/share/keyrings/ppa_ondrej_php.gpg] https://ppa.launchpadcontent.net/ondrej/php/ubuntu noble main" > /etc/apt/sources.list.d/ppa_ondrej_php.list \
    && apt-get update \
    && apt-get install -y php8.0-cli php8.0-dev \
       php8.0-pgsql php8.0-sqlite3 php8.0-gd php8.0-imagick \
       php8.0-curl php8.0-memcached php8.0-mongodb \
       php8.0-imap php8.0-mysql php8.0-mbstring \
       php8.0-xml php8.0-zip php8.0-bcmath php8.0-soap \
       php8.0-intl php8.0-readline php8.0-pcov \
       php8.0-msgpack php8.0-igbinary php8.0-ldap \
       php8.0-redis php8.0-swoole php8.0-xdebug \
    && curl -sLS https://getcomposer.org/installer | php -- --install-dir=/usr/bin/ --filename=composer \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_VERSION.x nodistro main" > /etc/apt/sources.list.d/nodesource.list \
    && apt-get update \
    && apt-get install -y nodejs \
    && npm install -g npm \
    && npm install -g bun \
    && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | tee /usr/share/keyrings/yarnkey.gpg >/dev/null \
    && echo "deb [signed-by=/usr/share/keyrings/yarnkey.gpg] https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list \
    && curl -sS https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | tee /usr/share/keyrings/pgdg.gpg >/dev/null \
    && echo "deb [signed-by=/usr/share/keyrings/pgdg.gpg] http://apt.postgresql.org/pub/repos/apt noble-pgdg main" > /etc/apt/sources.list.d/pgdg.list \
    && apt-get update \
    && apt-get install -y yarn \
    && apt-get install -y mysql-client \
    && apt-get install -y postgresql-client-$POSTGRES_VERSION \
    && apt-get -y autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN update-alternatives --set php /usr/bin/php8.0

RUN setcap "cap_net_bind_service=+ep" /usr/bin/php8.0

RUN userdel -r ubuntu
RUN groupadd --force -g $WWWGROUP sail
RUN useradd -ms /bin/bash --no-user-group -g $WWWGROUP -u 1337 sail

COPY start-container /usr/local/bin/start-container
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY php.ini /etc/php/8.0/cli/conf.d/99-sail.ini
RUN chmod +x /usr/local/bin/start-container

EXPOSE 80/tcp

ENTRYPOINT ["start-container"]
</file>

<file path="docker/8.0/php.ini">
[PHP]
post_max_size = 100M
upload_max_filesize = 100M
variables_order = EGPCS
pcov.directory = .
</file>

<file path="docker/8.0/start-container">
#!/usr/bin/env bash

if [ "$SUPERVISOR_PHP_USER" != "root" ] && [ "$SUPERVISOR_PHP_USER" != "sail" ]; then
    echo "You should set SUPERVISOR_PHP_USER to either 'sail' or 'root'."
    exit 1
fi

if [ ! -z "$WWWUSER" ]; then
    usermod -u $WWWUSER sail
fi

if [ ! -d /.composer ]; then
    mkdir /.composer
fi

chmod -R ugo+rw /.composer

if [ $# -gt 0 ]; then
    if [ "$SUPERVISOR_PHP_USER" = "root" ]; then
        exec "$@"
    else
        exec gosu $WWWUSER "$@"
    fi
else
    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
fi
</file>

<file path="docker/8.0/supervisord.conf">
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:php]
command=%(ENV_SUPERVISOR_PHP_COMMAND)s
user=%(ENV_SUPERVISOR_PHP_USER)s
environment=LARAVEL_SAIL="1"
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
</file>

<file path="docker/8.1/Dockerfile">
FROM ubuntu:24.04

LABEL maintainer="Taylor Otwell"

ARG WWWGROUP
ARG NODE_VERSION=22
ARG POSTGRES_VERSION=17

WORKDIR /var/www/html

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV SUPERVISOR_PHP_COMMAND="/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan serve --host=0.0.0.0 --port=80"
ENV SUPERVISOR_PHP_USER="sail"

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN echo "Acquire::http::Pipeline-Depth 0;" > /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::http::No-Cache true;" >> /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::BrokenProxy    true;" >> /etc/apt/apt.conf.d/99custom

RUN apt-get update && apt-get upgrade -y \
    && mkdir -p /etc/apt/keyrings \
    && apt-get install -y gnupg gosu curl ca-certificates zip unzip git supervisor sqlite3 libcap2-bin libpng-dev python3 dnsutils librsvg2-bin fswatch ffmpeg nano \
    && curl -sS 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xb8dc7e53946656efbce4c1dd71daeaab4ad4cab6' | gpg --dearmor | tee /usr/share/keyrings/ppa_ondrej_php.gpg > /dev/null \
    && echo "deb [signed-by=/usr/share/keyrings/ppa_ondrej_php.gpg] https://ppa.launchpadcontent.net/ondrej/php/ubuntu noble main" > /etc/apt/sources.list.d/ppa_ondrej_php.list \
    && apt-get update \
    && apt-get install -y php8.1-cli php8.1-dev \
       php8.1-pgsql php8.1-sqlite3 php8.1-gd php8.1-imagick \
       php8.1-curl php8.1-mongodb \
       php8.1-imap php8.1-mysql php8.1-mbstring \
       php8.1-xml php8.1-zip php8.1-bcmath php8.1-soap \
       php8.1-intl php8.1-readline \
       php8.1-ldap \
       php8.1-msgpack php8.1-igbinary php8.1-redis php8.1-swoole \
       php8.1-memcached php8.1-pcov php8.1-xdebug \
    && curl -sLS https://getcomposer.org/installer | php -- --install-dir=/usr/bin/ --filename=composer \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_VERSION.x nodistro main" > /etc/apt/sources.list.d/nodesource.list \
    && apt-get update \
    && apt-get install -y nodejs \
    && npm install -g npm \
    && npm install -g bun \
    && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | tee /usr/share/keyrings/yarn.gpg >/dev/null \
    && echo "deb [signed-by=/usr/share/keyrings/yarn.gpg] https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list \
    && curl -sS https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | tee /usr/share/keyrings/pgdg.gpg >/dev/null \
    && echo "deb [signed-by=/usr/share/keyrings/pgdg.gpg] http://apt.postgresql.org/pub/repos/apt noble-pgdg main" > /etc/apt/sources.list.d/pgdg.list \
    && apt-get update \
    && apt-get install -y yarn \
    && apt-get install -y mysql-client \
    && apt-get install -y postgresql-client-$POSTGRES_VERSION \
    && apt-get -y autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN setcap "cap_net_bind_service=+ep" /usr/bin/php8.1

RUN userdel -r ubuntu
RUN groupadd --force -g $WWWGROUP sail
RUN useradd -ms /bin/bash --no-user-group -g $WWWGROUP -u 1337 sail

COPY start-container /usr/local/bin/start-container
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY php.ini /etc/php/8.1/cli/conf.d/99-sail.ini
RUN chmod +x /usr/local/bin/start-container

EXPOSE 80/tcp

ENTRYPOINT ["start-container"]
</file>

<file path="docker/8.1/php.ini">
[PHP]
post_max_size = 100M
upload_max_filesize = 100M
variables_order = EGPCS
pcov.directory = .
</file>

<file path="docker/8.1/start-container">
#!/usr/bin/env bash

if [ "$SUPERVISOR_PHP_USER" != "root" ] && [ "$SUPERVISOR_PHP_USER" != "sail" ]; then
    echo "You should set SUPERVISOR_PHP_USER to either 'sail' or 'root'."
    exit 1
fi

if [ ! -z "$WWWUSER" ]; then
    usermod -u $WWWUSER sail
fi

if [ ! -d /.composer ]; then
    mkdir /.composer
fi

chmod -R ugo+rw /.composer

if [ $# -gt 0 ]; then
    if [ "$SUPERVISOR_PHP_USER" = "root" ]; then
        exec "$@"
    else
        exec gosu $WWWUSER "$@"
    fi
else
    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
fi
</file>

<file path="docker/8.1/supervisord.conf">
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:php]
command=%(ENV_SUPERVISOR_PHP_COMMAND)s
user=%(ENV_SUPERVISOR_PHP_USER)s
environment=LARAVEL_SAIL="1"
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
</file>

<file path="docker/8.2/Dockerfile">
FROM ubuntu:24.04

LABEL maintainer="Taylor Otwell"

ARG WWWGROUP
ARG NODE_VERSION=22
ARG POSTGRES_VERSION=17

WORKDIR /var/www/html

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV SUPERVISOR_PHP_COMMAND="/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan serve --host=0.0.0.0 --port=80"
ENV SUPERVISOR_PHP_USER="sail"

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN echo "Acquire::http::Pipeline-Depth 0;" > /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::http::No-Cache true;" >> /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::BrokenProxy    true;" >> /etc/apt/apt.conf.d/99custom

RUN apt-get update && apt-get upgrade -y \
    && mkdir -p /etc/apt/keyrings \
    && apt-get install -y gnupg gosu curl ca-certificates zip unzip git supervisor sqlite3 libcap2-bin libpng-dev python3 dnsutils librsvg2-bin fswatch ffmpeg nano  \
    && curl -sS 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xb8dc7e53946656efbce4c1dd71daeaab4ad4cab6' | gpg --dearmor | tee /etc/apt/keyrings/ppa_ondrej_php.gpg > /dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/ppa_ondrej_php.gpg] https://ppa.launchpadcontent.net/ondrej/php/ubuntu noble main" > /etc/apt/sources.list.d/ppa_ondrej_php.list \
    && apt-get update \
    && apt-get install -y php8.2-cli php8.2-dev \
       php8.2-pgsql php8.2-sqlite3 php8.2-gd php8.2-imagick \
       php8.2-curl php8.2-mongodb \
       php8.2-imap php8.2-mysql php8.2-mbstring \
       php8.2-xml php8.2-zip php8.2-bcmath php8.2-soap \
       php8.2-intl php8.2-readline \
       php8.2-ldap \
       php8.2-msgpack php8.2-igbinary php8.2-redis php8.2-swoole \
       php8.2-memcached php8.2-pcov php8.2-xdebug \
    && curl -sLS https://getcomposer.org/installer | php -- --install-dir=/usr/bin/ --filename=composer \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_VERSION.x nodistro main" > /etc/apt/sources.list.d/nodesource.list \
    && apt-get update \
    && apt-get install -y nodejs \
    && npm install -g npm \
    && npm install -g pnpm \
    && npm install -g bun \
    && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | tee /etc/apt/keyrings/yarn.gpg >/dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/yarn.gpg] https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list \
    && curl -sS https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | tee /etc/apt/keyrings/pgdg.gpg >/dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/pgdg.gpg] http://apt.postgresql.org/pub/repos/apt noble-pgdg main" > /etc/apt/sources.list.d/pgdg.list \
    && apt-get update \
    && apt-get install -y yarn \
    && apt-get install -y mysql-client \
    && apt-get install -y postgresql-client-$POSTGRES_VERSION \
    && apt-get -y autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN setcap "cap_net_bind_service=+ep" /usr/bin/php8.2

RUN userdel -r ubuntu
RUN groupadd --force -g $WWWGROUP sail
RUN useradd -ms /bin/bash --no-user-group -g $WWWGROUP -u 1337 sail

COPY start-container /usr/local/bin/start-container
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY php.ini /etc/php/8.2/cli/conf.d/99-sail.ini
RUN chmod +x /usr/local/bin/start-container

EXPOSE 80/tcp

ENTRYPOINT ["start-container"]
</file>

<file path="docker/8.2/php.ini">
[PHP]
post_max_size = 100M
upload_max_filesize = 100M
variables_order = EGPCS
pcov.directory = .
</file>

<file path="docker/8.2/start-container">
#!/usr/bin/env bash

if [ "$SUPERVISOR_PHP_USER" != "root" ] && [ "$SUPERVISOR_PHP_USER" != "sail" ]; then
    echo "You should set SUPERVISOR_PHP_USER to either 'sail' or 'root'."
    exit 1
fi

if [ ! -z "$WWWUSER" ]; then
    usermod -u $WWWUSER sail
fi

if [ ! -d /.composer ]; then
    mkdir /.composer
fi

chmod -R ugo+rw /.composer

if [ $# -gt 0 ]; then
    if [ "$SUPERVISOR_PHP_USER" = "root" ]; then
        exec "$@"
    else
        exec gosu $WWWUSER "$@"
    fi
else
    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
fi
</file>

<file path="docker/8.2/supervisord.conf">
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:php]
command=%(ENV_SUPERVISOR_PHP_COMMAND)s
user=%(ENV_SUPERVISOR_PHP_USER)s
environment=LARAVEL_SAIL="1"
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
</file>

<file path="docker/8.3/Dockerfile">
FROM ubuntu:24.04

LABEL maintainer="Taylor Otwell"

ARG WWWGROUP
ARG NODE_VERSION=22
ARG MYSQL_CLIENT="mysql-client"
ARG POSTGRES_VERSION=17

WORKDIR /var/www/html

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV SUPERVISOR_PHP_COMMAND="/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan serve --host=0.0.0.0 --port=80"
ENV SUPERVISOR_PHP_USER="sail"

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN echo "Acquire::http::Pipeline-Depth 0;" > /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::http::No-Cache true;" >> /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::BrokenProxy    true;" >> /etc/apt/apt.conf.d/99custom

RUN apt-get update && apt-get upgrade -y \
    && mkdir -p /etc/apt/keyrings \
    && apt-get install -y gnupg gosu curl ca-certificates zip unzip git supervisor sqlite3 libcap2-bin libpng-dev python3 dnsutils librsvg2-bin fswatch ffmpeg nano  \
    && curl -sS 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xb8dc7e53946656efbce4c1dd71daeaab4ad4cab6' | gpg --dearmor | tee /etc/apt/keyrings/ppa_ondrej_php.gpg > /dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/ppa_ondrej_php.gpg] https://ppa.launchpadcontent.net/ondrej/php/ubuntu noble main" > /etc/apt/sources.list.d/ppa_ondrej_php.list \
    && apt-get update \
    && apt-get install -y php8.3-cli php8.3-dev \
       php8.3-pgsql php8.3-sqlite3 php8.3-gd \
       php8.3-curl php8.3-mongodb \
       php8.3-imap php8.3-mysql php8.3-mbstring \
       php8.3-xml php8.3-zip php8.3-bcmath php8.3-soap \
       php8.3-intl php8.3-readline \
       php8.3-ldap \
       php8.3-msgpack php8.3-igbinary php8.3-redis \
       php8.3-memcached php8.3-pcov php8.3-imagick php8.3-xdebug php8.3-swoole \
    && curl -sLS https://getcomposer.org/installer | php -- --install-dir=/usr/bin/ --filename=composer \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_VERSION.x nodistro main" > /etc/apt/sources.list.d/nodesource.list \
    && apt-get update \
    && apt-get install -y nodejs \
    && npm install -g npm \
    && npm install -g pnpm \
    && npm install -g bun \
    && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | tee /etc/apt/keyrings/yarn.gpg >/dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/yarn.gpg] https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list \
    && curl -sS https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | tee /etc/apt/keyrings/pgdg.gpg >/dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/pgdg.gpg] http://apt.postgresql.org/pub/repos/apt noble-pgdg main" > /etc/apt/sources.list.d/pgdg.list \
    && apt-get update \
    && apt-get install -y yarn \
    && apt-get install -y $MYSQL_CLIENT \
    && apt-get install -y postgresql-client-$POSTGRES_VERSION \
    && apt-get -y autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN setcap "cap_net_bind_service=+ep" /usr/bin/php8.3

RUN userdel -r ubuntu
RUN groupadd --force -g $WWWGROUP sail
RUN useradd -ms /bin/bash --no-user-group -g $WWWGROUP -u 1337 sail

COPY start-container /usr/local/bin/start-container
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY php.ini /etc/php/8.3/cli/conf.d/99-sail.ini
RUN chmod +x /usr/local/bin/start-container

EXPOSE 80/tcp

ENTRYPOINT ["start-container"]
</file>

<file path="docker/8.3/php.ini">
[PHP]
post_max_size = 100M
upload_max_filesize = 100M
variables_order = EGPCS
pcov.directory = .
</file>

<file path="docker/8.3/start-container">
#!/usr/bin/env bash

if [ "$SUPERVISOR_PHP_USER" != "root" ] && [ "$SUPERVISOR_PHP_USER" != "sail" ]; then
    echo "You should set SUPERVISOR_PHP_USER to either 'sail' or 'root'."
    exit 1
fi

if [ ! -z "$WWWUSER" ]; then
    usermod -u $WWWUSER sail
fi

if [ ! -d /.composer ]; then
    mkdir /.composer
fi

chmod -R ugo+rw /.composer

if [ $# -gt 0 ]; then
    if [ "$SUPERVISOR_PHP_USER" = "root" ]; then
        exec "$@"
    else
        exec gosu $WWWUSER "$@"
    fi
else
    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
fi
</file>

<file path="docker/8.3/supervisord.conf">
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:php]
command=%(ENV_SUPERVISOR_PHP_COMMAND)s
user=%(ENV_SUPERVISOR_PHP_USER)s
environment=LARAVEL_SAIL="1"
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
</file>

<file path="docker/8.4/Dockerfile">
FROM ubuntu:24.04

LABEL maintainer="Taylor Otwell"

ARG WWWGROUP
ARG NODE_VERSION=22
ARG MYSQL_CLIENT="mysql-client"
ARG POSTGRES_VERSION=17

WORKDIR /var/www/html

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV SUPERVISOR_PHP_COMMAND="/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan serve --host=0.0.0.0 --port=80"
ENV SUPERVISOR_NPM_DEV_COMMAND="/usr/bin/npm run dev"

ENV SUPERVISOR_PHP_USER="sail"

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN echo "Acquire::http::Pipeline-Depth 0;" > /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::http::No-Cache true;" >> /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::BrokenProxy    true;" >> /etc/apt/apt.conf.d/99custom

RUN apt-get update && apt-get upgrade -y \
    && mkdir -p /etc/apt/keyrings \
    && apt-get install -y gnupg gosu curl ca-certificates zip unzip git supervisor sqlite3 libcap2-bin libpng-dev python3 dnsutils librsvg2-bin fswatch ffmpeg nano  \
    && curl -sS 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xb8dc7e53946656efbce4c1dd71daeaab4ad4cab6' | gpg --dearmor | tee /etc/apt/keyrings/ppa_ondrej_php.gpg > /dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/ppa_ondrej_php.gpg] https://ppa.launchpadcontent.net/ondrej/php/ubuntu noble main" > /etc/apt/sources.list.d/ppa_ondrej_php.list \
    && apt-get update \
    && apt-get install -y php8.4-cli php8.4-dev \
       php8.4-pgsql php8.4-sqlite3 php8.4-gd \
       php8.4-curl php8.4-mongodb \
       php8.4-imap php8.4-mysql php8.4-mbstring \
       php8.4-xml php8.4-zip php8.4-bcmath php8.4-soap \
       php8.4-intl php8.4-readline \
       php8.4-ldap \
       php8.4-msgpack php8.4-igbinary php8.4-redis php8.4-swoole \
       php8.4-memcached php8.4-pcov php8.4-imagick php8.4-xdebug \
    && curl -sLS https://getcomposer.org/installer | php -- --install-dir=/usr/bin/ --filename=composer \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_VERSION.x nodistro main" > /etc/apt/sources.list.d/nodesource.list \
    && apt-get update \
    && apt-get install -y nodejs \
    && npm install -g npm \
    && npm install -g pnpm \
    && npm install -g bun \
    && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | tee /etc/apt/keyrings/yarn.gpg >/dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/yarn.gpg] https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list \
    && curl -sS https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | tee /etc/apt/keyrings/pgdg.gpg >/dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/pgdg.gpg] http://apt.postgresql.org/pub/repos/apt noble-pgdg main" > /etc/apt/sources.list.d/pgdg.list \
    && apt-get update \
    && apt-get install -y yarn \
    && apt-get install -y $MYSQL_CLIENT \
    && apt-get install -y postgresql-client-$POSTGRES_VERSION \
    && apt-get -y autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN setcap "cap_net_bind_service=+ep" /usr/bin/php8.4

RUN userdel -r ubuntu
RUN groupadd --force -g $WWWGROUP sail
RUN useradd -ms /bin/bash --no-user-group -g $WWWGROUP -u 1337 sail

COPY start-container /usr/local/bin/start-container
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY php.ini /etc/php/8.4/cli/conf.d/99-sail.ini
RUN chmod +x /usr/local/bin/start-container

EXPOSE 80/tcp

ENTRYPOINT ["start-container"]
</file>

<file path="docker/8.4/php.ini">
[PHP]
post_max_size = 100M
upload_max_filesize = 100M
variables_order = EGPCS
pcov.directory = .
</file>

<file path="docker/8.4/start-container">
#!/usr/bin/env bash

if [ "$SUPERVISOR_PHP_USER" != "root" ] && [ "$SUPERVISOR_PHP_USER" != "sail" ]; then
    echo "You should set SUPERVISOR_PHP_USER to either 'sail' or 'root'."
    exit 1
fi

if [ ! -z "$WWWUSER" ]; then
    usermod -u $WWWUSER sail
fi

if [ ! -d /.composer ]; then
    mkdir /.composer
fi

chmod -R ugo+rw /.composer

if [ $# -gt 0 ]; then
    if [ "$SUPERVISOR_PHP_USER" = "root" ]; then
        exec "$@"
    else
        exec gosu $WWWUSER "$@"
    fi
else
    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
fi
</file>

<file path="docker/8.4/supervisord.conf">
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:php]
command=%(ENV_SUPERVISOR_PHP_COMMAND)s
user=%(ENV_SUPERVISOR_PHP_USER)s
environment=LARAVEL_SAIL="1"
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

[program:js]
command=%(ENV_SUPERVISOR_NPM_DEV_COMMAND)s
user=%(ENV_SUPERVISOR_PHP_USER)s
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
</file>

<file path="docker/mariadb/create-testing-database.sh">
#!/usr/bin/env bash
/usr/bin/mariadb --user=root --password="$MYSQL_ROOT_PASSWORD" <<-EOSQL
    CREATE DATABASE IF NOT EXISTS testing;
    GRANT ALL PRIVILEGES ON \`testing%\`.* TO '$MYSQL_USER'@'%';
EOSQL
</file>

<file path="docker/mysql/create-testing-database.sh">
#!/usr/bin/env bash
mysql --user=root --password="$MYSQL_ROOT_PASSWORD" <<-EOSQL
    CREATE DATABASE IF NOT EXISTS testing;
    GRANT ALL PRIVILEGES ON \`testing%\`.* TO '$MYSQL_USER'@'%';
EOSQL
</file>

<file path="docker/pgsql/create-testing-database.sql">
SELECT 'CREATE DATABASE testing'
WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'testing')\gexec
</file>

<file path="lang/de/admin.php">
<?php
return [
    'admin_panel' => 'Admin-Panel',
    'users' => 'Benutzer',
    'invite_tokens' => 'Einladungs-Tokens',
    'created_days_ago' => 'vor :days Tagen erstellt',
    'created_at' => 'Erstellt :date',
    'created_month_ago' => 'vor :count Monat erstellt',
    'created_months_ago' => 'vor :count Monaten erstellt',
    'users_management' => 'Benutzerverwaltung',
    'password_changed_weeks_ago' => 'Passwort vor :count Wochen geändert',
    'password_changed_week_ago' => 'Passwort vor einer Woche geändert',
    'password_changed_today' => 'Passwort heute geändert',
    'admin_tools' => 'Admin Verwaltung',
    'password_changed' => 'Passwort geändert',
    'password_hidden_text' => 'Passwort versteckt',
    'password_security_note' => 'Passwörter werden aus Sicherheitsgründen verschlüsselt gespeichert. Selbst als Admin können Sie die Originalkennwörter nicht einsehen.',
    'generate_temporary_password' => 'Temporäres Passwort generieren',
    'temporary_password_generated' => 'Temporäres Passwort generiert',
    'temporary_password_for_user' => 'Temporäres Passwort für :name',
    'temporary_password_notice' => 'Bitte teilen Sie dieses Passwort dem Benutzer sicher mit. Das Passwort wird nur einmal angezeigt.',
    'temporary_password_one_time_use' => 'Wichtig: Dies ist ein einmaliges temporäres Passwort. Der Benutzer sollte es nach der ersten erfolgreichen Anmeldung ändern.',
    // Invite token management
    'create_new_token' => 'Neues Token erstellen',
    'revoke_token' => 'Token widerrufen',
    'token_created_successfully' => 'Einladungs-Token erfolgreich erstellt',
    'token_revoked_successfully' => 'Einladungs-Token erfolgreich widerrufen',
    'no_tokens_available' => 'Keine Einladungs-Tokens verfügbar'
];
</file>

<file path="lang/de/auth.php">
<?php
return [
    /*
    |--------------------------------------------------------------------------
    | Authentication Language Lines
    |--------------------------------------------------------------------------
    |
    | The following language lines are used during authentication for various
    | messages that we need to display to the user. You are free to modify
    | these language lines according to your application's requirements.
    |
    */
    'failed' => 'Diese Anmeldeinformationen stimmen nicht mit unseren Aufzeichnungen überein.',
    'password' => 'Das angegebene Passwort ist falsch.',
    'throttle' => 'Zu viele Anmeldeversuche. Bitte versuchen Sie es in :seconds Sekunden erneut.',
];
</file>

<file path="lang/de/login.php">
<?php
return [
    'username' => 'Benutzername',
    'keep-logged-in' => 'Künftig eingeloggt bleiben',
    'password-forgotten' => 'Passwort vergessen?',
    'no-account' => 'Noch keinen Account?',
    'sign-in' => 'Anmelden'
];
</file>

<file path="lang/de/navigation.php">
<?php
return [
    'logout' => 'Abmelden',
    'profile' => 'Profil',
];
</file>

<file path="lang/de/notification.php">
<?php
return [
    'verify_email' => [
        'subject' => 'Bitte bestätigen Sie Ihre E-Mail-Adresse',
        'greeting' => 'Hallo :name!',
        'intro' => 'Vielen Dank für Ihre Registrierung! Bitte bestätigen Sie Ihre E-Mail-Adresse durch Klicken auf den Button unten.',
        'action' => 'E-Mail-Adresse bestätigen',
        'outro' => 'Wenn Sie kein Konto erstellt haben, ist keine weitere Aktion erforderlich.',
        'salutation' => 'Mit freundlichen Grüßen,',
        'trouble' => 'Wenn Sie Probleme beim Klicken auf den Button ":actionText" haben, kopieren Sie die folgende URL und fügen Sie sie in Ihren Webbrowser ein'
    ]
];
</file>

<file path="lang/de/pagination.php">
<?php
return [
    /*
    |--------------------------------------------------------------------------
    | Pagination Language Lines
    |--------------------------------------------------------------------------
    |
    | The following language lines are used by the paginator library to build
    | the simple pagination links. You are free to change them to anything
    | you want to customize your views to better match your application.
    |
    */
    'previous' => '&laquo; Vorherige',
    'next' => 'Nächste &raquo;',
];
</file>

<file path="lang/de/passwords.php">
<?php
return [
    /*
    |--------------------------------------------------------------------------
    | Password Reset Language Lines
    |--------------------------------------------------------------------------
    |
    | The following language lines are the default lines which match reasons
    | that are given by the password broker for a password update attempt
    | outcome such as failure due to an invalid password / reset token.
    |
    */
    'reset' => 'Ihr Passwort wurde zurückgesetzt.',
    'sent' => 'Wir haben Ihnen den Link zum Zurücksetzen des Passworts per E-Mail gesendet.',
    'throttled' => 'Bitte warten Sie, bevor Sie es erneut versuchen.',
    'token' => 'Dieses Passwort-Zurücksetz-Token ist ungültig.',
    'user' => 'Wir können keinen Benutzer mit dieser E-Mail-Adresse finden.',
];
</file>

<file path="lang/de/register.php">
<?php
return [
    'name' => 'Name',
    'email' => 'E-Mail (optional)',
    'password' => 'Passwort',
    'confirm-password' => 'Passwort bestätigen',
    'already-registered' => 'Du hast schon einen Account?',
    'register' => 'Registrieren',
    'register_key' => 'Einladungscode',
    'invalid_code_format' => 'Einladungscode Format falsch: xxxx-xxxx (alphanumerisch)',
    'invalid_code' => 'Einladungscode ungültig',
];
</file>

<file path="lang/de/surveys.php">
<?php
return [
    'surveys' => 'Umfragen',
    'expired' => 'Abgelaufen',
    'cancelled' => 'Abgebrochen',
    'running' => 'Läuft',
    'create_new_survey' => 'Neue Umfrage erstellen',
    'select_school_year' => 'Schuljahr',
    'select_school_year_placeholder' => 'Schuljahr auswählen...',
    'select_department' => 'Abteilung',
    'select_department_placeholder' => 'Abteilung auswählen...',
    'select_grade_level' => 'Jahrgangsstufe',
    'select_grade_level_placeholder' => 'Jahrgangsstufe auswählen...',
    'select_class' => 'Klasse',
    'select_class_placeholder' => 'Klasse auswählen...',
    'select_subject' => 'Fach',
    'select_subject_placeholder' => 'Fach auswählen...',
    'response_limit' => 'Antwortlimit',
    'response_limit_help' => '-1 für unbegrenzte Antworten',
    'expire_date' => 'Ablaufdatum',
    'create_survey' => 'Umfrage erstellen',
    'created_successfully' => 'Umfrage wurde erfolgreich erstellt',
    'creation_failed' => 'Fehler beim Erstellen der Umfrage',
    'select_template_first' => 'Bitte wählen Sie zuerst eine Vorlage aus, um eine Umfrage zu erstellen',
    'template_not_found' => 'Die ausgewählte Vorlage wurde nicht gefunden',
    // Template information
    'template_information' => 'Vorlageninformation',
    'template_info_description' => 'Diese Umfrage wird mit der folgenden Vorlage erstellt. Die Fragen werden automatisch aus der Vorlage übernommen.',
    // Questions
    'questions' => 'Fragen',
    'add_question' => 'Frage hinzufügen',
    'question_text' => 'Fragetext',
    'question_type' => 'Fragetyp',
    'select_question_type' => 'Fragetyp auswählen...',
    // Question types
    'question_types' => [
        'range' => 'Bereich (1-5)',
        'checkboxes' => 'Checkboxen',
        'textarea' => 'Textfeld',
    ],
    // Departments
    'departments' => [
        'ait' => 'Automatisierungstechnik',
        'it' => 'Informationstechnologie',
        'et' => 'Elektronik',
        'mb' => 'Maschinenbau',
    ],
    // Subjects
    'subjects' => [
        'math' => 'Mathematik',
        'english' => 'Englisch',
        'science' => 'Naturwissenschaften',
        'history' => 'Geschichte',
    ],
    // Survey management
    'edit_survey' => 'Umfrage bearbeiten',
    'back_to_surveys' => 'Zurück zu Umfragen',
    'save_changes' => 'Änderungen speichern',
    'updated_successfully' => 'Umfrage wurde erfolgreich aktualisiert',
    'update_failed' => 'Fehler beim Aktualisieren der Umfrage',
    'survey_status' => 'Umfragestatus',
    'access_key' => 'Zugriffsschlüssel',
    'responses' => 'Antworten',
    'created_at' => 'Erstellt am',
    'updated_at' => 'Aktualisiert am',
    'view_details' => 'Details anzeigen',
    'edit' => 'Bearbeiten',
    // Survey response
    'survey' => 'Umfrage',
    'access_survey' => 'Umfrage aufrufen',
    'enter_access_key_hint' => 'Geben Sie den 8-stelligen Zugriffsschlüssel ein, den Sie von Ihrem Lehrer erhalten haben',
    'invalid_access_key' => 'Ungültiger Zugriffsschlüssel. Bitte überprüfen und erneut versuchen.',
    'survey_not_available' => 'Diese Umfrage ist nicht mehr verfügbar. Sie ist möglicherweise abgelaufen oder hat das Antwortlimit erreicht.',
    'submit_response' => 'Antwort absenden',
    'response_submitted' => 'Ihre Antwort wurde erfolgreich übermittelt.',
    'submission_failed' => 'Fehler beim Übermitteln Ihrer Antwort.',
    'thank_you' => 'Vielen Dank!',
    'response_received' => 'Ihre Antwort wurde empfangen. Vielen Dank für Ihr Feedback.',
    'access_another_survey' => 'Eine andere Umfrage aufrufen',
    'whoops' => 'Hoppla! Etwas ist schiefgelaufen.',
    // Survey response options
    'strongly_agree' => 'Stimme voll zu',
    'agree' => 'Stimme eher zu',
    'disagree' => 'Stimme eher nicht zu',
    'strongly_disagree' => 'Stimme überhaupt nicht zu',
    'subject' => 'Fach',
    'grade_level' => 'Jahrgangsstufe',
    'class' => 'Klasse',
    // QR Code
    'show_qr' => 'QR anzeigen',
    'qr_code_title' => 'Umfrage QR-Code',
    'scan_to_access' => 'Scannen Sie diesen QR-Code, um auf die Umfrage zuzugreifen',
    'close' => 'Schließen',
    'qr_code_error' => 'QR-Code konnte nicht generiert werden. Bitte versuchen Sie es erneut.',
    // Smiley template
    'smiley' => [
        'positive' => 'Was hat Ihnen gefallen?',
        'negative' => 'Was könnte verbessert werden?',
        'button' => 'Feedback absenden'
    ],
];
</file>

<file path="lang/de/templates.php">
<?php
return [
    'templates' => 'Vorlagen',
    'smiley' => 'Smiley',
    'table' => 'Tabelle',
    'target' => 'Zielscheibe',
    'template_gallery' => 'Vorlagen-Galerie',
    'featured' => 'Empfohlen',
    'show_all' => 'Alle anzeigen',
    'use_template' => 'Diese Vorlage verwenden',
    'preview' => 'Vorschau',
    'create_survey' => 'Umfrage erstellen',
    // Template types
    'target_feedback' => 'Zielscheiben-Feedback',
    'table_feedback' => 'Tabellen-Feedback',
    'smiley_feedback' => 'Smiley-Feedback',
    'checkbox_feedback' => 'Checkbox-Feedback',
    // Template descriptions
    'target_feedback_description' => 'Visuelles zielbasiertes Feedback zur Bewertung verschiedener Aspekte des Unterrichts.',
    'table_feedback_description' => 'Strukturiertes tabellenbasiertes Feedback mit mehreren Kategorien.',
    'smiley_feedback_description' => 'Einfaches Feedback mit positiven und negativen Kommentaren.',
    'checkbox_feedback_description' => 'Checkbox-basiertes Feedback für Multiple-Choice-Bewertungen.',
];
</file>

<file path="lang/de/validation.php">
<?php
return [
    'accepted' => 'Das Feld :attribute muss akzeptiert werden.',
    'accepted_if' => 'Das Feld :attribute muss akzeptiert werden, wenn :other :value ist.',
    'active_url' => 'Das Feld :attribute muss eine gültige URL sein.',
    'after' => 'Das Feld :attribute muss ein Datum nach :date sein.',
    'after_or_equal' => 'Das Feld :attribute muss ein Datum nach oder gleich :date sein.',
    'alpha' => 'Das Feld :attribute darf nur Buchstaben enthalten.',
    'alpha_dash' => 'Das Feld :attribute darf nur Buchstaben, Zahlen, Bindestriche und Unterstriche enthalten.',
    'alpha_num' => 'Das Feld :attribute darf nur Buchstaben und Zahlen enthalten.',
    'array' => 'Das Feld :attribute muss ein Array sein.',
    'ascii' => 'Das Feld :attribute darf nur einbyteige alphanumerische Zeichen und Symbole enthalten.',
    'before' => 'Das Feld :attribute muss ein Datum vor :date sein.',
    'before_or_equal' => 'Das Feld :attribute muss ein Datum vor oder gleich :date sein.',
    'between' => [
        'array' => 'Das Feld :attribute muss zwischen :min und :max Elemente haben.',
        'file' => 'Das Feld :attribute muss zwischen :min und :max Kilobytes groß sein.',
        'numeric' => 'Das Feld :attribute muss zwischen :min und :max liegen.',
        'string' => 'Das Feld :attribute muss zwischen :min und :max Zeichen lang sein.',
    ],
    'boolean' => 'Das Feld :attribute muss wahr oder falsch sein.',
    'can' => 'Das Feld :attribute enthält einen nicht autorisierten Wert.',
    'confirmed' => 'Die Bestätigung des Feldes :attribute stimmt nicht überein.',
    'contains' => 'Das Feld :attribute fehlt ein erforderlicher Wert.',
    'current_password' => 'Das Passwort ist falsch.',
    'date' => 'Das Feld :attribute muss ein gültiges Datum sein.',
    'date_equals' => 'Das Feld :attribute muss ein Datum gleich :date sein.',
    'date_format' => 'Das Feld :attribute muss dem Format :format entsprechen.',
    'decimal' => 'Das Feld :attribute muss :decimal Dezimalstellen haben.',
    'declined' => 'Das Feld :attribute muss abgelehnt werden.',
    'declined_if' => 'Das Feld :attribute muss abgelehnt werden, wenn :other :value ist.',
    'different' => 'Das Feld :attribute und :other müssen unterschiedlich sein.',
    'digits' => 'Das Feld :attribute muss :digits Ziffern haben.',
    'digits_between' => 'Das Feld :attribute muss zwischen :min und :max Ziffern haben.',
    'dimensions' => 'Das Feld :attribute hat ungültige Bildabmessungen.',
    'distinct' => 'Das Feld :attribute hat einen doppelten Wert.',
    'doesnt_end_with' => 'Das Feld :attribute darf nicht mit einem der folgenden Werte enden: :values.',
    'doesnt_start_with' => 'Das Feld :attribute darf nicht mit einem der folgenden Werte beginnen: :values.',
    'email' => 'Das Feld :attribute muss eine gültige E-Mail-Adresse sein.',
    'ends_with' => 'Das Feld :attribute muss mit einem der folgenden Werte enden: :values.',
    'enum' => 'Das ausgewählte :attribute ist ungültig.',
    'exists' => 'Das ausgewählte :attribute ist ungültig.',
    'extensions' => 'Das Feld :attribute muss eine der folgenden Erweiterungen haben: :values.',
    'file' => 'Das Feld :attribute muss eine Datei sein.',
    'filled' => 'Das Feld :attribute muss einen Wert haben.',
    'gt' => [
        'array' => 'Das Feld :attribute muss mehr als :value Elemente haben.',
        'file' => 'Das Feld :attribute muss größer als :value Kilobytes sein.',
        'numeric' => 'Das Feld :attribute muss größer als :value sein.',
        'string' => 'Das Feld :attribute muss mehr als :value Zeichen lang sein.',
    ],
    'gte' => [
        'array' => 'Das Feld :attribute muss :value oder mehr Elemente haben.',
        'file' => 'Das Feld :attribute muss größer als oder gleich :value Kilobytes sein.',
        'numeric' => 'Das Feld :attribute muss größer als oder gleich :value sein.',
        'string' => 'Das Feld :attribute muss größer als oder gleich :value Zeichen lang sein.',
    ],
    'hex_color' => 'Das Feld :attribute muss eine gültige hexadezimale Farbe sein.',
    'image' => 'Das Feld :attribute muss ein Bild sein.',
    'in' => 'Das ausgewählte :attribute ist ungültig.',
    'in_array' => 'Das Feld :attribute muss in :other existieren.',
    'integer' => 'Das Feld :attribute muss eine ganze Zahl sein.',
    'ip' => 'Das Feld :attribute muss eine gültige IP-Adresse sein.',
    'ipv4' => 'Das Feld :attribute muss eine gültige IPv4-Adresse sein.',
    'ipv6' => 'Das Feld :attribute muss eine gültige IPv6-Adresse sein.',
    'json' => 'Das Feld :attribute muss eine gültige JSON-Zeichenkette sein.',
    'list' => 'Das Feld :attribute muss eine Liste sein.',
    'lowercase' => 'Das Feld :attribute muss in Kleinbuchstaben sein.',
    'lt' => [
        'array' => 'Das Feld :attribute muss weniger als :value Elemente haben.',
        'file' => 'Das Feld :attribute muss weniger als :value Kilobytes sein.',
        'numeric' => 'Das Feld :attribute muss kleiner als :value sein.',
        'string' => 'Das Feld :attribute muss weniger als :value Zeichen lang sein.',
    ],
    'lte' => [
        'array' => 'Das Feld :attribute darf nicht mehr als :value Elemente haben.',
        'file' => 'Das Feld :attribute muss kleiner als oder gleich :value Kilobytes sein.',
        'numeric' => 'Das Feld :attribute muss kleiner als oder gleich :value sein.',
        'string' => 'Das Feld :attribute muss kleiner als oder gleich :value Zeichen lang sein.',
    ],
    'mac_address' => 'Das Feld :attribute muss eine gültige MAC-Adresse sein.',
    'max' => [
        'array' => 'Das Feld :attribute darf nicht mehr als :max Elemente haben.',
        'file' => 'Das Feld :attribute darf nicht mehr als :max Kilobytes groß sein.',
        'numeric' => 'Das Feld :attribute darf nicht größer als :max sein.',
        'string' => 'Das Feld :attribute darf nicht mehr als :max Zeichen lang sein.',
    ],
    'max_digits' => 'Das Feld :attribute darf nicht mehr als :max Ziffern haben.',
    'mimes' => 'Das Feld :attribute muss eine Datei vom Typ: :values sein.',
    'mimetypes' => 'Das Feld :attribute muss eine Datei vom Typ: :values sein.',
    'min' => [
        'array' => 'Das Feld :attribute muss mindestens :min Elemente haben.',
        'file' => 'Das Feld :attribute muss mindestens :min Kilobytes groß sein.',
        'numeric' => 'Das Feld :attribute muss mindestens :min sein.',
        'string' => 'Das Feld :attribute muss mindestens :min Zeichen lang sein.',
    ],
    'min_digits' => 'Das Feld :attribute muss mindestens :min Ziffern haben.',
    'missing' => 'Das Feld :attribute muss fehlen.',
    'missing_if' => 'Das Feld :attribute muss fehlen, wenn :other :value ist.',
    'missing_unless' => 'Das Feld :attribute muss fehlen, es sei denn, :other ist :value.',
    'missing_with' => 'Das Feld :attribute muss fehlen, wenn :values vorhanden sind.',
    'missing_with_all' => 'Das Feld :attribute muss fehlen, wenn :values vorhanden sind.',
    'multiple_of' => 'Das Feld :attribute muss ein Vielfaches von :value sein.',
    'not_in' => 'Das ausgewählte :attribute ist ungültig.',
    'not_regex' => 'Das Format des Feldes :attribute ist ungültig.',
    'numeric' => 'Das Feld :attribute muss eine Zahl sein.',
    'password' => [
        'letters' => 'Das Feld :attribute muss mindestens einen Buchstaben enthalten.',
        'mixed' => 'Das Feld :attribute muss mindestens einen Großbuchstaben und einen Kleinbuchstaben enthalten.',
        'numbers' => 'Das Feld :attribute muss mindestens eine Zahl enthalten.',
        'symbols' => 'Das Feld :attribute muss mindestens ein Symbol enthalten.',
        'uncompromised' => 'Das angegebene :attribute ist in einem Datenleck aufgetaucht. Bitte wählen Sie ein anderes :attribute.',
    ],
    'present' => 'Das Feld :attribute muss vorhanden sein.',
    'present_if' => 'Das Feld :attribute muss vorhanden sein, wenn :other :value ist.',
    'present_unless' => 'Das Feld :attribute muss vorhanden sein, es sei denn, :other ist :value.',
    'present_with' => 'Das Feld :attribute muss vorhanden sein, wenn :values vorhanden sind.',
    'present_with_all' => 'Das Feld :attribute muss vorhanden sein, wenn :values vorhanden sind.',
    'prohibited' => 'Das Feld :attribute ist verboten.',
    'prohibited_if' => 'Das Feld :attribute ist verboten, wenn :other :value ist.',
    'prohibited_unless' => 'Das Feld :attribute ist verboten, es sei denn, :other ist in :values.',
    'prohibits' => 'Das Feld :attribute verbietet, dass :other vorhanden ist.',
    'regex' => 'Das Format des Feldes :attribute ist ungültig.',
    'required' => 'Das Feld :attribute ist erforderlich.',
    'required_array_keys' => 'Das Feld :attribute muss Einträge für :values enthalten.',
    'required_if' => 'Das Feld :attribute ist erforderlich, wenn :other :value ist.',
    'required_if_accepted' => 'Das Feld :attribute ist erforderlich, wenn :other akzeptiert wird.',
    'required_if_declined' => 'Das Feld :attribute ist erforderlich, wenn :other abgelehnt wird.',
    'required_unless' => 'Das Feld :attribute ist erforderlich, es sei denn, :other ist in :values.',
    'required_with' => 'Das Feld :attribute ist erforderlich, wenn :values vorhanden sind.',
    'required_with_all' => 'Das Feld :attribute ist erforderlich, wenn :values vorhanden sind.',
    'required_without' => 'Das Feld :attribute ist erforderlich, wenn :values nicht vorhanden sind.',
    'required_without_all' => 'Das Feld :attribute ist erforderlich, wenn keine der :values vorhanden sind.',
    'same' => 'Das Feld :attribute muss mit :other übereinstimmen.',
    'size' => [
        'array' => 'Das Feld :attribute muss :size Elemente enthalten.',
        'file' => 'Das Feld :attribute muss :size Kilobytes groß sein.',
        'numeric' => 'Das Feld :attribute muss :size sein.',
        'string' => 'Das Feld :attribute muss :size Zeichen lang sein.',
    ],
    'starts_with' => 'Das Feld :attribute muss mit einem der folgenden Werte beginnen: :values.',
    'string' => 'Das Feld :attribute muss eine Zeichenkette sein.',
    'timezone' => 'Das Feld :attribute muss eine gültige Zeitzone sein.',
    'unique' => 'Das :attribute wurde bereits vergeben.',
    'uploaded' => 'Das :attribute konnte nicht hochgeladen werden.',
    'uppercase' => 'Das Feld :attribute muss in Großbuchstaben sein.',
    'url' => 'Das Feld :attribute muss eine gültige URL sein.',
    'ulid' => 'Das Feld :attribute muss eine gültige ULID sein.',
    'uuid' => 'Das Feld :attribute muss eine gültige UUID sein.',
    'custom' => [
        'attribute-name' => [
            'rule-name' => 'custom-message',
        ],
    ],
    'attributes' => [],
];
</file>

<file path="lang/de/welcome.php">
<?php
return [
    'vote_now' => 'Jetzt abstimmen',
    'key' => 'Schlüssel'
];
</file>

<file path="lang/en/admin.php">
<?php
return [
    'admin_panel' => 'Admin Panel',
    'users' => 'Users',
    'invite_tokens' => 'Invite Tokens',
    'created_days_ago' => 'Created :days days ago',
    'created_at' => 'Created :date',
    'created_month_ago' => 'Created :count month ago',
    'created_months_ago' => 'Created :count months ago',
    'users_management' => 'User Management',
    'password_changed_weeks_ago' => 'Password changed :count weeks ago',
    'password_changed_week_ago' => 'Password changed a week ago',
    'password_changed_today' => 'Password changed today',
    'admin_tools' => 'Admin Tools',
    'password_changed' => 'Password changed',
    'password_hidden_text' => 'Password hidden',
    'password_security_note' => 'Passwords are stored encrypted for security reasons. Even as an admin, you cannot view the original passwords.',
    'generate_temporary_password' => 'Generate temporary password',
    'temporary_password_generated' => 'Temporary password generated',
    'temporary_password_for_user' => 'Temporary password for :name',
    'temporary_password_notice' => 'Please share this password securely with the user. The password will only be displayed once.',
    'temporary_password_one_time_use' => 'Important: This is a one-time temporary password. The user should change it after the first successful login.',
    // Invite token management
    'create_new_token' => 'Create New Token',
    'revoke_token' => 'Revoke Token',
    'token_created_successfully' => 'Invite token created successfully',
    'token_revoked_successfully' => 'Invite token revoked successfully',
    'no_tokens_available' => 'No invite tokens available'
];
</file>

<file path="lang/en/surveys.php">
<?php
return [
    'create_new_survey' => 'Create New Survey',
    'select_school_year' => 'Select School Year',
    'select_school_year_placeholder' => 'Choose a school year...',
    'select_department' => 'Select Department',
    'select_department_placeholder' => 'Choose a department...',
    'select_grade_level' => 'Select Grade Level',
    'select_grade_level_placeholder' => 'Choose a grade level...',
    'select_class' => 'Select Class',
    'select_class_placeholder' => 'Choose a class...',
    'select_subject' => 'Select Subject',
    'select_subject_placeholder' => 'Choose a subject...',
    'response_limit' => 'Response Limit',
    'response_limit_help' => 'Set to -1 for unlimited responses',
    'expire_date' => 'Expiration Date',
    'create_survey' => 'Create Survey',
    'created_successfully' => 'Survey created successfully',
    'creation_failed' => 'Failed to create survey',
    'select_template_first' => 'Please select a template first to create a survey',
    'template_not_found' => 'The selected template was not found',
    // Template information
    'template_information' => 'Template Information',
    'template_info_description' => 'This survey will be created using the following template. Questions will be automatically generated from the template.',
    // Questions
    'questions' => 'Questions',
    'add_question' => 'Add Question',
    'question_text' => 'Question Text',
    'question_type' => 'Question Type',
    'select_question_type' => 'Select question type...',
    // Question types
    'question_types' => [
        'range' => 'Range (1-5)',
        'checkboxes' => 'Checkboxes',
        'textarea' => 'Text Area',
    ],
    // Departments
    'departments' => [
        'ait' => 'Applied Information Technology',
        'it' => 'Information Technology',
        'et' => 'Electronics Technology',
        'mb' => 'Mechanical Engineering',
    ],
    // Subjects
    'subjects' => [
        'math' => 'Mathematics',
        'english' => 'English',
        'science' => 'Science',
        'history' => 'History',
    ],
    // Survey management
    'surveys' => 'Surveys',
    'expired' => 'Expired',
    'running' => 'Running',
    'cancelled' => 'Cancelled',
    'edit_survey' => 'Edit Survey',
    'back_to_surveys' => 'Back to Surveys',
    'save_changes' => 'Save Changes',
    'updated_successfully' => 'Survey updated successfully',
    'update_failed' => 'Failed to update survey',
    'survey_status' => 'Survey Status',
    'access_key' => 'Access Key',
    'responses' => 'Responses',
    'created_at' => 'Created At',
    'updated_at' => 'Updated At',
    'view_details' => 'View Details',
    'edit' => 'Edit',
    // Survey response
    'survey' => 'Survey',
    'access_survey' => 'Access Survey',
    'enter_access_key_hint' => 'Enter the 8-character access key provided by your teacher',
    'invalid_access_key' => 'Invalid access key. Please check and try again.',
    'survey_not_available' => 'This survey is no longer available. It may have expired or reached its response limit.',
    'submit_response' => 'Submit Response',
    'response_submitted' => 'Your response has been submitted successfully.',
    'submission_failed' => 'Failed to submit your response.',
    'thank_you' => 'Thank You!',
    'response_received' => 'Your response has been received. Thank you for your feedback.',
    'access_another_survey' => 'Access Another Survey',
    'whoops' => 'Whoops! Something went wrong.',
    // Survey response options
    'strongly_agree' => 'Strongly Agree',
    'agree' => 'Agree',
    'disagree' => 'Disagree',
    'strongly_disagree' => 'Strongly Disagree',
    'subject' => 'Subject',
    'grade_level' => 'Grade Level',
    'class' => 'Class',
    // QR Code
    'show_qr' => 'Show QR',
    'qr_code_title' => 'Survey QR Code',
    'scan_to_access' => 'Scan this QR code to access the survey',
    'close' => 'Close',
    'qr_code_error' => 'Failed to generate QR code. Please try again.',
    // Smiley template
    'smiley' => [
        'positive' => 'What did you like?',
        'negative' => 'What could be improved?',
        'button' => 'Submit Feedback'
    ],
];
</file>

<file path="lang/en/templates.php">
<?php
return [
    'templates' => 'Templates',
    'template_gallery' => 'Template Gallery',
    'featured' => 'Featured',
    'use_template' => 'Use this template',
    // Template types
    'target_feedback' => 'Target Feedback',
    'table_feedback' => 'Table Feedback',
    'smiley_feedback' => 'Smiley Feedback',
    'checkbox_feedback' => 'Checkbox Feedback',
    // Template descriptions
    'target_feedback_description' => 'Visual target-based feedback for evaluating different aspects of teaching.',
    'table_feedback_description' => 'Structured table-based feedback with multiple categories.',
    'smiley_feedback_description' => 'Simple feedback with positive and negative comments.',
    'checkbox_feedback_description' => 'Checkbox-based feedback for multiple choice evaluations.',
];
</file>

<file path="public/.htaccess">
<IfModule mod_rewrite.c>
    <IfModule mod_negotiation.c>
        Options -MultiViews -Indexes
    </IfModule>

    RewriteEngine On

    # Handle Authorization Header
    RewriteCond %{HTTP:Authorization} .
    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

    # Redirect Trailing Slashes If Not A Folder...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_URI} (.+)/$
    RewriteRule ^ %1 [L,R=301]

    # Send Requests To Front Controller...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.php [L]
</IfModule>
</file>

<file path="public/index.php">
<?php
use Illuminate\Http\Request;
define('LARAVEL_START', microtime(true));
// Determine if the application is in maintenance mode...
if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) {
    require $maintenance;
}
// Register the Composer autoloader...
require __DIR__.'/../vendor/autoload.php';
// Bootstrap Laravel and handle the request...
(require_once __DIR__.'/../bootstrap/app.php')
    ->handleRequest(Request::capture());
</file>

<file path="public/robots.txt">
User-agent: *
Disallow:
</file>

<file path="resources/css/app.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
</file>

<file path="resources/css/surveys-page.css">
.filter-button {
  padding: 1px 15px;
  border-radius: 10px;
}
.filter-button.active{
  background: rgb(18, 83, 188);
  border: 1px solid black;
  color: white;
}
</file>

<file path="resources/js/app.js">
import './bootstrap';
import Alpine from 'alpinejs';
import QRCode from 'qrcode';
// Make QRCode globally available and add error handling
window.QRCode = QRCode;
console.log('QRCode library loaded:', window.QRCode ? 'Yes' : 'No');
// Only initialize Alpine if it hasn't been initialized yet
if (!window.Alpine) {
    window.Alpine = Alpine;
    Alpine.start();
    console.log('Alpine initialized');
}
</file>

<file path="resources/js/bootstrap.js">
import axios from 'axios';
window.axios = axios;
window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
</file>

<file path="resources/js/survey-filter.js">
const surveyButtons = document.querySelectorAll('[id^="surveys-filter-"]');
function watchSurveys() {
  surveyButtons.forEach(button => {
    button.addEventListener('click', () => {
      button.classList.toggle('active');
      filterSurveys();
    });
  });
}
function filterSurveys() {
  let activeFilters = [];
  let surveys = document.querySelectorAll('.survey-wrapper');
  surveyButtons.forEach(button => {
    if (button.classList.contains('active')) {
      activeFilters.push(button.getAttribute('filter-type'));
    }
  });
  surveys.forEach(survey => survey.classList.add('hidden'));
  if (activeFilters.length > 0) {
    activeFilters.forEach(activeFilter => displaySurveys(activeFilter));
  }
  else {
    displaySurveys(null);
  }
}
function displaySurveys(activeFilter) {
  let surveys = document.querySelectorAll('.survey-wrapper');
  surveys.forEach(survey => {
    if (activeFilter == null) {
      survey.classList.remove('hidden');
    }
    if (survey.getAttribute('filter-type') === activeFilter) {
      survey.classList.remove('hidden');
    }
  });
}
watchSurveys();
</file>

<file path="resources/views/auth/verify.blade.php">
<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600 dark:text-gray-400">
        {{ __('Thanks for signing up! Before getting started, could you verify your email address by clicking on the link we just emailed to you? If you didn\'t receive the email, we will gladly send you another.') }}
    </div>
    @if (session('status') === 'verification-link-sent')
        <div class="mb-4 font-medium text-sm text-green-600 dark:text-green-400">
            {{ __('A new verification link has been sent to the email address you provided during registration.') }}
        </div>
    @endif
    <div class="mt-4 flex items-center justify-between">
        <form method="POST" action="{{ route('verification.send') }}">
            @csrf
            <div>
                <x-primary-button>
                    {{ __('Resend Verification Email') }}
                </x-primary-button>
            </div>
        </form>
        <form method="POST" action="{{ route('logout') }}">
            @csrf
            <button type="submit" class="underline text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800">
                {{ __('Log Out') }}
            </button>
        </form>
    </div>
</x-guest-layout>
</file>

<file path="resources/views/components/action-message.blade.php">
@props(['on'])
<div x-data="{ shown: false, timeout: null }"
     x-init="@this.on('{{ $on }}', () => { clearTimeout(timeout); shown = true; timeout = setTimeout(() => { shown = false }, 2000); })"
     x-show.transition.out.opacity.duration.1500ms="shown"
     x-transition:leave.opacity.duration.1500ms
     style="display: none;"
    {{ $attributes->merge(['class' => 'text-sm text-gray-600 dark:text-gray-400']) }}>
    {{ $slot->isEmpty() ? __('Saved.') : $slot }}
</div>
</file>

<file path="resources/views/components/application-logo.blade.php">
<svg viewBox="0 0 316 316" xmlns="http://www.w3.org/2000/svg" {{ $attributes }}>
    <path d="M305.8 81.125C305.77 80.995 305.69 80.885 305.65 80.755C305.56 80.525 305.49 80.285 305.37 80.075C305.29 79.935 305.17 79.815 305.07 79.685C304.94 79.515 304.83 79.325 304.68 79.175C304.55 79.045 304.39 78.955 304.25 78.845C304.09 78.715 303.95 78.575 303.77 78.475L251.32 48.275C249.97 47.495 248.31 47.495 246.96 48.275L194.51 78.475C194.33 78.575 194.19 78.725 194.03 78.845C193.89 78.955 193.73 79.045 193.6 79.175C193.45 79.325 193.34 79.515 193.21 79.685C193.11 79.815 192.99 79.935 192.91 80.075C192.79 80.285 192.71 80.525 192.63 80.755C192.58 80.875 192.51 80.995 192.48 81.125C192.38 81.495 192.33 81.875 192.33 82.265V139.625L148.62 164.795V52.575C148.62 52.185 148.57 51.805 148.47 51.435C148.44 51.305 148.36 51.195 148.32 51.065C148.23 50.835 148.16 50.595 148.04 50.385C147.96 50.245 147.84 50.125 147.74 49.995C147.61 49.825 147.5 49.635 147.35 49.485C147.22 49.355 147.06 49.265 146.92 49.155C146.76 49.025 146.62 48.885 146.44 48.785L93.99 18.585C92.64 17.805 90.98 17.805 89.63 18.585L37.18 48.785C37 48.885 36.86 49.035 36.7 49.155C36.56 49.265 36.4 49.355 36.27 49.485C36.12 49.635 36.01 49.825 35.88 49.995C35.78 50.125 35.66 50.245 35.58 50.385C35.46 50.595 35.38 50.835 35.3 51.065C35.25 51.185 35.18 51.305 35.15 51.435C35.05 51.805 35 52.185 35 52.575V232.235C35 233.795 35.84 235.245 37.19 236.025L142.1 296.425C142.33 296.555 142.58 296.635 142.82 296.725C142.93 296.765 143.04 296.835 143.16 296.865C143.53 296.965 143.9 297.015 144.28 297.015C144.66 297.015 145.03 296.965 145.4 296.865C145.5 296.835 145.59 296.775 145.69 296.745C145.95 296.655 146.21 296.565 146.45 296.435L251.36 236.035C252.72 235.255 253.55 233.815 253.55 232.245V174.885L303.81 145.945C305.17 145.165 306 143.725 306 142.155V82.265C305.95 81.875 305.89 81.495 305.8 81.125ZM144.2 227.205L100.57 202.515L146.39 176.135L196.66 147.195L240.33 172.335L208.29 190.625L144.2 227.205ZM244.75 114.995V164.795L226.39 154.225L201.03 139.625V89.825L219.39 100.395L244.75 114.995ZM249.12 57.105L292.81 82.265L249.12 107.425L205.43 82.265L249.12 57.105ZM114.49 184.425L96.13 194.995V85.305L121.49 70.705L139.85 60.135V169.815L114.49 184.425ZM91.76 27.425L135.45 52.585L91.76 77.745L48.07 52.585L91.76 27.425ZM43.67 60.135L62.03 70.705L87.39 85.305V202.545V202.555V202.565C87.39 202.735 87.44 202.895 87.46 203.055C87.49 203.265 87.49 203.485 87.55 203.695V203.705C87.6 203.875 87.69 204.035 87.76 204.195C87.84 204.375 87.89 204.575 87.99 204.745C87.99 204.745 87.99 204.755 88 204.755C88.09 204.905 88.22 205.035 88.33 205.175C88.45 205.335 88.55 205.495 88.69 205.635L88.7 205.645C88.82 205.765 88.98 205.855 89.12 205.965C89.28 206.085 89.42 206.225 89.59 206.325C89.6 206.325 89.6 206.325 89.61 206.335C89.62 206.335 89.62 206.345 89.63 206.345L139.87 234.775V285.065L43.67 229.705V60.135ZM244.75 229.705L148.58 285.075V234.775L219.8 194.115L244.75 179.875V229.705ZM297.2 139.625L253.49 164.795V114.995L278.85 100.395L297.21 89.825V139.625H297.2Z"/>
</svg>
</file>

<file path="resources/views/components/auth-session-status.blade.php">
@props(['status'])
@if ($status)
    <div {{ $attributes->merge(['class' => 'font-medium text-sm text-green-600 dark:text-green-400']) }}>
        {{ $status }}
    </div>
@endif
</file>

<file path="resources/views/components/chip.blade.php">
<x-secondary-button
    {{$attributes->merge([])}}
    @class([
        'bg-indigo-100' => $attributes->get('chip-checked') === 'true',
        'dark:bg-indigo-900' => $attributes->get('chip-checked') === 'true',
        '!py-1'
    ])
>
    @if ($attributes->get('chip-checked') === 'true')
        <x-fas-check class="w-3 h-3 mr-2" />
    @endif
    {{ $slot }}
</x-secondary-button>
</file>

<file path="resources/views/components/danger-button.blade.php">
<button {{ $attributes->merge(['type' => 'submit', 'class' => 'inline-flex items-center px-4 py-2 bg-red-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-red-500 active:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>
</file>

<file path="resources/views/components/dropdown-link.blade.php">
<a {{ $attributes->merge(['class' => 'block w-full px-4 py-2 text-start text-sm leading-5 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:bg-gray-100 dark:focus:bg-gray-800 transition duration-150 ease-in-out']) }}>{{ $slot }}</a>
</file>

<file path="resources/views/components/dropdown.blade.php">
@props(['align' => 'right', 'width' => '48', 'contentClasses' => 'py-1 bg-white dark:bg-gray-700'])
@php
$alignmentClasses = match ($align) {
    'left' => 'ltr:origin-top-left rtl:origin-top-right start-0',
    'top' => 'origin-top',
    default => 'ltr:origin-top-right rtl:origin-top-left end-0',
};
$width = match ($width) {
    '48' => 'w-48',
    default => $width,
};
@endphp
<div class="relative" x-data="{ open: false }" @click.outside="open = false" @close.stop="open = false">
    <div @click="open = ! open">
        {{ $trigger }}
    </div>
    <div x-show="open"
            x-transition:enter="transition ease-out duration-200"
            x-transition:enter-start="opacity-0 scale-95"
            x-transition:enter-end="opacity-100 scale-100"
            x-transition:leave="transition ease-in duration-75"
            x-transition:leave-start="opacity-100 scale-100"
            x-transition:leave-end="opacity-0 scale-95"
            class="absolute z-50 mt-2 {{ $width }} rounded-md shadow-lg {{ $alignmentClasses }}"
            style="display: none;"
            @click="open = false">
        <div class="rounded-md ring-1 ring-black ring-opacity-5 {{ $contentClasses }}">
            {{ $content }}
        </div>
    </div>
</div>
</file>

<file path="resources/views/components/footer.blade.php">
<footer class="p-3">
    <span class="text-gray-700 dark:text-gray-500">&copy; {{ date('Y') }} {{ config('app.name', 'Laravel') }}. Alle Rechte vorbehalten.</span>
</footer>
</file>

<file path="resources/views/components/input-error.blade.php">
@props(['messages'])
@if ($messages)
    <ul {{ $attributes->merge(['class' => 'text-sm text-red-600 dark:text-red-400 space-y-1']) }}>
        @foreach ((array) $messages as $message)
            <li>{{ $message }}</li>
        @endforeach
    </ul>
@endif
</file>

<file path="resources/views/components/input-label.blade.php">
@props(['value'])
<label {{ $attributes->merge(['class' => 'block font-medium text-sm text-gray-700 dark:text-gray-300']) }}>
    {{ $value ?? $slot }}
</label>
</file>

<file path="resources/views/components/modal.blade.php">
@props([
    'name',
    'show' => false,
    'maxWidth' => '2xl'
])
@php
$maxWidth = [
    'sm' => 'sm:max-w-sm',
    'md' => 'sm:max-w-md',
    'lg' => 'sm:max-w-lg',
    'xl' => 'sm:max-w-xl',
    '2xl' => 'sm:max-w-2xl',
][$maxWidth];
@endphp
<div
    x-data="{
        show: @js($show),
        focusables() {
            // All focusable element types...
            let selector = 'a, button, input:not([type=\'hidden\']), textarea, select, details, [tabindex]:not([tabindex=\'-1\'])'
            return [...$el.querySelectorAll(selector)]
                // All non-disabled elements...
                .filter(el => ! el.hasAttribute('disabled'))
        },
        firstFocusable() { return this.focusables()[0] },
        lastFocusable() { return this.focusables().slice(-1)[0] },
        nextFocusable() { return this.focusables()[this.nextFocusableIndex()] || this.firstFocusable() },
        prevFocusable() { return this.focusables()[this.prevFocusableIndex()] || this.lastFocusable() },
        nextFocusableIndex() { return (this.focusables().indexOf(document.activeElement) + 1) % (this.focusables().length + 1) },
        prevFocusableIndex() { return Math.max(0, this.focusables().indexOf(document.activeElement)) -1 },
    }"
    x-init="$watch('show', value => {
        if (value) {
            document.body.classList.add('overflow-y-hidden');
            {{ $attributes->has('focusable') ? 'setTimeout(() => firstFocusable().focus(), 100)' : '' }}
        } else {
            document.body.classList.remove('overflow-y-hidden');
        }
    })"
    x-on:open-modal.window="$event.detail == '{{ $name }}' ? show = true : null"
    x-on:close-modal.window="$event.detail == '{{ $name }}' ? show = false : null"
    x-on:close.stop="show = false"
    x-on:keydown.escape.window="show = false"
    x-on:keydown.tab.prevent="$event.shiftKey || nextFocusable().focus()"
    x-on:keydown.shift.tab.prevent="prevFocusable().focus()"
    x-show="show"
    class="fixed inset-0 overflow-y-auto px-4 py-6 sm:px-0 z-50"
    style="display: {{ $show ? 'block' : 'none' }};"
>
    <div
        x-show="show"
        class="fixed inset-0 transform transition-all"
        x-on:click="show = false"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
    >
        <div class="absolute inset-0 bg-gray-500 dark:bg-gray-900 opacity-75"></div>
    </div>
    <div
        x-show="show"
        class="mb-6 bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-xl transform transition-all sm:w-full {{ $maxWidth }} sm:mx-auto"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
        x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
    >
        {{ $slot }}
    </div>
</div>
</file>

<file path="resources/views/components/nav-link.blade.php">
@props(['active'])
@php
$classes = ($active ?? false)
            ? 'inline-flex items-center px-1 pt-1 border-b-2 border-indigo-400 dark:border-indigo-600 text-sm font-medium leading-5 text-gray-900 dark:text-gray-100 focus:outline-none focus:border-indigo-700 transition duration-150 ease-in-out'
            : 'inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium leading-5 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-700 focus:outline-none focus:text-gray-700 dark:focus:text-gray-300 focus:border-gray-300 dark:focus:border-gray-700 transition duration-150 ease-in-out';
@endphp
<a {{ $attributes->merge(['class' => $classes]) }}>
    {{ $slot }}
</a>
</file>

<file path="resources/views/components/primary-button.blade.php">
<button {{ $attributes->merge(['type' => 'submit', 'class' => 'inline-flex items-center px-4 py-2 bg-gray-800 dark:bg-gray-200 border border-transparent rounded-md font-semibold text-xs text-white dark:text-gray-800 uppercase tracking-widest hover:bg-gray-700 dark:hover:bg-white focus:bg-gray-700 dark:focus:bg-white active:bg-gray-900 dark:active:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition ease-in-out duration-150 disabled:bg-gray-600']) }}>
    {{ $slot }}
</button>
</file>

<file path="resources/views/components/responsive-nav-link.blade.php">
@props(['active'])
@php
$classes = ($active ?? false)
            ? 'block w-full ps-3 pe-4 py-2 border-l-4 border-indigo-400 dark:border-indigo-600 text-start text-base font-medium text-indigo-700 dark:text-indigo-300 bg-indigo-50 dark:bg-indigo-900/50 focus:outline-none focus:text-indigo-800 dark:focus:text-indigo-200 focus:bg-indigo-100 dark:focus:bg-indigo-900 focus:border-indigo-700 dark:focus:border-indigo-300 transition duration-150 ease-in-out'
            : 'block w-full ps-3 pe-4 py-2 border-l-4 border-transparent text-start text-base font-medium text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700 hover:border-gray-300 dark:hover:border-gray-600 focus:outline-none focus:text-gray-800 dark:focus:text-gray-200 focus:bg-gray-50 dark:focus:bg-gray-700 focus:border-gray-300 dark:focus:border-gray-600 transition duration-150 ease-in-out';
@endphp
<a {{ $attributes->merge(['class' => $classes]) }}>
    {{ $slot }}
</a>
</file>

<file path="resources/views/components/secondary-button.blade.php">
<button {{ $attributes->merge(['type' => 'button', 'class' => 'inline-flex items-center px-4 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-500 rounded-md font-semibold text-xs text-gray-700 dark:text-gray-300 uppercase tracking-widest shadow-sm hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-25 transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>
</file>

<file path="resources/views/components/text-input.blade.php">
@props(['disabled' => false])
<input @disabled($disabled) {{ $attributes->merge(['class' => 'border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-indigo-500 dark:focus:border-indigo-600 focus:ring-indigo-500 dark:focus:ring-indigo-600 rounded-md shadow-sm']) }}>
</file>

<file path="resources/views/layouts/app.blade.php">
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta name="csrf-token" content="{{ csrf_token() }}">
        <title>{{ config('app.name', 'Laravel') }}</title>
        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.bunny.net">
        <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />
        <!-- Alpine.js Style for x-cloak -->
        <style>
            [x-cloak] { display: none !important; }
        </style>
        <!-- Scripts -->
        @vite(['resources/css/app.css'])
        @vite(['resources/css/surveys-page.css'])
        @livewireStyles
    </head>
    <body class="font-sans antialiased">
        <div class="min-h-dvh bg-gray-100 dark:bg-gray-900">
            <livewire:layout.navigation />
            <!-- Page Heading -->
            @if (isset($header))
                <header class="bg-white dark:bg-gray-800 shadow">
                    <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
                        {{ $header }}
                    </div>
                </header>
            @endif
            <!-- Page Content -->
            <main>
                {{ $slot }}
            </main>
        </div>
        @livewireScripts
        @vite(['resources/js/app.js'])
        @vite(['resources/js/survey-filter.js'])
        @stack('scripts')
    </body>
</html>
</file>

<file path="resources/views/layouts/guest.blade.php">
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head style="padding: 5px 5%; border-block-end: 1px solid black;">
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta name="csrf-token" content="{{ csrf_token() }}">
        <title>{{ config('app.name', 'Laravel') }}</title>
        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.bunny.net">
        <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />
        <!-- Scripts -->
        @vite(['resources/css/app.css', 'resources/js/app.js'])
    </head>
    <body class="font-sans text-gray-900 antialiased min-h-dvh">
        <div class="min-h-dvh pt-6 sm:pt-0 bg-gray-100 dark:bg-gray-900 h-full flex flex-col justify-between items-center">
            <div class="flex flex-col items-center justify-center m-auto gap-4">
                <a href="/" class="w-20 h-20">
                    <x-application-logo class="w-full fill-current text-gray-500" style="margin-inline: auto;height: 100%;width: fit-content;" />
                </a>
                <div class="w-full sm:max-w-3xl px-6 py-4 bg-white dark:bg-gray-800 shadow-md overflow-hidden sm:rounded-lg">
                    {{ $slot }}
                </div>
            </div>
            <x-footer />
        </div>
    </body>
</html>
</file>

<file path="resources/views/layouts/survey.blade.php">
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta name="csrf-token" content="{{ csrf_token() }}">
        <title>{{ config('app.name', 'Laravel') }}</title>
        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.bunny.net">
        <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />
        <!-- Scripts -->
        @vite(['resources/css/app.css'])
        @livewireStyles
    </head>
    <body class="font-sans antialiased">
        <div class="min-h-dvh bg-gray-100 dark:bg-gray-900">
            <!-- Simple Navigation for Survey Responses -->
            <nav class="bg-white dark:bg-gray-800 border-b border-gray-100 dark:border-gray-700">
                <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                    <div class="flex justify-between h-16">
                        <div class="flex">
                            <!-- Logo -->
                            <div class="shrink-0 flex items-center">
                                <a href="/">
                                    <x-application-logo class="block h-9 w-auto fill-current text-gray-800 dark:text-gray-200" />
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </nav>
            <!-- Page Content -->
            <main>
                {{ $slot }}
            </main>
        </div>
        @livewireScripts
        @vite(['resources/js/app.js'])
        @stack('scripts')
    </body>
</html>
</file>

<file path="resources/views/livewire/admin/panel.blade.php">
<div class="flex flex-col gap-2 p-20">
    <!-- Header -->
    <h1 class="text-2xl font-bold text-gray-700 dark:text-gray-200 px-2">
        {{ __('admin.admin_panel') }}
    </h1>
    <div class="bg-gray-50 dark:bg-gray-800 flex flex-col gap-10 p-10">
        <!-- Users Section -->
        <section>
            <h2 class="text-xl font-bold mb-4 text-gray-700 dark:text-gray-200">{{ __('admin.users') }}</h2>
            <div class="relative group" x-data="{
                scroll: 0,
                maxScroll: 0,
                updateScroll() {
                    this.scroll = $refs.scrollContainer.scrollLeft;
                    this.maxScroll = $refs.scrollContainer.scrollWidth - $refs.scrollContainer.clientWidth;
                }
            }" x-init="updateScroll()">
                <!-- Left scroll button -->
                <button
                    class="absolute left-0 top-1/2 -translate-y-1/2 -translate-x-4 p-2 rounded-full bg-white dark:bg-gray-700 shadow-md hover:bg-gray-50 dark:hover:bg-gray-600 transition-all opacity-0 group-hover:opacity-100 group-hover:translate-x-0 disabled:opacity-0"
                    @click="$refs.scrollContainer.scrollBy({ left: -300, behavior: 'smooth' }); setTimeout(() => updateScroll(), 500)"
                    x-show="scroll > 0"
                >
                    <x-fas-chevron-left class="w-4 h-4 text-gray-400" />
                </button>
                <!-- Right scroll button -->
                <button
                    class="absolute right-0 top-1/2 -translate-y-1/2 translate-x-4 p-2 rounded-full bg-white dark:bg-gray-700 shadow-md hover:bg-gray-50 dark:hover:bg-gray-600 transition-all opacity-0 group-hover:opacity-100 group-hover:translate-x-0 disabled:opacity-0"
                    @click="$refs.scrollContainer.scrollBy({ left: 300, behavior: 'smooth' }); setTimeout(() => updateScroll(), 500)"
                    x-show="scroll < maxScroll"
                >
                    <x-fas-chevron-right class="w-4 h-4 text-gray-400" />
                </button>
                <div
                    class="flex gap-6 overflow-x-auto pb-4 scroll-smooth [&::-webkit-scrollbar]:h-1.5
                           [&::-webkit-scrollbar-track]:rounded-full [&::-webkit-scrollbar-track]:bg-gray-200
                           [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-thumb]:bg-gray-400
                           dark:[&::-webkit-scrollbar-track]:bg-gray-700 dark:[&::-webkit-scrollbar-thumb]:bg-gray-500"
                    x-ref="scrollContainer"
                    @scroll.throttle="updateScroll()"
                >
                    @foreach($users as $user)
                        <div class="flex-none">
                            <div class="flex flex-col items-center gap-2">
                                <div class="w-16 h-16 rounded-full bg-white dark:bg-gray-700 flex items-center justify-center shadow-sm">
                                    <x-fas-user class="w-8 h-8 text-gray-400 dark:text-gray-500" />
                                </div>
                                <span class="text-sm text-gray-600 dark:text-gray-400">{{ $user->name }}</span>
                                <span class="text-sm text-gray-500 dark:text-gray-400">{{ $user->email }}</span>
                            </div>
                        </div>
                    @endforeach
                </div>
            </div>
        </section>
        <!-- Invite Tokens Section -->
        <section class="mt-8">
            <h2 class="text-xl font-bold mb-4 text-gray-700 dark:text-gray-200">{{ __('admin.invite_tokens') }}</h2>
            <!-- Success Message -->
            @if($successMessage)
                <div class="mb-4 p-3 bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-100 rounded-lg relative">
                    {{ $successMessage }}
                    <button wire:click="clearMessage" class="absolute top-3 right-3 text-green-700 dark:text-green-300 hover:text-green-900 dark:hover:text-green-100">
                        <x-fas-times class="w-4 h-4" />
                    </button>
                </div>
            @endif
            <!-- Create Token Button -->
            <div class="mb-4">
                <button
                    wire:click="createToken"
                    wire:loading.attr="disabled"
                    class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
                >
                    <x-fas-plus class="w-4 h-4" />
                    <span>{{ __('admin.create_new_token') }}</span>
                    <span wire:loading wire:target="createToken" class="ml-2">
                        <svg class="animate-spin h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                    </span>
                </button>
            </div>
            <div class="flex flex-col gap-4">
                @forelse($registerkeys as $registerkey)
                    <div class="flex items-center justify-between p-4 hover:bg-white dark:hover:bg-gray-700 rounded-lg transition-colors"
                         x-data="{ showToken: false, showOptions: false }">
                        <div class="flex flex-col gap-1">
                            <div class="flex items-center gap-2">
                                <div class="font-mono text-gray-700 dark:text-gray-300 w-36 flex justify-end">
                                    <span x-show="!showToken">••••••••••</span>
                                    <span x-show="showToken" x-cloak>{{ $registerkey->code }}</span>
                                </div>
                                <div class="w-8 h-8 flex items-center justify-center">
                                    <button class="p-1 hover:bg-gray-100 dark:hover:bg-gray-600 rounded-full transition-colors"
                                            @click="showToken = !showToken">
                                        <x-fas-eye x-show="!showToken" class="w-4 h-4 text-gray-400 dark:text-gray-500" />
                                        <x-fas-eye-slash x-show="showToken" x-cloak class="w-4 h-4 text-gray-400 dark:text-gray-500" />
                                    </button>
                                </div>
                            </div>
                            <span class="text-sm text-gray-500 dark:text-gray-400">
                                {{ __('admin.created_at', ['date' => $registerkey->created_at->diffForHumans()]) }}
                            </span>
                        </div>
                        <div class="relative">
                            <button @click="showOptions = !showOptions" class="p-2 hover:bg-gray-100 dark:hover:bg-gray-600 rounded">
                                <x-fas-ellipsis-v class="w-4 h-4 text-gray-400 dark:text-gray-500" />
                            </button>
                            <!-- Dropdown Menu -->
                            <div x-show="showOptions"
                                 @click.away="showOptions = false"
                                 x-cloak
                                 class="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-700 shadow-lg rounded-lg py-1 z-10"
                            >
                                <button
                                    wire:click="revokeToken({{ $registerkey->id }})"
                                    wire:loading.attr="disabled"
                                    wire:target="revokeToken({{ $registerkey->id }})"
                                    @click="showOptions = false"
                                    class="w-full text-left px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-gray-100 dark:hover:bg-gray-600 flex items-center gap-2"
                                >
                                    <x-fas-trash-alt class="w-4 h-4" />
                                    <span>{{ __('admin.revoke_token') }}</span>
                                    <span wire:loading wire:target="revokeToken({{ $registerkey->id }})" class="ml-2">
                                        <svg class="animate-spin h-3 w-3 text-red-600 dark:text-red-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                        </svg>
                                    </span>
                                </button>
                            </div>
                        </div>
                    </div>
                @empty
                    <div class="p-4 text-gray-500 dark:text-gray-400 text-center">
                        {{ __('admin.no_tokens_available') }}
                    </div>
                @endforelse
            </div>
        </section>
    </div>
</div>
</file>

<file path="resources/views/livewire/admin/users.blade.php">
@php
    use Carbon\CarbonInterval;
@endphp
<div class="flex flex-col gap-2 p-20">
    <!-- Header with back button -->
    <a href="/admin-panel" class="flex flex-row gap-2 items-center w-fit text-2xl px-2">
        <x-fas-arrow-left class="w-4 h-4 text-gray-500 dark:text-gray-300" />
        <span class="text-gray-500 dark:text-gray-400">{{ __('admin.users_management') }}</span>
    </a>
    <!-- Success message for temporary password -->
    @if(session()->has('temporary_password_success'))
        @php
            $successData = session('temporary_password_success');
        @endphp
        <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative" role="alert">
            <strong class="font-bold">{{ __('admin.temporary_password_generated') }}!</strong>
            <span class="block sm:inline">
                {{ __('admin.temporary_password_for_user', ['name' => $successData['userName']]) }}:
                <span class="font-mono text-green-500 font-bold">{{ $successData['password'] }}</span>.
                {{ __('admin.temporary_password_notice') }}
            </span>
            <p class="mt-2 text-sm font-semibold">{{ __('admin.temporary_password_one_time_use') }}</p>
        </div>
    @endif
    <div class="bg-gray-50 dark:bg-gray-800 flex flex-col gap-6 p-10">
        <!-- Users List -->
        @foreach($users as $user)
            <div class="bg-white dark:bg-gray-700 rounded-lg shadow-sm p-6 flex items-center justify-between gap-4"
                 x-data="{ showPassword: false }">
                <!-- User Info Section -->
                <div class="flex items-center gap-4 flex-grow">
                    <!-- Avatar -->
                    <div class="w-12 h-12 rounded-full bg-gray-100 dark:bg-gray-600 flex items-center justify-center flex-shrink-0 overflow-hidden">
                        <x-fas-user class="w-8 h-8 text-gray-400 dark:text-gray-500 transform scale-75" />
                    </div>
                    <!-- User Details -->
                    <div class="flex flex-col gap-1 min-w-0">
                        <span class="font-bold text-gray-900 dark:text-gray-100">{{ $user->name }}</span>
                        <span class="text-gray-500 dark:text-gray-400 text-ellipsis overflow-hidden">{{ $user->email }}</span>
                        <span class="text-sm text-gray-500 dark:text-gray-400">
                            @php
                                $passwordChanged = Carbon\Carbon::parse($user->updated_at);
                                $passwordChangedDiff = $passwordChanged->diffForHumans();
                            @endphp
                            {{ __('admin.password_changed') }} {{ $passwordChangedDiff }}
                        </span>
                    </div>
                </div>
                <!-- Password Section -->
                <div class="flex items-center gap-2">
                    <div class="relative flex items-center">
                        <div class="font-mono text-gray-700 dark:text-gray-300 w-28 flex justify-end overflow-hidden">
                            @if(session()->has('temporary_password_success') && session('temporary_password_success')['userId'] === $user->id)
                                <span class="text-green-500">{{ session('temporary_password_success')['password'] }}</span>
                            @else
                                <span>••••••••</span>
                            @endif
                        </div>
                        <div class="w-8 h-8 flex items-center justify-center" x-data="{ showTooltip: false }">
                            <button class="p-1 hover:bg-gray-100 dark:hover:bg-gray-600 rounded-full transition-colors relative"
                                    wire:click="generateTemporaryPassword({{ $user->id }})"
                                    @mouseenter="showTooltip = true"
                                    @mouseleave="showTooltip = false">
                                <x-fas-key class="w-4 h-4 text-gray-400 dark:text-gray-500" />
                                <div x-show="showTooltip" x-cloak class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-800 text-white text-xs rounded shadow-lg z-10 w-48">
                                    {{ __('admin.generate_temporary_password') }}
                                </div>
                            </button>
                        </div>
                    </div>
                    <!-- Settings Button -->
                    <button class="p-2 hover:bg-gray-100 dark:hover:bg-gray-600 rounded-full transition-colors">
                        <x-fas-cog class="w-5 h-5 text-gray-400 dark:text-gray-500" />
                    </button>
                </div>
            </div>
        @endforeach
    </div>
</div>
</file>

<file path="resources/views/livewire/layout/navigation.blade.php">
<?php
use App\Livewire\Actions\Logout;
use Livewire\Volt\Component;
new class extends Component
{
    /**
     * Log the current user out of the application.
     */
    public function logout(Logout $logout): void
    {
        $logout();
        $this->redirect('/', navigate: true);
    }
}; ?>
<nav x-data="{ open: false }" class="bg-white dark:bg-gray-800 border-b border-gray-100 dark:border-gray-700">
    <!-- Primary Navigation Menu -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
            <div class="flex">
                <!-- Logo -->
                <div class="shrink-0 flex items-center">
                    <a href="{{ route('dashboard') }}" wire:navigate>
                        <x-application-logo class="block h-9 w-auto fill-current text-gray-800 dark:text-gray-200" />
                    </a>
                </div>
                <!-- Navigation Links -->
                <div class="hidden space-x-8 sm:-my-px sm:ms-10 sm:flex">
                    <x-nav-link :href="route('dashboard')" :active="request()->routeIs('dashboard')" wire:navigate>
                        {{ __('Dashboard') }}
                    </x-nav-link>
                    <x-nav-link :href="route('surveys.list')" :active="request()->routeIs('surveys.list')" wire:navigate>
                        {{ __('surveys.surveys') }}
                    </x-nav-link>
                    <x-nav-link :href="route('templates.list')" :active="request()->routeIs('templates.list')" wire:navigate>
                        {{ __('templates.templates') }}
                    </x-nav-link>
                    @can('admin')
                        <div class="hidden sm:flex sm:items-center sm:ms-6">
                            <x-dropdown>
                                <x-slot name="trigger">
                                    <button
                                        class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-gray-500 dark:text-gray-400 bg-white dark:bg-gray-800 hover:text-gray-700 dark:hover:text-gray-300 focus:outline-none transition ease-in-out duration-150">
                                        <div>{{__('admin.admin_tools')}}</div>
                                        <div class="ms-1">
                                            <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg"
                                                 viewBox="0 0 20 20">
                                                <path fill-rule="evenodd"
                                                      d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                                                      clip-rule="evenodd"/>
                                            </svg>
                                        </div>
                                    </button>
                                </x-slot>
                                <x-slot name="content">
                                    <x-dropdown-link :href="route('admin.panel')" wire:navigate
                                                     :active="request()->routeIs('admin.panel')">
                                        {{ __('admin.admin_panel') }}
                                    </x-dropdown-link>
                                    <x-dropdown-link :href="route('admin.users')" wire:navigate
                                                     :active="request()->routeIs('admin.users')">
                                        {{ __('admin.users') }}
                                    </x-dropdown-link>
                                </x-slot>
                            </x-dropdown>
                        </div>
                    @endcan
                </div>
            </div>
            <!-- Settings Dropdown -->
            <div class="hidden sm:flex sm:items-center sm:ms-6">
                @auth
                    <x-dropdown align="right" width="48">
                        <x-slot name="trigger">
                            <button class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-gray-500 dark:text-gray-400 bg-white dark:bg-gray-800 hover:text-gray-700 dark:hover:text-gray-300 focus:outline-none transition ease-in-out duration-150">
                                <div x-data="{{ json_encode(['name' => auth()->user()->name]) }}" x-text="name" x-on:profile-updated.window="name = $event.detail.name"></div>
                                <div class="ms-1">
                                    <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                    </svg>
                                </div>
                            </button>
                        </x-slot>
                        <x-slot name="content">
                            <x-dropdown-link :href="route('profile')" wire:navigate>
                                {{ __('navigation.profile') }}
                            </x-dropdown-link>
                            <!-- Authentication -->
                            <button wire:click="logout" class="w-full text-start">
                                <x-dropdown-link>
                                    {{ __('navigation.logout') }}
                                </x-dropdown-link>
                            </button>
                        </x-slot>
                    </x-dropdown>
                @else
                    <a href="{{ route('login') }}" class="text-sm text-gray-700 dark:text-gray-300 underline">{{ __('Log in') }}</a>
                    <a href="{{ route('register') }}" class="ml-4 text-sm text-gray-700 dark:text-gray-300 underline">{{ __('Register') }}</a>
                @endauth
            </div>
            <!-- Hamburger -->
            <div class="-me-2 flex items-center sm:hidden">
                <button @click="open = ! open" class="inline-flex items-center justify-center p-2 rounded-md text-gray-400 dark:text-gray-500 hover:text-gray-500 dark:hover:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-900 focus:outline-none focus:bg-gray-100 dark:focus:bg-gray-900 focus:text-gray-500 dark:focus:text-gray-400 transition duration-150 ease-in-out">
                    <svg class="h-6 w-6" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                        <path :class="{'hidden': open, 'inline-flex': ! open }" class="inline-flex" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                        <path :class="{'hidden': ! open, 'inline-flex': open }" class="hidden" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
        </div>
    </div>
    <!-- Responsive Navigation Menu -->
    <div :class="{'block': open, 'hidden': ! open}" class="hidden sm:hidden">
        <div class="pt-2 pb-3 space-y-1">
            <x-responsive-nav-link :href="route('dashboard')" :active="request()->routeIs('dashboard')" wire:navigate>
                {{ __('Dashboard') }}
            </x-responsive-nav-link>
            <x-responsive-nav-link :href="route('surveys.list')" :active="request()->routeIs('surveys.list')" wire:navigate>
                {{ __('surveys.surveys') }}
            </x-responsive-nav-link>
            <x-responsive-nav-link :href="route('templates.list')" :active="request()->routeIs('templates.list')" wire:navigate>
                {{ __('templates.templates') }}
            </x-responsive-nav-link>
            @can('admin')
                <details class="text-gray-800 dark:text-gray-400 [&_summary]:open:bg-gray-50 [&_summary]:dark:open:bg-gray-700 [&_svg]:open:-rotate-180"
                 {{ in_array(request()->route()->getName(), ['admin.panel', 'admin.users']) ? 'open' : '' }}
                >
                    <summary class="list-none flex justify-between items-center px-4 py-2 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700">
                        <div>{{__('admin.admin_tools')}}</div>
                        <x-fas-arrow-down class="w-4 h-4 transition" />
                    </summary>
                    <x-responsive-nav-link :href="route('admin.panel')" wire:navigate :active="request()->routeIs('admin.panel')">
                        {{ __('admin.admin_panel') }}
                    </x-responsive-nav-link>
                    <x-responsive-nav-link :href="route('admin.users')" wire:navigate :active="request()->routeIs('admin.users')">
                        {{ __('admin.users') }}
                    </x-responsive-nav-link>
                </details>
            @endcan
        </div>
        @auth
            <!-- Responsive Settings Options -->
            <div class="pt-4 pb-1 border-t border-gray-200 dark:border-gray-600">
                <div class="px-4">
                    <div class="font-medium text-base text-gray-800 dark:text-gray-200" x-data="{{ json_encode(['name' => auth()->user()->name]) }}" x-text="name" x-on:profile-updated.window="name = $event.detail.name"></div>
                    <div class="font-medium text-sm text-gray-500">{{ auth()->user()->email }}</div>
                </div>
            <div class="mt-3 space-y-1">
                <x-responsive-nav-link :href="route('profile')" wire:navigate>
                    {{ __('navigation.profile') }}
                </x-responsive-nav-link>
                <!-- Authentication -->
                <button wire:click="logout" class="w-full text-start">
                    <x-responsive-nav-link>
                        {{ __('navigation.logout') }}
                    </x-responsive-nav-link>
                    <!-- Authentication -->
                    <button wire:click="logout" class="w-full text-start">
                        <x-responsive-nav-link>
                            {{ __('Log Out') }}
                        </x-responsive-nav-link>
                    </button>
                </div>
            </div>
        @else
            <div class="pt-4 pb-1 border-t border-gray-200 dark:border-gray-600">
                <div class="mt-3 space-y-1">
                    <x-responsive-nav-link :href="route('login')">
                        {{ __('Log in') }}
                    </x-responsive-nav-link>
                    <x-responsive-nav-link :href="route('register')">
                        {{ __('Register') }}
                    </x-responsive-nav-link>
                </div>
            </div>
        @endauth
    </div>
</nav>
</file>

<file path="resources/views/livewire/pages/auth/confirm-password.blade.php">
<?php
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\ValidationException;
use Livewire\Attributes\Layout;
use Livewire\Volt\Component;
new #[Layout('layouts.guest')] class extends Component
{
    public string $password = '';
    /**
     * Confirm the current user's password.
     */
    public function confirmPassword(): void
    {
        $this->validate([
            'password' => ['required', 'string'],
        ]);
        if (! Auth::guard('web')->validate([
            'email' => Auth::user()->email,
            'password' => $this->password,
        ])) {
            throw ValidationException::withMessages([
                'password' => __('auth.password'),
            ]);
        }
        session(['auth.password_confirmed_at' => time()]);
        $this->redirectIntended(default: route('dashboard', absolute: false), navigate: true);
    }
}; ?>
<div>
    <div class="mb-4 text-sm text-gray-600 dark:text-gray-400">
        {{ __('This is a secure area of the application. Please confirm your password before continuing.') }}
    </div>
    <form wire:submit="confirmPassword">
        <!-- Password -->
        <div>
            <x-input-label for="password" :value="__('Password')" />
            <x-text-input wire:model="password"
                          id="password"
                          class="block mt-1 w-full"
                          type="password"
                          name="password"
                          required autocomplete="current-password" />
            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>
        <div class="flex justify-end mt-4">
            <x-primary-button>
                {{ __('Confirm') }}
            </x-primary-button>
        </div>
    </form>
</div>
</file>

<file path="resources/views/livewire/pages/auth/forgot-password.blade.php">
<?php
use Illuminate\Support\Facades\Password;
use Livewire\Attributes\Layout;
use Livewire\Volt\Component;
new #[Layout('layouts.guest')] class extends Component
{
    public string $email = '';
    /**
     * Send a password reset link to the provided email address.
     */
    public function sendPasswordResetLink(): void
    {
        $this->validate([
            'email' => ['required', 'string', 'email'],
        ]);
        // We will send the password reset link to this user. Once we have attempted
        // to send the link, we will examine the response then see the message we
        // need to show to the user. Finally, we'll send out a proper response.
        $status = Password::sendResetLink(
            $this->only('email')
        );
        if ($status != Password::RESET_LINK_SENT) {
            $this->addError('email', __($status));
            return;
        }
        $this->reset('email');
        session()->flash('status', __($status));
    }
}; ?>
<div>
    <div class="mb-4 text-sm text-gray-600 dark:text-gray-400">
        {{ __('Forgot your password? No problem. Just let us know your email address and we will email you a password reset link that will allow you to choose a new one.') }}
    </div>
    <!-- Session Status -->
    <x-auth-session-status class="mb-4" :status="session('status')" />
    <form wire:submit="sendPasswordResetLink">
        <!-- Email Address -->
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input wire:model="email" id="email" class="block mt-1 w-full" type="email" name="email" required autofocus />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>
        <div class="flex items-center justify-end mt-4">
            <x-primary-button>
                {{ __('Email Password Reset Link') }}
            </x-primary-button>
        </div>
    </form>
</div>
</file>

<file path="resources/views/livewire/pages/auth/login.blade.php">
<?php
use App\Livewire\Forms\LoginForm;
use Illuminate\Support\Facades\Session;
use Livewire\Attributes\Layout;
use Livewire\Volt\Component;
new #[Layout('layouts.guest')] class extends Component
{
    public LoginForm $form;
    /**
     * Handle an incoming authentication request.
     */
    public function login(): void
    {
        $this->validate();
        $this->form->authenticate();
        Session::regenerate();
        $this->redirectIntended(default: route('dashboard', absolute: false), navigate: true);
    }
}; ?>
<div>
    <!-- Session Status -->
    <x-auth-session-status class="mb-4" :status="session('status')" />
    <form wire:submit="login">
        <!-- Username -->
        <div>
            <x-input-label for="name" :value="__('login.username')" />
            <x-text-input wire:model="form.name" id="name" class="block mt-1 w-full" type="text" name="name" required autofocus autocomplete="username" />
            <x-input-error :messages="$errors->get('form.name')" class="mt-2" />
        </div>
        <!-- Password -->
        <div class="mt-4">
            <x-input-label for="password" :value="__('register.password')" />
            <x-text-input wire:model="form.password" id="password" class="block mt-1 w-full"
                            type="password"
                            name="password"
                            required autocomplete="current-password" />
            <x-input-error :messages="$errors->get('form.password')" class="mt-2" />
        </div>
        <!-- Remember Me -->
        <div class="mt-4 flex justify-between gap-4 flex-wrap">
            <label for="remember" class="inline-flex items-center">
                <input wire:model="form.remember" id="remember" type="checkbox" class="rounded dark:bg-gray-900 border-gray-300 dark:border-gray-700 text-indigo-600 shadow-sm focus:ring-indigo-500 dark:focus:ring-indigo-600 dark:focus:ring-offset-gray-800" name="remember">
                <span class="ms-2 text-sm text-gray-600 dark:text-gray-400">{{ __('login.keep-logged-in') }}</span>
            </label>
            @if (Route::has('password.request'))
                <a class="underline text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800" href="{{ route('password.request') }}" wire:navigate>
                    {{ __('login.password-forgotten') }}
                </a>
            @endif
        </div>
        <div class="flex items-center justify-between mt-4">
                <a class="underline text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800" href="{{route('register')}}" title="Zur Register Seite">
                    {{ __('login.no-account') }}
                </a>
            <x-primary-button class="ms-3">
                {{ __('login.sign-in') }}
            </x-primary-button>
        </div>
    </form>
</div>
</file>

<file path="resources/views/livewire/pages/auth/register.blade.php">
<?php
use App\Livewire\Forms\RegisterForm;
use App\Models\User;
use Illuminate\Auth\Events\Registered;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules;
use Livewire\Attributes\Layout;
use Livewire\Volt\Component;
new #[Layout('layouts.guest')] class extends Component {
    public string $name = '';
    public string $email = '';
    public string $password = '';
    public string $password_confirmation = '';
    public string $register_key = '';
    public RegisterForm $registerForm;
    /**
     * Handle an incoming registration request.
     */
    public function register(): void
    {
        $validated = $this->validate([
            'name' => ['required', 'string', 'max:255'],
            'email' => ['string', 'lowercase', 'email', 'max:255', 'unique:' . User::class],
            'password' => ['required', 'string', 'confirmed', Rules\Password::defaults()],
            'register_key' => ['required', 'string', 'max:9', 'min:9', 'exists:registerkeys,code', 'regex:/^[A-Z-0-9]{4}-[A-Z-0-9]{4}$/']
        ], [
            'register_key.regex' => __('register.invalid_code_format'),
            'register_key.exists' => __('register.invalid_code'),
        ]);
        $validated['registerkey_id'] = $this->registerForm->getRegisterKey($this->register_key)->id;
        $validated['password'] = Hash::make($validated['password']);
        event(new Registered($user = User::create($validated)));
        Auth::login($user);
        $this->redirect(route('dashboard', absolute: false), navigate: true);
    }
}; ?>
<div>
    <form wire:submit="register">
        <!-- Name -->
        <div>
            <x-input-label for="name" :value="__('register.name')"/>
            <x-text-input wire:model="name" id="name" class="block mt-1 w-full" type="text" name="name" required
                          autofocus autocomplete="name"/>
            <x-input-error :messages="$errors->get('name')" class="mt-2"/>
        </div>
        <!-- Email Address -->
        <div class="mt-4">
            <x-input-label for="email" :value="__('register.email')"/>
            <x-text-input wire:model="email" id="email" class="block mt-1 w-full" type="email" name="email"
                          autocomplete="username"/>
            <x-input-error :messages="$errors->get('email')" class="mt-2"/>
        </div>
        <!-- Password -->
        <div class="mt-4">
            <x-input-label for="password" :value="__('register.password')"/>
            <x-text-input wire:model="password" id="password" class="block mt-1 w-full"
                          type="password"
                          name="password"
                          required autocomplete="new-password"/>
            <x-input-error :messages="$errors->get('password')" class="mt-2"/>
        </div>
        <!-- Confirm Password -->
        <div class="mt-4">
            <x-input-label for="password_confirmation" :value="__('register.confirm-password')"/>
            <x-text-input wire:model="password_confirmation" id="password_confirmation" class="block mt-1 w-full"
                          type="password"
                          name="password_confirmation" required autocomplete="new-password"/>
            <x-input-error :messages="$errors->get('password_confirmation')" class="mt-2"/>
        </div>
        <!-- Invite Token -->
        <div class="mt-4">
            <x-input-label for="register_key" :value="__('register.register_key')"/>
            <x-text-input wire:model="register_key" id="register_key" class="block mt-1 w-full"
                          type="text" required maxlength="9"
                          name="register_key" required autocomplete="off"/>
            <x-input-error :messages="$errors->get('register_key')" class="mt-2"/>
        </div>
        <div class="flex items-center justify-between mt-4">
            <a class="underline text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800"
               href="{{ route('login') }}" title="Zum Login" wire:navigate>
                {{ __('register.already-registered') }}
            </a>
            <x-primary-button class="ms-4">
                {{ __('register.register') }}
            </x-primary-button>
        </div>
    </form>
</div>
</file>

<file path="resources/views/livewire/pages/auth/reset-password.blade.php">
<?php
use Illuminate\Auth\Events\PasswordReset;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Password;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Str;
use Illuminate\Validation\Rules;
use Livewire\Attributes\Layout;
use Livewire\Attributes\Locked;
use Livewire\Volt\Component;
new #[Layout('layouts.guest')] class extends Component
{
    #[Locked]
    public string $token = '';
    public string $email = '';
    public string $password = '';
    public string $password_confirmation = '';
    /**
     * Mount the component.
     */
    public function mount(string $token): void
    {
        $this->token = $token;
        $this->email = request()->string('email');
    }
    /**
     * Reset the password for the given user.
     */
    public function resetPassword(): void
    {
        $this->validate([
            'token' => ['required'],
            'email' => ['required', 'string', 'email'],
            'password' => ['required', 'string', 'confirmed', Rules\Password::defaults()],
        ]);
        // Here we will attempt to reset the user's password. If it is successful we
        // will update the password on an actual user model and persist it to the
        // database. Otherwise we will parse the error and return the response.
        $status = Password::reset(
            $this->only('email', 'password', 'password_confirmation', 'token'),
            function ($user) {
                $user->forceFill([
                    'password' => Hash::make($this->password),
                    'remember_token' => Str::random(60),
                ])->save();
                event(new PasswordReset($user));
            }
        );
        // If the password was successfully reset, we will redirect the user back to
        // the application's home authenticated view. If there is an error we can
        // redirect them back to where they came from with their error message.
        if ($status != Password::PASSWORD_RESET) {
            $this->addError('email', __($status));
            return;
        }
        Session::flash('status', __($status));
        $this->redirectRoute('login', navigate: true);
    }
}; ?>
<div>
    <form wire:submit="resetPassword">
        <!-- Email Address -->
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input wire:model="email" id="email" class="block mt-1 w-full" type="email" name="email" required autofocus autocomplete="username" />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>
        <!-- Password -->
        <div class="mt-4">
            <x-input-label for="password" :value="__('Password')" />
            <x-text-input wire:model="password" id="password" class="block mt-1 w-full" type="password" name="password" required autocomplete="new-password" />
            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>
        <!-- Confirm Password -->
        <div class="mt-4">
            <x-input-label for="password_confirmation" :value="__('Confirm Password')" />
            <x-text-input wire:model="password_confirmation" id="password_confirmation" class="block mt-1 w-full"
                          type="password"
                          name="password_confirmation" required autocomplete="new-password" />
            <x-input-error :messages="$errors->get('password_confirmation')" class="mt-2" />
        </div>
        <div class="flex items-center justify-end mt-4">
            <x-primary-button>
                {{ __('Reset Password') }}
            </x-primary-button>
        </div>
    </form>
</div>
</file>

<file path="resources/views/livewire/pages/auth/verify-email.blade.php">
<?php
use App\Livewire\Actions\Logout;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Session;
use Livewire\Attributes\Layout;
use Livewire\Volt\Component;
new #[Layout('layouts.guest')] class extends Component
{
    /**
     * Send an email verification notification to the user.
     */
    public function sendVerification(): void
    {
        if (Auth::user()->hasVerifiedEmail()) {
            $this->redirectIntended(default: route('dashboard', absolute: false), navigate: true);
            return;
        }
        Auth::user()->sendEmailVerificationNotification();
        Session::flash('status', 'verification-link-sent');
    }
    /**
     * Log the current user out of the application.
     */
    public function logout(Logout $logout): void
    {
        $logout();
        $this->redirect('/', navigate: true);
    }
}; ?>
<div>
    <div class="mb-4 text-sm text-gray-600 dark:text-gray-400">
        {{ __('Thanks for signing up! Before getting started, could you verify your email address by clicking on the link we just emailed to you? If you didn\'t receive the email, we will gladly send you another.') }}
    </div>
    @if (session('status') == 'verification-link-sent')
        <div class="mb-4 font-medium text-sm text-green-600 dark:text-green-400">
            {{ __('A new verification link has been sent to the email address you provided during registration.') }}
        </div>
    @endif
    <div class="mt-4 flex items-center justify-between">
        <x-primary-button wire:click="sendVerification">
            {{ __('Resend Verification Email') }}
        </x-primary-button>
        <button wire:click="logout" type="submit" class="underline text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800">
            {{ __('Log Out') }}
        </button>
    </div>
</div>
</file>

<file path="resources/views/livewire/profile/delete-user-form.blade.php">
<?php
use App\Livewire\Actions\Logout;
use Illuminate\Support\Facades\Auth;
use Livewire\Volt\Component;
new class extends Component
{
    public string $password = '';
    /**
     * Delete the currently authenticated user.
     */
    public function deleteUser(Logout $logout): void
    {
        $this->validate([
            'password' => ['required', 'string', 'current_password'],
        ]);
        tap(Auth::user(), $logout(...))->delete();
        $this->redirect('/', navigate: true);
    }
}; ?>
<section class="space-y-6">
    <header>
        <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100">
            {{ __('Delete Account') }}
        </h2>
        <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
            {{ __('Once your account is deleted, all of its resources and data will be permanently deleted. Before deleting your account, please download any data or information that you wish to retain.') }}
        </p>
    </header>
    <x-danger-button
        x-data=""
        x-on:click.prevent="$dispatch('open-modal', 'confirm-user-deletion')"
    >{{ __('Delete Account') }}</x-danger-button>
    <x-modal name="confirm-user-deletion" :show="$errors->isNotEmpty()" focusable>
        <form wire:submit="deleteUser" class="p-6">
            <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100">
                {{ __('Are you sure you want to delete your account?') }}
            </h2>
            <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
                {{ __('Once your account is deleted, all of its resources and data will be permanently deleted. Please enter your password to confirm you would like to permanently delete your account.') }}
            </p>
            <div class="mt-6">
                <x-input-label for="password" value="{{ __('Password') }}" class="sr-only" />
                <x-text-input
                    wire:model="password"
                    id="password"
                    name="password"
                    type="password"
                    class="mt-1 block w-3/4"
                    placeholder="{{ __('Password') }}"
                />
                <x-input-error :messages="$errors->get('password')" class="mt-2" />
            </div>
            <div class="mt-6 flex justify-end">
                <x-secondary-button x-on:click="$dispatch('close')">
                    {{ __('Cancel') }}
                </x-secondary-button>
                <x-danger-button class="ms-3">
                    {{ __('Delete Account') }}
                </x-danger-button>
            </div>
        </form>
    </x-modal>
</section>
</file>

<file path="resources/views/livewire/profile/update-password-form.blade.php">
<?php
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules\Password;
use Illuminate\Validation\ValidationException;
use Livewire\Volt\Component;
new class extends Component
{
    public string $current_password = '';
    public string $password = '';
    public string $password_confirmation = '';
    /**
     * Update the password for the currently authenticated user.
     */
    public function updatePassword(): void
    {
        try {
            $validated = $this->validate([
                'current_password' => ['required', 'string', 'current_password'],
                'password' => ['required', 'string', Password::defaults(), 'confirmed'],
            ]);
        } catch (ValidationException $e) {
            $this->reset('current_password', 'password', 'password_confirmation');
            throw $e;
        }
        Auth::user()->update([
            'password' => Hash::make($validated['password']),
        ]);
        $this->reset('current_password', 'password', 'password_confirmation');
        $this->dispatch('password-updated');
    }
}; ?>
<section>
    <header>
        <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100">
            {{ __('Update Password') }}
        </h2>
        <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
            {{ __('Ensure your account is using a long, random password to stay secure.') }}
        </p>
    </header>
    <form wire:submit="updatePassword" class="mt-6 space-y-6">
        <div>
            <x-input-label for="update_password_current_password" :value="__('Current Password')" />
            <x-text-input wire:model="current_password" id="update_password_current_password" name="current_password" type="password" class="mt-1 block w-full" autocomplete="current-password" />
            <x-input-error :messages="$errors->get('current_password')" class="mt-2" />
        </div>
        <div>
            <x-input-label for="update_password_password" :value="__('New Password')" />
            <x-text-input wire:model="password" id="update_password_password" name="password" type="password" class="mt-1 block w-full" autocomplete="new-password" />
            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>
        <div>
            <x-input-label for="update_password_password_confirmation" :value="__('Confirm Password')" />
            <x-text-input wire:model="password_confirmation" id="update_password_password_confirmation" name="password_confirmation" type="password" class="mt-1 block w-full" autocomplete="new-password" />
            <x-input-error :messages="$errors->get('password_confirmation')" class="mt-2" />
        </div>
        <div class="flex items-center gap-4">
            <x-primary-button>{{ __('Save') }}</x-primary-button>
            <x-action-message class="me-3" on="password-updated">
                {{ __('Saved.') }}
            </x-action-message>
        </div>
    </form>
</section>
</file>

<file path="resources/views/livewire/profile/update-profile-information-form.blade.php">
<?php
use App\Models\User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Session;
use Illuminate\Validation\Rule;
use Livewire\Volt\Component;
new class extends Component
{
    public string $name = '';
    public string $email = '';
    /**
     * Mount the component.
     */
    public function mount(): void
    {
        $this->name = Auth::user()->name;
        $this->email = Auth::user()->email;
    }
    /**
     * Update the profile information for the currently authenticated user.
     */
    public function updateProfileInformation(): void
    {
        $user = Auth::user();
        $validated = $this->validate([
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'lowercase', 'email', 'max:255', Rule::unique(User::class)->ignore($user->id)],
        ]);
        $user->fill($validated);
        if ($user->isDirty('email')) {
            $user->email_verified_at = null;
        }
        $user->save();
        $this->dispatch('profile-updated', name: $user->name);
    }
    /**
     * Send an email verification notification to the current user.
     */
    public function sendVerification(): void
    {
        $user = Auth::user();
        if ($user->hasVerifiedEmail()) {
            $this->redirectIntended(default: route('dashboard', absolute: false));
            return;
        }
        $user->sendEmailVerificationNotification();
        Session::flash('status', 'verification-link-sent');
    }
}; ?>
<section>
    <header>
        <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100">
            {{ __('Profile Information') }}
        </h2>
        <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
            {{ __("Update your account's profile information and email address.") }}
        </p>
    </header>
    <form wire:submit="updateProfileInformation" class="mt-6 space-y-6">
        <div>
            <x-input-label for="name" :value="__('Name')" />
            <x-text-input wire:model="name" id="name" name="name" type="text" class="mt-1 block w-full" required autofocus autocomplete="name" />
            <x-input-error class="mt-2" :messages="$errors->get('name')" />
        </div>
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input wire:model="email" id="email" name="email" type="email" class="mt-1 block w-full" required autocomplete="username" />
            <x-input-error class="mt-2" :messages="$errors->get('email')" />
            @if (auth()->user() instanceof \Illuminate\Contracts\Auth\MustVerifyEmail && ! auth()->user()->hasVerifiedEmail())
                <div>
                    <p class="text-sm mt-2 text-gray-800 dark:text-gray-200">
                        {{ __('Your email address is unverified.') }}
                        <button wire:click.prevent="sendVerification" class="underline text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800">
                            {{ __('Click here to re-send the verification email.') }}
                        </button>
                    </p>
                    @if (session('status') === 'verification-link-sent')
                        <p class="mt-2 font-medium text-sm text-green-600 dark:text-green-400">
                            {{ __('A new verification link has been sent to your email address.') }}
                        </p>
                    @endif
                </div>
            @endif
        </div>
        <div class="flex items-center gap-4">
            <x-primary-button>{{ __('Save') }}</x-primary-button>
            <x-action-message class="me-3" on="profile-updated">
                {{ __('Saved.') }}
            </x-action-message>
        </div>
    </form>
</section>
</file>

<file path="resources/views/livewire/surveys/edit.blade.php">
<div class="flex flex-col gap-4 p-20">
    <a class="flex flex-row gap-2 items-center w-fit text-2xl px-2" href="{{ route('surveys.list') }}">
        <x-fas-arrow-left class="w-4 h-4 text-gray-500 dark:text-gray-300" />
        <span class="text-gray-500 dark:text-gray-400">{{__('surveys.back_to_surveys')}}</span>
    </a>
    <div class="bg-gray-50 dark:bg-gray-800 flex flex-col gap-6 p-10 rounded-lg">
        <h1 class="text-2xl font-bold text-gray-800 dark:text-gray-200">{{__('surveys.edit_survey')}}</h1>
        @if (session('success'))
            <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative" role="alert">
                <span class="block sm:inline">{{ session('success') }}</span>
            </div>
        @endif
        @if (session('error'))
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                <span class="block sm:inline">{{ session('error') }}</span>
            </div>
        @endif
        <form wire:submit.prevent="save" class="flex flex-col gap-6">
            <!-- Template Information -->
            <div class="flex flex-col gap-2">
                <h2 class="text-xl font-semibold text-gray-700 dark:text-gray-300">{{__('surveys.template_information')}}</h2>
                <p class="text-gray-600 dark:text-gray-400">
                    {{ $survey->feedback_template->title ?? 'Template' }}
                </p>
            </div>
            <!-- School Information -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div class="flex flex-col gap-2">
                    <label for="school_year" class="text-gray-700 dark:text-gray-300">{{__('surveys.select_school_year')}}</label>
                    <select id="school_year" wire:model="school_year" class="form-select rounded-md shadow-sm border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                        <option value="">{{__('surveys.select_school_year_placeholder')}}</option>
                        @foreach($schoolYears as $year)
                            <option value="{{ $year->name }}">{{ $year->name }}</option>
                        @endforeach
                    </select>
                    @error('school_year') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="flex flex-col gap-2">
                    <label for="department" class="text-gray-700 dark:text-gray-300">{{__('surveys.select_department')}}</label>
                    <select id="department" wire:model="department" class="form-select rounded-md shadow-sm border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                        <option value="">{{__('surveys.select_department_placeholder')}}</option>
                        @foreach($departments as $dept)
                            <option value="{{ $dept->name }}">{{ $dept->name }}</option>
                        @endforeach
                    </select>
                    @error('department') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="flex flex-col gap-2">
                    <label for="grade_level" class="text-gray-700 dark:text-gray-300">{{__('surveys.select_grade_level')}}</label>
                    <select id="grade_level" wire:model="grade_level" class="form-select rounded-md shadow-sm border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                        <option value="">{{__('surveys.select_grade_level_placeholder')}}</option>
                        @foreach($gradeLevels as $level)
                            <option value="{{ $level->name }}">{{ $level->name }}</option>
                        @endforeach
                    </select>
                    @error('grade_level') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="flex flex-col gap-2">
                    <label for="class" class="text-gray-700 dark:text-gray-300">{{__('surveys.select_class')}}</label>
                    <select id="class" wire:model="class" class="form-select rounded-md shadow-sm border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                        <option value="">{{__('surveys.select_class_placeholder')}}</option>
                        @foreach($schoolClasses as $schoolClass)
                            <option value="{{ $schoolClass->name }}">{{ $schoolClass->name }}</option>
                        @endforeach
                    </select>
                    @error('class') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="flex flex-col gap-2">
                    <label for="subject" class="text-gray-700 dark:text-gray-300">{{__('surveys.select_subject')}}</label>
                    <select id="subject" wire:model="subject" class="form-select rounded-md shadow-sm border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                        <option value="">{{__('surveys.select_subject_placeholder')}}</option>
                        @foreach($subjects as $subj)
                            <option value="{{ $subj->name }}">{{ $subj->name }}</option>
                        @endforeach
                    </select>
                    @error('subject') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
            </div>
            <!-- Survey Settings -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div class="flex flex-col gap-2">
                    <label for="expire_date" class="text-gray-700 dark:text-gray-300">{{__('surveys.expire_date')}}</label>
                    <input type="datetime-local" id="expire_date" wire:model="expire_date" class="form-input rounded-md shadow-sm border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                    @error('expire_date') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
                <div class="flex flex-col gap-2">
                    <label for="response_limit" class="text-gray-700 dark:text-gray-300">{{__('surveys.response_limit')}}</label>
                    <input type="number" id="response_limit" wire:model="response_limit" class="form-input rounded-md shadow-sm border-gray-300 focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" min="-1">
                    <p class="text-sm text-gray-500 dark:text-gray-400">{{__('surveys.response_limit_help')}}</p>
                    @error('response_limit') <span class="text-red-500">{{ $message }}</span> @enderror
                </div>
            </div>
            <!-- Survey Status Information -->
            <div class="flex flex-col gap-2 bg-gray-100 dark:bg-gray-700 p-4 rounded-lg">
                <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-300">{{__('surveys.survey_status')}}</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <p class="text-gray-600 dark:text-gray-400">{{__('surveys.access_key')}}: <span class="font-mono font-bold">{{ $survey->accesskey }}</span>
                            <button type="button" @click="window.dispatchEvent(new CustomEvent('open-qr-modal'))" class="ml-2 px-2 py-1 text-xs bg-blue-500 hover:bg-blue-600 text-white rounded">
                                {{__('surveys.show_qr')}}
                            </button>
                        </p>
                    </div>
                    <div>
                        <p class="text-gray-600 dark:text-gray-400">{{__('surveys.responses')}}: {{ $survey->already_answered }} / {{ $survey->limit == -1 ? '∞' : $survey->limit }}</p>
                    </div>
                    <div>
                        <p class="text-gray-600 dark:text-gray-400">{{__('surveys.created_at')}}: {{ $survey->created_at->format('Y-m-d H:i') }}</p>
                    </div>
                    <div>
                        <p class="text-gray-600 dark:text-gray-400">{{__('surveys.updated_at')}}: {{ $survey->updated_at->format('Y-m-d H:i') }}</p>
                    </div>
                </div>
            </div>
            <div class="flex justify-end">
                <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors">
                    {{__('surveys.save_changes')}}
                </button>
            </div>
        </form>
    </div>
    <!-- QR Code Modal -->
    <div
        x-data="{
            show: false,
            surveyUrl: '{{ url(route('surveys.scan', ['token' => $survey->accesskey], false)) }}'
        }"
        @open-qr-modal.window="
            show = true;
            $nextTick(() => {
                if (typeof window.QRCode !== 'undefined') {
                    try {
                        const canvas = document.getElementById('qrcode-canvas');
                        const loadingEl = document.getElementById('qrcode-loading');
                        const errorEl = document.getElementById('qrcode-error');
                        if (loadingEl) loadingEl.style.display = 'flex';
                        if (errorEl) errorEl.style.display = 'none';
                        window.QRCode.toCanvas(canvas, surveyUrl, {
                            width: 200,
                            margin: 1
                        }, function(error) {
                            if (loadingEl) loadingEl.style.display = 'none';
                            if (error) {
                                if (errorEl) errorEl.style.display = 'block';
                                console.error('QR code error:', error);
                            }
                        });
                    } catch(e) {
                        const loadingEl = document.getElementById('qrcode-loading');
                        const errorEl = document.getElementById('qrcode-error');
                        if (loadingEl) loadingEl.style.display = 'none';
                        if (errorEl) errorEl.style.display = 'block';
                        console.error('QR code generation failed:', e);
                    }
                } else {
                    const loadingEl = document.getElementById('qrcode-loading');
                    const errorEl = document.getElementById('qrcode-error');
                    if (loadingEl) loadingEl.style.display = 'none';
                    if (errorEl) errorEl.style.display = 'block';
                    console.error('QRCode library not loaded');
                }
            });
        "
        x-show="show"
        x-transition:enter="transition ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="transition ease-in duration-200"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
        class="fixed inset-0 flex items-center justify-center z-50 bg-gray-900 bg-opacity-50"
        style="display: none;"
    >
        <div @click.away="show = false" class="bg-white dark:bg-gray-800 rounded-lg p-6 w-full max-w-md mx-auto">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">{{__('surveys.qr_code_title')}}</h3>
                <button @click="show = false" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                </button>
            </div>
            <div class="text-center mb-4">
                <p class="text-sm text-gray-600 dark:text-gray-400 mb-3">{{__('surveys.scan_to_access')}}</p>
                <div class="flex justify-center mb-3">
                    <div id="qrcode-container" class="relative">
                        <canvas id="qrcode-canvas" class="border border-gray-300 dark:border-gray-700"></canvas>
                        <!-- Loading state -->
                        <div id="qrcode-loading" class="absolute inset-0 flex items-center justify-center bg-white dark:bg-gray-800 bg-opacity-90 dark:bg-opacity-90" style="display: flex;">
                            <div class="text-blue-500">
                                <svg class="animate-spin h-8 w-8" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="qrcode-error" style="display: none;" class="text-red-500 text-xs mb-3">
                    {{__('surveys.qr_code_error')}}
                </div>
                <div class="text-sm bg-gray-100 dark:bg-gray-700 p-2 rounded">
                    <p class="text-xs text-gray-700 dark:text-gray-300 break-all">{{ $survey->accesskey }}</p>
                    <p class="text-xs text-gray-700 dark:text-gray-300 mt-1 break-all">{{ url(route('surveys.scan', ['token' => $survey->accesskey], false)) }}</p>
                </div>
            </div>
            <div class="flex justify-center">
                <button @click="show = false" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                    {{__('surveys.close')}}
                </button>
            </div>
        </div>
    </div>
</div>
</file>

<file path="resources/views/livewire/surveys/overview.blade.php">
<div class="flex flex-col gap-2 p-20">
    <!-- '/admin-panel' -->
    <a class="flex flex-row gap-2 items-center w-fit text-2xl px-2" href="/admin-panel">
        <x-fas-arrow-left class="w-4 h-4 text-gray-500 dark:text-gray-300" />
        <span class="text-gray-500 dark:text-gray-400">{{__('surveys.surveys')}}</span>
    </a>
    <div class="bg-gray-50 dark:bg-gray-800 flex flex-col gap-10 p-10">
        <div class="flex flex-row gap-2 flex-wrap just-start">
            <button class="filter-button" id="surveys-filter-expired" filter-type="expired">{{__('surveys.expired')}}</button>
            <button class="filter-button" id="surveys-filter-running" filter-type="running">{{__('surveys.running')}}</button>
            <button class="filter-button" id="surveys-filter-cancelled" filter-type="cancelled">{{__('surveys.cancelled')}}</button>
        </div>
        <div class="flex flex-row gap-10 flex-wrap justify-center">
            @foreach($surveys as $survey)
                <div class="flex flex-col gap-2 lg:flex-[1_0_17%] md:flex-[1_0_30%] sm:flex-[1_0_100%] survey-wrapper" filter-type="{{ $survey->status ?? 'running' }}">
                    <div class="relative">
                        <img src="{{asset('img/preview.png')}}" alt="a" class="rounded-3xl" />
                        <div class="absolute top-2 right-2 flex gap-2">
                            <a href="{{ route('surveys.edit', ['id' => $survey->id]) }}" class="bg-blue-500 hover:bg-blue-600 text-white p-2 rounded-full transition-colors">
                                <x-fas-edit class="w-4 h-4" />
                            </a>
                        </div>
                    </div>
                    <p class="text-ellipsis text-gray-600 dark:text-gray-500"><b>{{ $survey->feedback_template->title ?? 'Title' }}</b></p>
                    <p class="text-ellipsis text-gray-500 dark:text-gray-400">Updated {{ $survey->updated_at->diffForHumans() }}</p>
                    <div class="flex justify-between items-center">
                        <span class="text-sm text-gray-500 dark:text-gray-400">
                            {{ $survey->already_answered }} / {{ $survey->limit == -1 ? '∞' : $survey->limit }} {{__('surveys.responses')}}
                        </span>
                        <div class="flex gap-2">
                            <a href="{{ route('surveys.statistics', ['survey' => $survey->id]) }}" class="text-green-500 hover:text-green-600 text-sm">
                                {{__('Statistics')}} →
                            </a>
                            <a href="{{ route('surveys.edit', ['id' => $survey->id]) }}" class="text-blue-500 hover:text-blue-600 text-sm">
                                {{__('surveys.edit')}} →
                            </a>
                        </div>
                    </div>
                </div>
            @endforeach
        </div>
    </div>
</div>
</file>

<file path="resources/views/livewire/teacherInterface/overview.blade.php">
<div class="flex flex-col gap-2 p-20">
    <!-- Header -->
    <a class="flex flex-row gap-2 items-center w-fit text-2xl px-2" href="/admin-panel">
        <x-fas-arrow-left class="w-4 h-4 text-gray-500 dark:text-gray-300" />
        <span class="text-gray-500 dark:text-gray-400">{{__('templates.templates')}}</span>
    </a>
    <div class="bg-gray-50 dark:bg-gray-800 flex flex-col gap-10 p-10">
        <!-- Templates Gallery Section -->
        <section>
            <h2 class="text-xl font-bold mb-4 text-gray-700 dark:text-gray-200">{{ __('Templates') }}</h2>
            <div class="relative group" x-data="{
                scroll: 0,
                maxScroll: 0,
                updateScroll() {
                    this.scroll = $refs.scrollContainer.scrollLeft;
                    this.maxScroll = $refs.scrollContainer.scrollWidth - $refs.scrollContainer.clientWidth;
                }
            }" x-init="updateScroll()">
                <!-- Left scroll button -->
                <button
                    class="absolute left-0 top-1/2 -translate-y-1/2 -translate-x-4 p-2 rounded-full bg-white dark:bg-gray-700 shadow-md hover:bg-gray-50 dark:hover:bg-gray-600 transition-all opacity-0 group-hover:opacity-100 group-hover:translate-x-0 disabled:opacity-0"
                    @click="$refs.scrollContainer.scrollBy({ left: -300, behavior: 'smooth' }); setTimeout(() => updateScroll(), 500)"
                    x-show="scroll > 0">
                    <x-fas-chevron-left class="w-4 h-4 text-gray-400" />
                </button>
                <!-- Right scroll button -->
                <button
                    class="absolute right-0 top-1/2 -translate-y-1/2 translate-x-4 p-2 rounded-full bg-white dark:bg-gray-700 shadow-md hover:bg-gray-50 dark:hover:bg-gray-600 transition-all opacity-0 group-hover:opacity-100 group-hover:translate-x-0 disabled:opacity-0"
                    @click="$refs.scrollContainer.scrollBy({ left: 300, behavior: 'smooth' }); setTimeout(() => updateScroll(), 500)"
                    x-show="scroll < maxScroll">
                    <x-fas-chevron-right class="w-4 h-4 text-gray-400" />
                </button>
                <div class="flex gap-6 overflow-x-auto pb-4 scroll-smooth [&::-webkit-scrollbar]:h-1.5
                           [&::-webkit-scrollbar-track]:rounded-full [&::-webkit-scrollbar-track]:bg-gray-200
                           [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-thumb]:bg-gray-400
                           dark:[&::-webkit-scrollbar-track]:bg-gray-700 dark:[&::-webkit-scrollbar-thumb]:bg-gray-500"
                    x-ref="scrollContainer" @scroll.throttle="updateScroll()">
                    @foreach($templates as $template)
                    <a href="#" title="#" class="flex-none w-20">
                        <div
                            class="w-20 h-20 bg-white dark:bg-gray-700 rounded-full mb-2 overflow-hidden shadow-sm flex items-center justify-center">
                            <img src="{{ asset($template['image']) }}" alt="{{ $template['title'] }}"
                                class="w-full h-full object-cover rounded-full" />
                        </div>
                        <p class="text-xs font-medium text-gray-700 dark:text-gray-300 text-center">{{
                            $template['title'] }}</p>
                    </a>
                    @endforeach
                </div>
            </div>
        </section>
        <section>
            <h2 class="text-xl font-bold mb-4 text-gray-700 dark:text-gray-200">{{ __('Surveys') }}</h2>
            <div class="relative group flex flex-row whitespace-nowrap" style="white-space: nowrap;" x-data="{
                scrollSurveys: 0,
                maxScrollSurveys: 0,
                updateScrollSurveys() {
                    this.scrollSurveys = $refs.scrollContainerSurveys.scrollLeft;
                    this.maxScrollSurveys = $refs.scrollContainerSurveys.scrollWidth - $refs.scrollContainerSurveys.clientWidth;
                }
            }" x-init="updateScrollSurveys()">
                <!-- Left scroll button -->
                <button
                    class="absolute left-0 top-1/2 -translate-y-1/2 -translate-x-4 p-2 rounded-full bg-white dark:bg-gray-700 shadow-md hover:bg-gray-50 dark:hover:bg-gray-600 transition-all opacity-0 group-hover:opacity-100 group-hover:translate-x-0 disabled:opacity-0"
                    @click="$refs.scrollContainerSurveys.scrollBy({ left: -300, behavior: 'smooth' }); setTimeout(() => updateScrollSurveys(), 500)"
                    x-show="scrollSurveys > 0">
                    <x-fas-chevron-left class="w-4 h-4 text-gray-400" />
                </button>
                <!-- Right scroll button -->
                <button
                    class="absolute right-0 top-1/2 -translate-y-1/2 translate-x-4 p-2 rounded-full bg-white dark:bg-gray-700 shadow-md hover:bg-gray-50 dark:hover:bg-gray-600 transition-all opacity-0 group-hover:opacity-100 group-hover:translate-x-0 disabled:opacity-0"
                    @click="$refs.scrollContainerSurveys.scrollBy({ left: 300, behavior: 'smooth' }); setTimeout(() => updateScrollSurveys(), 500)"
                    x-show="scrollSurveys < maxScrollSurveys">
                    <x-fas-chevron-right class="w-4 h-4 text-gray-400" />
                </button>
                <div class="flex gap-6 overflow-x-auto pb-4 scroll-smooth [&::-webkit-scrollbar]:h-1.5
                           [&::-webkit-scrollbar-track]:rounded-full [&::-webkit-scrollbar-track]:bg-gray-200
                           [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-thumb]:bg-gray-400
                           dark:[&::-webkit-scrollbar-track]:bg-gray-700 dark:[&::-webkit-scrollbar-thumb]:bg-gray-500"
                    x-ref="scrollContainerSurveys" @scroll.throttle="updateScrollSurveys()">
                    @foreach($featuredItems as $item)
                    <a href="#" title="#" style="width: 15rem;"
                        class="min-w-3xs w-3xs flex items-start gap-4 flex-col p-4 hover:bg-white dark:hover:bg-gray-700 rounded-lg transition-colors">
                        <div
                            class="w-3xs h-auto min-w-3xs bg-white dark:bg-gray-700 rounded overflow-hidden flex-none shadow-sm">
                            <img src="{{ asset($item['image']) }}" alt="{{ $item['title'] }}"
                                class="w-full h-full object-cover" />
                        </div>
                        <div class="flex-grow" style="white-space: normal;">
                            <h3 class="font-medium text-gray-900 dark:text-gray-100">{{ $item['title'] }}</h3>
                            <p class="text-sm text-gray-500 dark:text-gray-400">{{ $item['description'] }}</p>
                        </div>
                    </a>
                    @endforeach
                </div>
            </div>
        </section>
    </div>
</div>
</file>

<file path="resources/views/livewire/templates/overview.blade.php">
<div class="flex flex-col gap-2 p-20">
    <!-- Header -->
    <a class="flex flex-row gap-2 items-center w-fit text-2xl px-2" href="/admin-panel">
        <x-fas-arrow-left class="w-4 h-4 text-gray-500 dark:text-gray-300" />
        <span class="text-gray-500 dark:text-gray-400">{{__('templates.templates')}}</span>
    </a>
    <div class="bg-gray-50 dark:bg-gray-800 flex flex-col gap-10 p-10">
        <!-- Templates Gallery Section -->
        <section>
            <h2 class="text-xl font-bold mb-4 text-gray-700 dark:text-gray-200">{{ __('templates.template_gallery') }}</h2>
            <div class="relative group" x-data="{
                scroll: 0,
                maxScroll: 0,
                updateScroll() {
                    this.scroll = $refs.scrollContainer.scrollLeft;
                    this.maxScroll = $refs.scrollContainer.scrollWidth - $refs.scrollContainer.clientWidth;
                }
            }" x-init="updateScroll()">
                <!-- Left scroll button -->
                <button
                    class="absolute left-0 top-1/2 -translate-y-1/2 -translate-x-4 p-2 rounded-full bg-white dark:bg-gray-700 shadow-md hover:bg-gray-50 dark:hover:bg-gray-600 transition-all opacity-0 group-hover:opacity-100 group-hover:translate-x-0 disabled:opacity-0"
                    @click="$refs.scrollContainer.scrollBy({ left: -300, behavior: 'smooth' }); setTimeout(() => updateScroll(), 500)"
                    x-show="scroll > 0"
                >
                    <x-fas-chevron-left class="w-4 h-4 text-gray-400" />
                </button>
                <!-- Right scroll button -->
                <button
                    class="absolute right-0 top-1/2 -translate-y-1/2 translate-x-4 p-2 rounded-full bg-white dark:bg-gray-700 shadow-md hover:bg-gray-50 dark:hover:bg-gray-600 transition-all opacity-0 group-hover:opacity-100 group-hover:translate-x-0 disabled:opacity-0"
                    @click="$refs.scrollContainer.scrollBy({ left: 300, behavior: 'smooth' }); setTimeout(() => updateScroll(), 500)"
                    x-show="scroll < maxScroll"
                >
                    <x-fas-chevron-right class="w-4 h-4 text-gray-400" />
                </button>
                <div
                    class="flex gap-6 overflow-x-auto pb-4 scroll-smooth [&::-webkit-scrollbar]:h-1.5
                           [&::-webkit-scrollbar-track]:rounded-full [&::-webkit-scrollbar-track]:bg-gray-200
                           [&::-webkit-scrollbar-thumb]:rounded-full [&::-webkit-scrollbar-thumb]:bg-gray-400
                           dark:[&::-webkit-scrollbar-track]:bg-gray-700 dark:[&::-webkit-scrollbar-thumb]:bg-gray-500"
                    x-ref="scrollContainer"
                    @scroll.throttle="updateScroll()"
                >
                    @foreach($templates as $template)
                        <div class="flex-none w-64">
                            <div class="aspect-video bg-white dark:bg-gray-700 rounded-lg mb-2 overflow-hidden shadow-sm relative group">
                                <img
                                    src="{{ asset($template['image']) }}"
                                    alt="{{ $template['title'] }}"
                                    class="w-full h-full object-cover"
                                />
                                <!-- Preview and Create buttons overlay -->
                                <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity flex flex-col justify-center items-center gap-2 p-4">
                                    @if(isset($template['route']))
                                        <a href="{{ $template['route'] }}" class="w-full px-3 py-1.5 bg-gray-800 text-white text-sm rounded hover:bg-gray-700 transition flex items-center justify-center">
                                            <x-fas-eye class="w-3 h-3 mr-1.5" />
                                            {{ __('templates.preview') }}
                                        </a>
                                    @endif
                                    @if(isset($template['create_url']))
                                        <a href="{{ $template['create_url'] }}" class="w-full px-3 py-1.5 bg-blue-600 text-white text-sm rounded hover:bg-blue-500 transition flex items-center justify-center">
                                            <x-fas-plus class="w-3 h-3 mr-1.5" />
                                            {{ __('templates.create_survey') }}
                                        </a>
                                    @endif
                                </div>
                            </div>
                            <p class="text-sm font-medium text-gray-700 dark:text-gray-300">{{ $template['title'] }}</p>
                        </div>
                    @endforeach
                </div>
            </div>
        </section>
        <!-- Featured Section -->
        <section class="mt-8">
            <h2 class="text-xl font-bold mb-4 text-gray-700 dark:text-gray-200">{{ __('templates.featured') }}</h2>
            <div class="flex flex-col gap-4">
                @foreach($featuredItems as $item)
                    <div class="flex items-start gap-4 p-4 hover:bg-white dark:hover:bg-gray-700 rounded-lg transition-colors">
                        <div class="w-16 h-16 bg-white dark:bg-gray-700 rounded overflow-hidden flex-none shadow-sm">
                            @if(isset($item['route']))
                                <a href="{{ $item['route'] }}">
                                    <img
                                        src="{{ asset($item['image']) }}"
                                        alt="{{ $item['title'] }}"
                                        class="w-full h-full object-cover"
                                    />
                                </a>
                            @else
                                <img
                                    src="{{ asset($item['image']) }}"
                                    alt="{{ $item['title'] }}"
                                    class="w-full h-full object-cover"
                                />
                            @endif
                        </div>
                        <div class="flex-grow">
                            @if(isset($item['route']))
                                <a href="{{ $item['route'] }}">
                                    <h3 class="font-medium text-gray-900 dark:text-gray-100">{{ $item['title'] }}</h3>
                                </a>
                            @else
                                <h3 class="font-medium text-gray-900 dark:text-gray-100">{{ $item['title'] }}</h3>
                            @endif
                            <p class="text-sm text-gray-500 dark:text-gray-400">{{ $item['description'] ?? '' }}</p>
                        </div>
                        <div class="flex flex-col gap-2">
                            @if(isset($item['route']))
                                <a href="{{ $item['route'] }}" class="p-2 hover:bg-gray-100 dark:hover:bg-gray-600 rounded flex items-center">
                                    <x-fas-eye class="w-4 h-4 text-gray-400 dark:text-gray-500 mr-1" />
                                    <span class="text-xs">{{ __('templates.preview') }}</span>
                                </a>
                            @endif
                            @if(isset($item['create_url']))
                                <a href="{{ $item['create_url'] }}" class="p-2 bg-blue-500 hover:bg-blue-600 text-white rounded flex items-center">
                                    <x-fas-plus class="w-4 h-4 mr-1" />
                                    <span class="text-xs">{{ __('templates.create_survey') }}</span>
                                </a>
                            @endif
                        </div>
                    </div>
                @endforeach
            </div>
        </section>
    </div>
</div>
</file>

<file path="resources/views/livewire/welcome/navigation.blade.php">
<nav class="-mx-3 flex flex-1 justify-end">
    @auth
        <a
            href="{{ url('/dashboard') }}"
            class="rounded-md px-3 py-2 text-black ring-1 ring-transparent transition hover:text-black/70 focus:outline-none focus-visible:ring-[#FF2D20] dark:text-white dark:hover:text-white/80 dark:focus-visible:ring-white"
        >
            Dashboard
        </a>
    @else
        <a
            href="{{ route('login') }}"
            class="rounded-md px-3 py-2 text-black ring-1 ring-transparent transition hover:text-black/70 focus:outline-none focus-visible:ring-[#FF2D20] dark:text-white dark:hover:text-white/80 dark:focus-visible:ring-white"
        >
            Log in
        </a>
        @if (Route::has('register'))
            <a
                href="{{ route('register') }}"
                class="rounded-md px-3 py-2 text-black ring-1 ring-transparent transition hover:text-black/70 focus:outline-none focus-visible:ring-[#FF2D20] dark:text-white dark:hover:text-white/80 dark:focus-visible:ring-white"
            >
                Register
            </a>
        @endif
    @endauth
</nav>
</file>

<file path="resources/views/survey_templates/checkbox_respond.blade.php">
<x-survey-layout>
    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900 dark:text-gray-100">
                    <h1 class="text-2xl font-bold text-center mb-8">
                        {{ $survey->feedback_template->title ?? __('surveys.survey') }}
                    </h1>
                    <!-- Survey Information -->
                    <div class="mb-6 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
                            @if($survey->subject)
                                <div>
                                    <span class="font-semibold">{{ __('surveys.subject') }}:</span>
                                    <span>{{ $survey->subject }}</span>
                                </div>
                            @endif
                            @if($survey->grade_level)
                                <div>
                                    <span class="font-semibold">{{ __('surveys.grade_level') }}:</span>
                                    <span>{{ $survey->grade_level }}</span>
                                </div>
                            @endif
                            @if($survey->class)
                                <div>
                                    <span class="font-semibold">{{ __('surveys.class') }}:</span>
                                    <span>{{ $survey->class }}</span>
                                </div>
                            @endif
                        </div>
                    </div>
                    <!-- Session Status -->
                    <x-auth-session-status class="mb-4" :status="session('status')" />
                    <!-- Validation Errors -->
                    @if ($errors->any())
                        <div class="mb-4">
                            <div class="font-medium text-red-600 dark:text-red-400">
                                {{ __('surveys.whoops') }}
                            </div>
                            <ul class="mt-3 list-disc list-inside text-sm text-red-600 dark:text-red-400">
                                @foreach ($errors->all() as $error)
                                    <li>{{ $error }}</li>
                                @endforeach
                            </ul>
                        </div>
                    @endif
                    <!-- Error Message -->
                    @if (session('error'))
                        <div class="mb-4 font-medium text-sm text-red-600 dark:text-red-400">
                            {{ session('error') }}
                        </div>
                    @endif
                    <form method="POST" action="{{ route('surveys.submit', $survey->accesskey) }}">
                        @csrf
                        <!-- Checkbox Survey -->
                        <div class="space-y-8 mb-8">
                            @foreach([
                                'Der Unterricht ist gut vorbereitet.',
                                'Die Aufgaben sind klar formuliert.',
                                'Die Lehrkraft erklärt verständlich.',
                                'Die Lehrkraft geht auf Fragen ein.',
                                'Die Lehrkraft gibt konstruktives Feedback.',
                                'Die Lehrkraft ist fair und respektvoll.',
                                'Die Unterrichtsmaterialien sind hilfreich.',
                                'Der Unterricht ist interessant gestaltet.'
                            ] as $index => $statement)
                                <div class="p-4 border rounded-lg bg-white dark:bg-gray-800">
                                    <h3 class="font-semibold mb-3">{{ $statement }}</h3>
                                    <div class="space-y-2">
                                        @foreach(['Ja', 'Nein', 'Keine Angabe'] as $optionIndex => $option)
                                            <label class="flex items-center space-x-2 cursor-pointer">
                                                <input
                                                    type="radio"
                                                    name="responses[{{ $index }}]"
                                                    value="{{ $option }}"
                                                    class="form-radio"
                                                    required
                                                >
                                                <span>{{ $option }}</span>
                                            </label>
                                        @endforeach
                                    </div>
                                </div>
                            @endforeach
                        </div>
                        <!-- Open Feedback Section -->
                        <div class="mb-6">
                            <label for="feedback" class="block font-medium mb-2">
                                {{ __('surveys.additional_comments') }}:
                            </label>
                            <textarea
                                id="feedback"
                                name="responses[feedback]"
                                rows="4"
                                class="block w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-indigo-500 focus:ring-indigo-500"
                            ></textarea>
                        </div>
                        <div class="flex justify-end mt-6">
                            <x-primary-button>
                                {{ __('surveys.submit_response') }}
                            </x-primary-button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</x-survey-layout>
</file>

<file path="resources/views/survey_templates/smiley_respond.blade.php">
<x-survey-layout>
    @if ($errors->any())
        <div class="alert alert-danger">
            <ul>
                @foreach ($errors->all() as $error)
                    <li>{{ $error }}</li>
                @endforeach
            </ul>
        </div>
    @endif
    <!-- Session Status -->
    @if (session('status'))
        <div class="mb-4 font-medium text-sm text-green-600 dark:text-green-400">
            {{ session('status') }}
        </div>
    @endif
    <!-- Error Message -->
    @if (session('error'))
        <div class="mb-4 font-medium text-sm text-red-600 dark:text-red-400">
            {{ session('error') }}
        </div>
    @endif
    <div x-data="smileyFeedback()">
        <form method="POST" action="{{ route('surveys.submit', $survey->accesskey) }}">
            @csrf
            <input type="hidden" name="responses" x-bind:value="JSON.stringify({positive: positive, negative: negative})">
            <div class="py-12">
                <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
                    <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg">
                        <div class="p-6 text-gray-900 dark:text-gray-100 text-center">
                            <!-- Survey Information -->
                            <div class="mb-6 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                                <h1 class="text-2xl font-bold mb-4">
                                    {{ $survey->feedback_template->title ?? __('surveys.survey') }}
                                </h1>
                                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
                                    @if($survey->subject)
                                        <div>
                                            <span class="font-semibold">{{ __('surveys.subject') }}:</span>
                                            <span>{{ $survey->subject }}</span>
                                        </div>
                                    @endif
                                    @if($survey->grade_level)
                                        <div>
                                            <span class="font-semibold">{{ __('surveys.grade_level') }}:</span>
                                            <span>{{ $survey->grade_level }}</span>
                                        </div>
                                    @endif
                                    @if($survey->class)
                                        <div>
                                            <span class="font-semibold">{{ __('surveys.class') }}:</span>
                                            <span>{{ $survey->class }}</span>
                                        </div>
                                    @endif
                                </div>
                            </div>
                            <div class="grid grid-cols-2 gap-4">
                                <div style="display: flex; justify-content: center">
                                    <x-far-face-smile class="w-20 h-20" />
                                </div>
                                <div style="display: flex; justify-content: center">
                                    <x-far-face-frown class="w-20 h-20" />
                                </div>
                                <div>
                                    <textarea id="positive" rows="4" x-model="positive" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="{{ __('surveys.smiley.positive') }}"></textarea>
                                </div>
                                <div>
                                    <textarea id="negative" rows="4" x-model="negative" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="{{ __('surveys.smiley.negative') }}"></textarea>
                                </div>
                            </div>
                        </div>
                        <div class="flex justify-end pr-6 pb-6">
                            <x-primary-button type="submit">
                                {{ __('surveys.smiley.button') }} <x-fas-arrow-right class="w-6 h-6" />
                            </x-primary-button>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>
    @push('scripts')
    <script>
        document.addEventListener('alpine:init', () => {
            Alpine.data('smileyFeedback', () => ({
                positive: '',
                negative: '',
            }));
        });
    </script>
    @endpush
</x-survey-layout>
</file>

<file path="resources/views/survey_templates/smiley.blade.php">
<x-app-layout>
@if ($errors->any())
    <div class="alert alert-danger">
        <ul>
            @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
            @endforeach
        </ul>
    </div>
@endif
<div class="fixed bottom-8 right-8 z-50">
    <form action="{{ route('surveys.create') }}" method="GET">
        <input type="hidden" name="template" value="smiley">
        <x-primary-button class="gap-2 text-base py-3 px-6 shadow-lg">
            {{ __('templates.use_template') }}
            <x-fas-arrow-right class="w-4 h-4" />
        </x-primary-button>
    </form>
</div>
    <form action="/feedback/smiley" method="POST">
        @csrf
        <div class="py-12">
            <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
                <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg">
                    <div class="p-6 text-gray-900 dark:text-gray-100 text-center">
                        <div class="grid grid-cols-2 gap-4">
                            <div style="display: flex; justify-content: center">
                                <x-far-face-smile class="w-20 h-20" />
                            </div>
                            <div style="display: flex; justify-content: center">
                                <x-far-face-frown class="w-20 h-20" />
                            </div>
                            <div>
                                <textarea id="message" rows="4" name="positive" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="{{ __('surveys.smiley.positive') }}"></textarea>
                            </div>
                            <div>
                                <textarea id="message" rows="4" name="negative" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="{{ __('surveys.smiley.negative') }}"></textarea>
                            </div>
                        </div>
                    </div>
                    <div class="flex justify-end pr-6 pb-6">
                        <x-primary-button disabled type="submit">
                            {{ __('surveys.smiley.button') }} <x-fas-arrow-right class="w-6 h-6" />
                        </x-primary-button>
                    </div>
                </div>
            </div>
        </div>
    </form>
</x-app-layout>
</file>

<file path="resources/views/survey_templates/table_respond.blade.php">
<x-survey-layout>
    <div x-data="tableFeedback()">
        <form method="POST" action="{{ route('surveys.submit', $survey->accesskey) }}" id="surveyForm">
            @csrf
            <input type="hidden" name="responses" x-bind:value="JSON.stringify({
                ratings: formatRatingsForSubmission(),
                feedback: {
                    positive: positive,
                    negative: negative,
                    suggestions: suggestions
                }
            })">
            <div class="py-12">
                <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
                    <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg">
                        <div class="p-6 text-gray-900 dark:text-gray-100">
                            <!-- Survey Information -->
                            <div class="mb-6 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                                <h1 class="text-2xl font-bold mb-4">
                                    {{ $survey->feedback_template->title ?? 'Unterrichtsbeurteilung durch Schülerinnen und Schüler' }}
                                </h1>
                                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
                                    @if($survey->subject)
                                        <div>
                                            <span class="font-semibold">{{ __('surveys.subject') }}:</span>
                                            <span>{{ $survey->subject }}</span>
                                        </div>
                                    @endif
                                    @if($survey->grade_level)
                                        <div>
                                            <span class="font-semibold">{{ __('surveys.grade_level') }}:</span>
                                            <span>{{ $survey->grade_level }}</span>
                                        </div>
                                    @endif
                                    @if($survey->class)
                                        <div>
                                            <span class="font-semibold">{{ __('surveys.class') }}:</span>
                                            <span>{{ $survey->class }}</span>
                                        </div>
                                    @endif
                                </div>
                            </div>
                            <!-- Session Status -->
                            <x-auth-session-status class="mb-4" :status="session('status')" />
                            <!-- Validation Errors -->
                            @if ($errors->any())
                                <div class="mb-4">
                                    <div class="font-medium text-red-600 dark:text-red-400">
                                        {{ __('surveys.whoops') }}
                                    </div>
                                    <ul class="mt-3 list-disc list-inside text-sm text-red-600 dark:text-red-400">
                                        @foreach ($errors->all() as $error)
                                            <li>{{ $error }}</li>
                                        @endforeach
                                    </ul>
                                </div>
                            @endif
                            <!-- Error Message -->
                            @if (session('error'))
                                <div class="mb-4 font-medium text-sm text-red-600 dark:text-red-400">
                                    {{ session('error') }}
                                </div>
                            @endif
                            <!-- Teacher Behavior Section -->
                            <div class="mb-8">
                                <h2 class="text-xl font-semibold mb-4">Verhalten des Lehrers</h2>
                                <div class="overflow-x-auto">
                                    <table class="w-full">
                                        <thead>
                                            <tr class="border-b">
                                                <th class="text-left py-2 w-1/3">Aussage</th>
                                                <th class="text-center py-2">trifft völlig zu</th>
                                                <th class="text-center py-2">trifft eher zu</th>
                                                <th class="text-center py-2">trifft eher nicht zu</th>
                                                <th class="text-center py-2">trifft überhaupt nicht zu</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr class="border-b">
                                                <td class="py-2 font-medium">Sie/Er ist ...</td>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                            </tr>
                                            @foreach(['... ungeduldig', '... sicher im Auftreten', '... freundlich', '... energisch und aufbauend', '... tatkräftig, aktiv', '... aufgeschlossen'] as $index => $statement)
                                                <tr class="border-b">
                                                    <td class="py-2">{{ $statement }}</td>
                                                    @foreach(range(1, 4) as $option)
                                                        <td class="text-center">
                                                            <input
                                                                type="radio"
                                                                name="behavior_{{ Str::slug($statement) }}"
                                                                value="{{ $option }}"
                                                                x-on:change="setBehavior('{{ Str::slug($statement) }}', {{ $option }})"
                                                                class="form-radio">
                                                        </td>
                                                    @endforeach
                                                </tr>
                                            @endforeach
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <!-- Teacher Fairness Section -->
                            <div class="mb-8">
                                <h2 class="text-xl font-semibold mb-4">Bewerten Sie folgende Aussagen</h2>
                                <div class="overflow-x-auto">
                                    <table class="w-full">
                                        <thead>
                                            <tr class="border-b">
                                                <th class="text-left py-2 w-1/3">Aussage</th>
                                                <th class="text-center py-2">trifft völlig zu</th>
                                                <th class="text-center py-2">trifft eher zu</th>
                                                <th class="text-center py-2">trifft eher nicht zu</th>
                                                <th class="text-center py-2">trifft überhaupt nicht zu</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr class="border-b">
                                                <td class="py-2 font-medium">Die Lehrerin, der Lehrer ...</td>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                                <td></td>
                                            </tr>
                                            @foreach(['... bevorzugt manche Schülerinnen oder Schüler.', '... nimmt die Schülerinnen und Schüler ernst.', '... ermutigt und lobt viel.', '... entscheidet immer allein.', '... gesteht eigene Fehler ein.'] as $index => $statement)
                                                <tr class="border-b">
                                                    <td class="py-2">{{ $statement }}</td>
                                                    @foreach(range(1, 4) as $option)
                                                        <td class="text-center">
                                                            <input
                                                                type="radio"
                                                                name="fairness_{{ Str::slug($statement) }}"
                                                                value="{{ $option }}"
                                                                x-on:change="setFairness('{{ Str::slug($statement) }}', {{ $option }})"
                                                                class="form-radio">
                                                        </td>
                                                    @endforeach
                                                </tr>
                                            @endforeach
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <!-- Class Quality Section -->
                            <div class="mb-8">
                                <h2 class="text-xl font-semibold mb-4">Wie ist der Unterricht?</h2>
                                <div class="overflow-x-auto">
                                    <table class="w-full">
                                        <thead>
                                            <tr class="border-b">
                                                <th class="text-left py-2 w-1/3">Aussage</th>
                                                <th class="text-center py-2">trifft völlig zu</th>
                                                <th class="text-center py-2">trifft eher zu</th>
                                                <th class="text-center py-2">trifft eher nicht zu</th>
                                                <th class="text-center py-2">trifft überhaupt nicht zu</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach([
                                                'Die Ziele des Unterrichts sind klar erkennbar.',
                                                'Der Lehrer redet zu viel.',
                                                'Der Lehrer schweift oft vom Thema ab.',
                                                'Die Fragen und Beiträge der Schülerinnen und Schüler werden ernst genommen.',
                                                'Die Sprache des Lehrers ist gut verständlich.',
                                                'Der Lehrer achtet auf Ruhe und Disziplin im Unterricht.',
                                                'Der Unterricht ist abwechslungsreich.',
                                                'Unterrichtsmaterialien sind ansprechend und gut verständlich gestaltet.',
                                                'Der Stoff wird ausreichend wiederholt und geübt.'
                                            ] as $index => $statement)
                                                <tr class="border-b">
                                                    <td class="py-2">{{ $statement }}</td>
                                                    @foreach(range(1, 4) as $option)
                                                        <td class="text-center">
                                                            <input
                                                                type="radio"
                                                                name="class_{{ Str::slug($statement) }}"
                                                                value="{{ $option }}"
                                                                x-on:change="setClassQuality('{{ Str::slug($statement) }}', {{ $option }})"
                                                                class="form-radio">
                                                        </td>
                                                    @endforeach
                                                </tr>
                                            @endforeach
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <!-- Evaluation Claims Section -->
                            <div class="mb-8">
                                <h2 class="text-xl font-semibold mb-4">Bewerten Sie folgende Behauptungen</h2>
                                <div class="overflow-x-auto">
                                    <table class="w-full">
                                        <thead>
                                            <tr class="border-b">
                                                <th class="text-left py-2 w-1/3">Aussage</th>
                                                <th class="text-center py-2">trifft völlig zu</th>
                                                <th class="text-center py-2">trifft eher zu</th>
                                                <th class="text-center py-2">trifft eher nicht zu</th>
                                                <th class="text-center py-2">trifft überhaupt nicht zu</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach([
                                                'Die Themen der Schulaufgaben werden rechtzeitig vorher bekannt gegeben.',
                                                'Der Schwierigkeitsgrad der Leistungsnachweise entspricht dem der Unterrichtsinhalte.',
                                                'Die Bewertungen sind nachvollziehbar und verständlich.'
                                            ] as $index => $statement)
                                                <tr class="border-b">
                                                    <td class="py-2">{{ $statement }}</td>
                                                    @foreach(range(1, 4) as $option)
                                                        <td class="text-center">
                                                            <input
                                                                type="radio"
                                                                name="eval_{{ Str::slug($statement) }}"
                                                                value="{{ $option }}"
                                                                x-on:change="setEvaluation('{{ Str::slug($statement) }}', {{ $option }})"
                                                                class="form-radio">
                                                        </td>
                                                    @endforeach
                                                </tr>
                                            @endforeach
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <!-- Open Feedback Section -->
                            <div class="space-y-6">
                                <div>
                                    <label class="block font-medium mb-2">Das hat mir besonders gut gefallen:</label>
                                    <textarea x-model="positive" rows="3" class="block w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-indigo-500 focus:ring-indigo-500"></textarea>
                                </div>
                                <div>
                                    <label class="block font-medium mb-2">Das hat mir nicht gefallen:</label>
                                    <textarea x-model="negative" rows="3" class="block w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-indigo-500 focus:ring-indigo-500"></textarea>
                                </div>
                                <div>
                                    <label class="block font-medium mb-2">Verbesserungsvorschläge:</label>
                                    <textarea x-model="suggestions" rows="3" class="block w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-indigo-500 focus:ring-indigo-500"></textarea>
                                </div>
                            </div>
                            <div id="validation-error" class="hidden mb-4 p-4 bg-red-100 text-red-700 rounded-md">
                                {{ __('surveys.please_answer_all_questions') }}
                            </div>
                            <!-- Submit Button -->
                            <div class="flex justify-end mt-6">
                                <x-primary-button type="submit">
                                    Absenden <x-fas-arrow-right class="w-6 h-6 ml-2" />
                                </x-primary-button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>
    @push('scripts')
    <script>
        document.addEventListener('alpine:init', () => {
            Alpine.data('tableFeedback', () => ({
                behavior: {},
                fairness: {},
                classQuality: {},
                evaluation: {},
                positive: '',
                negative: '',
                suggestions: '',
                // Format the ratings in the expected format for the backend
                formatRatingsForSubmission() {
                    // Create a ratings object that matches the expected format
                    const ratings = {};
                    // Map all the ratings from different question categories
                    const questionMappings = {
                        '... ungeduldig': this.behavior['ungeduldig'],
                        '... sicher im Auftreten': this.behavior['sicher-im-auftreten'],
                        '... freundlich': this.behavior['freundlich'],
                        '... energisch und aufbauend': this.behavior['energisch-und-aufbauend'],
                        '... tatkräftig, aktiv': this.behavior['tatkraftig-aktiv'],
                        '... aufgeschlossen': this.behavior['aufgeschlossen'],
                        '... bevorzugt manche Schülerinnen oder Schüler.': this.fairness['bevorzugt-manche-schulerinnen-oder-schuler'],
                        '... nimmt die Schülerinnen und Schüler ernst.': this.fairness['nimmt-die-schulerinnen-und-schuler-ernst'],
                        '... ermutigt und lobt viel.': this.fairness['ermutigt-und-lobt-viel'],
                        '... entscheidet immer allein.': this.fairness['entscheidet-immer-allein'],
                        '... gesteht eigene Fehler ein.': this.fairness['gesteht-eigene-fehler-ein'],
                        'Die Ziele des Unterrichts sind klar erkennbar.': this.classQuality['die-ziele-des-unterrichts-sind-klar-erkennbar'],
                        'Der Lehrer redet zu viel.': this.classQuality['der-lehrer-redet-zu-viel'],
                        'Der Lehrer schweift oft vom Thema ab.': this.classQuality['der-lehrer-schweift-oft-vom-thema-ab'],
                        'Die Fragen und Beiträge der Schülerinnen und Schüler werden ernst genommen.': this.classQuality['die-fragen-und-beitrage-der-schulerinnen-und-schuler-werden-ernst-genommen'],
                        'Die Sprache des Lehrers ist gut verständlich.': this.classQuality['die-sprache-des-lehrers-ist-gut-verstandlich'],
                        'Der Lehrer achtet auf Ruhe und Disziplin im Unterricht.': this.classQuality['der-lehrer-achtet-auf-ruhe-und-disziplin-im-unterricht'],
                        'Der Unterricht ist abwechslungsreich.': this.classQuality['der-unterricht-ist-abwechslungsreich'],
                        'Unterrichtsmaterialien sind ansprechend und gut verständlich gestaltet.': this.classQuality['unterrichtsmaterialien-sind-ansprechend-und-gut-verstandlich-gestaltet'],
                        'Der Stoff wird ausreichend wiederholt und geübt.': this.classQuality['der-stoff-wird-ausreichend-wiederholt-und-geubt'],
                        'Die Themen der Schulaufgaben werden rechtzeitig vorher bekannt gegeben.': this.evaluation['die-themen-der-schulaufgaben-werden-rechtzeitig-vorher-bekannt-gegeben'],
                        'Der Schwierigkeitsgrad der Leistungsnachweise entspricht dem der Unterrichtsinhalte.': this.evaluation['der-schwierigkeitsgrad-der-leistungsnachweise-entspricht-dem-der-unterrichtsinhalte'],
                        'Die Bewertungen sind nachvollziehbar und verständlich.': this.evaluation['die-bewertungen-sind-nachvollziehbar-und-verstandlich']
                    };
                    // Add each rating to the ratings object, skipping undefined values
                    for (const [question, rating] of Object.entries(questionMappings)) {
                        if (rating !== undefined) {
                            ratings[question] = rating;
                        }
                    }
                    return ratings;
                },
                setBehavior(key, value) {
                    this.behavior[key] = value;
                },
                setFairness(key, value) {
                    this.fairness[key] = value;
                },
                setClassQuality(key, value) {
                    this.classQuality[key] = value;
                },
                setEvaluation(key, value) {
                    this.evaluation[key] = value;
                }
            }));
        });
    </script>
    @endpush
</x-survey-layout>
</file>

<file path="resources/views/survey_templates/table.blade.php">
<x-app-layout>
    <!-- Create Survey Button -->
    <div class="fixed bottom-8 right-8 z-50">
        <form action="{{ route('surveys.create') }}" method="GET">
            <input type="hidden" name="template" value="table">
            <x-primary-button class="gap-2 text-base py-3 px-6 shadow-lg">
                {{ __('templates.use_template') }}
                <x-fas-arrow-right class="w-4 h-4" />
            </x-primary-button>
        </form>
    </div>
    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900 dark:text-gray-100">
                    <h1 class="text-2xl font-bold text-center mb-8">Unterrichtsbeurteilung durch Schülerinnen und Schüler</h1>
                    <!-- Teacher Behavior Section -->
                    <div class="mb-8">
                        <h2 class="text-xl font-semibold mb-4">Verhalten des Lehrers</h2>
                        <div class="overflow-x-auto">
                            <table class="w-full">
                                <thead>
                                    <tr class="border-b">
                                        <th class="text-left py-2 w-1/3">Aussage</th>
                                        <th class="text-center py-2">trifft völlig zu</th>
                                        <th class="text-center py-2">trifft eher zu</th>
                                        <th class="text-center py-2">trifft eher nicht zu</th>
                                        <th class="text-center py-2">trifft überhaupt nicht zu</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr class="border-b">
                                        <td class="py-2 font-medium">Sie/Er ist ...</td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                    </tr>
                                    @foreach(['... ungeduldig', '... sicher im Auftreten', '... freundlich', '... energisch und aufbauend', '... tatkräftig, aktiv', '... aufgeschlossen'] as $statement)
                                        <tr class="border-b">
                                            <td class="py-2">{{ $statement }}</td>
                                            @foreach(range(1, 4) as $option)
                                                <td class="text-center">
                                                    <input type="radio" name="behavior_{{ Str::slug($statement) }}" value="{{ $option }}" class="form-radio">
                                                </td>
                                            @endforeach
                                        </tr>
                                    @endforeach
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <!-- Teacher Fairness Section -->
                    <div class="mb-8">
                        <h2 class="text-xl font-semibold mb-4">Bewerten Sie folgende Aussagen</h2>
                        <div class="overflow-x-auto">
                            <table class="w-full">
                                <thead>
                                    <tr class="border-b">
                                        <th class="text-left py-2 w-1/3">Aussage</th>
                                        <th class="text-center py-2">trifft völlig zu</th>
                                        <th class="text-center py-2">trifft eher zu</th>
                                        <th class="text-center py-2">trifft eher nicht zu</th>
                                        <th class="text-center py-2">trifft überhaupt nicht zu</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr class="border-b">
                                        <td class="py-2 font-medium">Die Lehrerin, der Lehrer ...</td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                    </tr>
                                    @foreach(['... bevorzugt manche Schülerinnen oder Schüler.', '... nimmt die Schülerinnen und Schüler ernst.', '... ermutigt und lobt viel.', '... entscheidet immer allein.', '... gesteht eigene Fehler ein.'] as $statement)
                                        <tr class="border-b">
                                            <td class="py-2">{{ $statement }}</td>
                                            @foreach(range(1, 4) as $option)
                                                <td class="text-center">
                                                    <input type="radio" name="fairness_{{ Str::slug($statement) }}" value="{{ $option }}" class="form-radio">
                                                </td>
                                            @endforeach
                                        </tr>
                                    @endforeach
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <!-- Class Quality Section -->
                    <div class="mb-8">
                        <h2 class="text-xl font-semibold mb-4">Wie ist der Unterricht?</h2>
                        <div class="overflow-x-auto">
                            <table class="w-full">
                                <thead>
                                    <tr class="border-b">
                                        <th class="text-left py-2 w-1/3">Aussage</th>
                                        <th class="text-center py-2">trifft völlig zu</th>
                                        <th class="text-center py-2">trifft eher zu</th>
                                        <th class="text-center py-2">trifft eher nicht zu</th>
                                        <th class="text-center py-2">trifft überhaupt nicht zu</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach([
                                        'Die Ziele des Unterrichts sind klar erkennbar.',
                                        'Der Lehrer redet zu viel.',
                                        'Der Lehrer schweift oft vom Thema ab.',
                                        'Die Fragen und Beiträge der Schülerinnen und Schüler werden ernst genommen.',
                                        'Die Sprache des Lehrers ist gut verständlich.',
                                        'Der Lehrer achtet auf Ruhe und Disziplin im Unterricht.',
                                        'Der Unterricht ist abwechslungsreich.',
                                        'Unterrichtsmaterialien sind ansprechend und gut verständlich gestaltet.',
                                        'Der Stoff wird ausreichend wiederholt und geübt.'
                                    ] as $statement)
                                        <tr class="border-b">
                                            <td class="py-2">{{ $statement }}</td>
                                            @foreach(range(1, 4) as $option)
                                                <td class="text-center">
                                                    <input type="radio" name="class_{{ Str::slug($statement) }}" value="{{ $option }}" class="form-radio">
                                                </td>
                                            @endforeach
                                        </tr>
                                    @endforeach
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <!-- Evaluation Claims Section -->
                    <div class="mb-8">
                        <h2 class="text-xl font-semibold mb-4">Bewerten Sie folgende Behauptungen</h2>
                        <div class="overflow-x-auto">
                            <table class="w-full">
                                <thead>
                                    <tr class="border-b">
                                        <th class="text-left py-2 w-1/3">Aussage</th>
                                        <th class="text-center py-2">trifft völlig zu</th>
                                        <th class="text-center py-2">trifft eher zu</th>
                                        <th class="text-center py-2">trifft eher nicht zu</th>
                                        <th class="text-center py-2">trifft überhaupt nicht zu</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach([
                                        'Die Themen der Schulaufgaben werden rechtzeitig vorher bekannt gegeben.',
                                        'Der Schwierigkeitsgrad der Leistungsnachweise entspricht dem der Unterrichtsinhalte.',
                                        'Die Bewertungen sind nachvollziehbar und verständlich.'
                                    ] as $statement)
                                        <tr class="border-b">
                                            <td class="py-2">{{ $statement }}</td>
                                            @foreach(range(1, 4) as $option)
                                                <td class="text-center">
                                                    <input type="radio" name="eval_{{ Str::slug($statement) }}" value="{{ $option }}" class="form-radio">
                                                </td>
                                            @endforeach
                                        </tr>
                                    @endforeach
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <!-- Open Feedback Section -->
                    <div class="space-y-6">
                        <div>
                            <label class="block font-medium mb-2">Das hat mir besonders gut gefallen:</label>
                            <textarea rows="3" class="block w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-indigo-500 focus:ring-indigo-500"></textarea>
                        </div>
                        <div>
                            <label class="block font-medium mb-2">Das hat mir nicht gefallen:</label>
                            <textarea rows="3" class="block w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-indigo-500 focus:ring-indigo-500"></textarea>
                        </div>
                        <div>
                            <label class="block font-medium mb-2">Verbesserungsvorschläge:</label>
                            <textarea rows="3" class="block w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-indigo-500 focus:ring-indigo-500"></textarea>
                        </div>
                    </div>
                    <!-- Submit Button -->
                    <div class="flex justify-end mt-6">
                        <x-primary-button disabled>
                            Absenden <x-fas-arrow-right class="w-6 h-6 ml-2" />
                        </x-primary-button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>
</file>

<file path="resources/views/survey_templates/target_respond.blade.php">
<x-survey-layout>
    <style>
        path:hover {
            fill: rgba(59, 130, 246, var(--hover-opacity)) !important;
        }
        path.selected {
            fill: rgba(59, 130, 246, var(--hover-opacity)) !important;
            stroke: rgb(59, 130, 246) !important;
            stroke-width: 2px !important;
        }
        .dark path:hover,
        .dark path.selected {
            fill: rgba(96, 165, 250, var(--hover-opacity)) !important;
            stroke: rgb(96, 165, 250) !important;
        }
        g.selected path {
            fill: rgba(59, 130, 246, var(--hover-opacity)) !important;
            stroke: rgb(59, 130, 246) !important;
            stroke-width: 2px !important;
        }
        .dark g.selected path {
            fill: rgba(96, 165, 250, var(--hover-opacity)) !important;
            stroke: rgb(96, 165, 250) !important;
        }
        .tooltip {
            position: absolute;
            background-color: rgba(0, 0, 0, 0.75);
            color: #fff;
            padding: 5px 10px;
            border-radius: 4px;
            pointer-events: none;
            font-size: 0.875rem;
            z-index: 50;
        }
    </style>
    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900 dark:text-gray-100" x-data="targetDiagram()">
                    <!-- Title and Instructions -->
                    <h1 class="text-2xl font-bold text-center mb-8">{{ $survey->feedback_template->title ?? 'Zielscheibe' }}</h1>
                    <!-- Survey Information -->
                    <div class="mb-6 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
                            @if($survey->subject)
                                <div>
                                    <span class="font-semibold">{{ __('surveys.subject') }}:</span>
                                    <span>{{ $survey->subject }}</span>
                                </div>
                            @endif
                            @if($survey->grade_level)
                                <div>
                                    <span class="font-semibold">{{ __('surveys.grade_level') }}:</span>
                                    <span>{{ $survey->grade_level }}</span>
                                </div>
                            @endif
                            @if($survey->class)
                                <div>
                                    <span class="font-semibold">{{ __('surveys.class') }}:</span>
                                    <span>{{ $survey->class }}</span>
                                </div>
                            @endif
                        </div>
                    </div>
                    <p class="text-center mb-10 max-w-3xl mx-auto">
                        Bitte bewerten Sie die angegebenen Teilbereiche und setzen Sie innerhalb der einzelnen Segmente an der nach Ihrer Meinung richtigen Stelle ein Kreuzchen. Je näher das Kreuzchen in der Mitte der Zielscheibe gesetzt wird, desto positiver ist die Bewertung.
                    </p>
                    <p class="text-center mb-36 text-sm text-gray-600 dark:text-gray-400">
                        Die Auswertung der Fragebögen erfolgt anonym.
                    </p>
                    <!-- Target Diagram -->
                    <div class="mb-40 relative mt-20">
                        <div class="aspect-square max-w-2xl mx-auto relative">
                            <svg viewBox="-20 -20 440 440" class="w-full h-full">
                                <!-- Rings -->
                                <circle cx="200" cy="200" r="200" class="fill-gray-100 dark:fill-gray-700 stroke-gray-300 dark:stroke-gray-600" />
                                <circle cx="200" cy="200" r="160" class="fill-none stroke-gray-300 dark:stroke-gray-600" />
                                <circle cx="200" cy="200" r="120" class="fill-none stroke-gray-300 dark:stroke-gray-600" />
                                <circle cx="200" cy="200" r="80" class="fill-none stroke-gray-300 dark:stroke-gray-600" />
                                <circle cx="200" cy="200" r="40" class="fill-none stroke-gray-300 dark:stroke-gray-600" />
                                <!-- Ring Labels -->
                                <text x="205" y="25" class="text-xs fill-gray-500 dark:fill-gray-400">1</text>
                                <text x="205" y="65" class="text-xs fill-gray-500 dark:fill-gray-400">2</text>
                                <text x="205" y="105" class="text-xs fill-gray-500 dark:fill-gray-400">3</text>
                                <text x="205" y="145" class="text-xs fill-gray-500 dark:fill-gray-400">4</text>
                                <text x="205" y="185" class="text-xs fill-gray-500 dark:fill-gray-400">5</text>
                                <!-- Segment Lines -->
                                @for ($i = 0; $i < 8; $i++)
                                    <line
                                        x1="200"
                                        y1="200"
                                        x2="{{ 200 + 200 * cos($i * pi() / 4) }}"
                                        y2="{{ 200 + 200 * sin($i * pi() / 4) }}"
                                        class="stroke-gray-300 dark:stroke-gray-600"
                                    />
                                @endfor
                                <!-- Click Areas -->
                                @foreach(['Ich lerne im Unterricht viel.',
                                        'Die Lehrkraft hat ein großes Hintergrundwissen.',
                                        'Die Lehrkraft ist immer gut vorbereitet.',
                                        'Die Lehrkraft zeigt Interesse an ihren Schülern.',
                                        'Die Lehrkraft sorgt für ein gutes Lernklima in der Klasse.',
                                        'Die Notengebung ist fair und nachvollziehbar.',
                                        'Ich konnte dem Unterricht immer gut folgen.',
                                        'Der Unterricht wird vielfältig gestaltet.'] as $index => $statement)
                                    @foreach([200, 160, 120, 80, 40] as $ringIndex => $outerRadius)
                                        @php
                                            $innerRadius = $ringIndex < 4 ? [160, 120, 80, 40][$ringIndex] : 0;
                                            $hoverOpacity = ($ringIndex + 1) * 0.15;
                                            // Calculate arc points
                                            $startX = 200 + $outerRadius * cos($index * pi() / 4);
                                            $startY = 200 + $outerRadius * sin($index * pi() / 4);
                                            $endX = 200 + $outerRadius * cos(($index + 1) * pi() / 4);
                                            $endY = 200 + $outerRadius * sin(($index + 1) * pi() / 4);
                                            $innerStartX = 200 + $innerRadius * cos($index * pi() / 4);
                                            $innerStartY = 200 + $innerRadius * sin($index * pi() / 4);
                                            $innerEndX = 200 + $innerRadius * cos(($index + 1) * pi() / 4);
                                            $innerEndY = 200 + $innerRadius * sin(($index + 1) * pi() / 4);
                                        @endphp
                                        <g class="cursor-pointer"
                                           :class="{ 'selected': isSelected({{ $index }}, {{ $ringIndex + 1 }}) }"
                                           style="--hover-opacity: {{ $hoverOpacity }};"
                                           @click="toggleRating($event, {{ $index }}, {{ $ringIndex + 1 }})"
                                           @mouseenter="showTooltip($event, '{{ $statement }} - Bewertung: {{ $ringIndex + 1 }}')"
                                           @mouseleave="hideTooltip()">
                                            <!-- Outer arc -->
                                            <path
                                                d="M {{ $startX }} {{ $startY }}
                                                   A {{ $outerRadius }} {{ $outerRadius }} 0 0 1 {{ $endX }} {{ $endY }}
                                                   L {{ $innerEndX }} {{ $innerEndY }}
                                                   A {{ $innerRadius }} {{ $innerRadius }} 0 0 0 {{ $innerStartX }} {{ $innerStartY }}
                                                   Z"
                                                class="fill-transparent transition-colors stroke-transparent hover:fill-blue-500 hover:fill-opacity-[var(--hover-opacity)]"
                                            />
                                        </g>
                                    @endforeach
                                @endforeach
                                <!-- Rating Markers -->
                                <g x-html="marks.map(mark => `
                                    <circle
                                        cx='${getMarkPosition(mark).cx}'
                                        cy='${getMarkPosition(mark).cy}'
                                        r='3'
                                        class='fill-blue-500'
                                        style='opacity: 0;'
                                        transform='translate(0,0)'
                                    />`).join('')">
                                </g>
                            </svg>
                            <!-- Tooltip -->
                            <div
                                x-show="tooltip.show"
                                x-cloak
                                class="tooltip"
                                :style="`left: ${tooltip.x}px; top: ${tooltip.y}px;`"
                                x-text="tooltip.text">
                            </div>
                            <!-- Labels -->
                            @foreach(['Ich lerne im Unterricht viel.',
                                    'Die Lehrkraft hat ein großes Hintergrundwissen.',
                                    'Die Lehrkraft ist immer gut vorbereitet.',
                                    'Die Lehrkraft zeigt Interesse an ihren Schülern.',
                                    'Die Lehrkraft sorgt für ein gutes Lernklima in der Klasse.',
                                    'Die Notengebung ist fair und nachvollziehbar.',
                                    'Ich konnte dem Unterricht immer gut folgen.',
                                    'Der Unterricht wird vielfältig gestaltet.'] as $index => $statement)
                                @php
                                    $angle = ($index * pi() / 4) + (pi() / 8);
                                    $labelRadius = 410;
                                    $offsetX = $labelRadius * cos($angle);
                                    $offsetY = $labelRadius * sin($angle);
                                    // Text alignment based on position
                                    if ($index >= 6) {
                                        $textAlign = 'right';
                                        $maxWidth = '180px';
                                    } elseif ($index <= 1) {
                                        $textAlign = 'left';
                                        $maxWidth = '180px';
                                    } else {
                                        $textAlign = 'center';
                                        $maxWidth = '180px';
                                    }
                                @endphp
                                <div class="absolute text-sm leading-tight"
                                     style="
                                        left: calc(50% + {{ $offsetX }}px);
                                        top: calc(50% + {{ $offsetY }}px);
                                        transform: translate(-50%, -50%);
                                        max-width: {{ $maxWidth }};
                                        width: {{ $maxWidth }};
                                        text-align: {{ $textAlign }};
                                     ">
                                    {{ $statement }}
                                </div>
                            @endforeach
                        </div>
                    </div>
                    <!-- Open Feedback Section -->
                    <div class="max-w-3xl mx-auto mt-32">
                        <label class="block font-medium mb-4">
                            Was ich sonst noch anmerken möchte:
                        </label>
                        <textarea
                            x-ref="feedbackText"
                            x-model="feedback"
                            rows="4"
                            class="block w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-indigo-500 focus:ring-indigo-500"
                        ></textarea>
                    </div>
                    <!-- Submit Button -->
                    <div class="flex justify-end mt-8">
                        <form action="{{ route('surveys.submit', $survey->accesskey) }}" method="POST">
                            @csrf
                            <input type="hidden" name="responses" x-bind:value="JSON.stringify({ratings: marks, feedback: feedback})">
                            <x-primary-button type="submit">
                                {{ __('surveys.submit_response') }} <x-fas-arrow-right class="w-4 h-4 ml-2" />
                            </x-primary-button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @push('scripts')
    <script>
        document.addEventListener('alpine:init', () => {
            Alpine.data('targetDiagram', () => ({
                marks: [],
                feedback: '',
                tooltip: {
                    show: false,
                    x: 0,
                    y: 0,
                    text: ''
                },
                init() {
                    // Initialize with an empty array
                    this.marks = [];
                },
                isSelected(segment, rating) {
                    return this.marks.some(m => m.segment === segment && m.rating === rating);
                },
                toggleRating(event, segment, rating) {
                    event.preventDefault();
                    const existingMarkIndex = this.marks.findIndex(m => m.segment === segment);
                    if (existingMarkIndex !== -1) {
                        if (this.marks[existingMarkIndex].rating === rating) {
                            // Remove the mark if clicking the same rating
                            this.marks.splice(existingMarkIndex, 1);
                        } else {
                            // Update the rating if clicking a different rating
                            this.marks[existingMarkIndex].rating = rating;
                        }
                    } else {
                        // Add new mark
                        this.marks.push({ segment, rating });
                    }
                    // Create a new array reference to trigger reactivity
                    this.marks = [...this.marks];
                },
                getMarkPosition(mark) {
                    if (!mark || typeof mark.segment === 'undefined' || typeof mark.rating === 'undefined') {
                        return { cx: 200, cy: 200 };
                    }
                    const radius = 200 - (mark.rating * 40) + 20; // Adjust the position to be in the middle of each ring
                    const angle = (mark.segment * Math.PI / 4) + (Math.PI / 8); // Center in segment
                    return {
                        cx: 200 + radius * Math.cos(angle),
                        cy: 200 + radius * Math.sin(angle)
                    };
                },
                showTooltip(event, text) {
                    const rect = event.target.closest('svg').getBoundingClientRect();
                    this.tooltip = {
                        show: true,
                        x: event.clientX - rect.left + 10,
                        y: event.clientY - rect.top + 10,
                        text
                    };
                },
                hideTooltip() {
                    this.tooltip.show = false;
                },
                getStatementForSegment(segment) {
                    const statements = [
                        'Ich lerne im Unterricht viel.',
                        'Die Lehrkraft hat ein großes Hintergrundwissen.',
                        'Die Lehrkraft ist immer gut vorbereitet.',
                        'Die Lehrkraft zeigt Interesse an ihren Schülern.',
                        'Die Lehrkraft sorgt für ein gutes Lernklima in der Klasse.',
                        'Die Notengebung ist fair und nachvollziehbar.',
                        'Ich konnte dem Unterricht immer gut folgen.',
                        'Der Unterricht wird vielfältig gestaltet.'
                    ];
                    return statements[segment] || '';
                }
            }));
        });
    </script>
    @endpush
</x-survey-layout>
</file>

<file path="resources/views/survey_templates/target.blade.php">
<x-app-layout>
    <style>
        path:hover {
            fill: rgba(59, 130, 246, var(--hover-opacity)) !important;
        }
        path.selected {
            fill: rgba(59, 130, 246, var(--hover-opacity)) !important;
            stroke: rgb(59, 130, 246) !important;
            stroke-width: 2px !important;
        }
        .dark path:hover,
        .dark path.selected {
            fill: rgba(96, 165, 250, var(--hover-opacity)) !important;
            stroke: rgb(96, 165, 250) !important;
        }
        g.selected path {
            fill: rgba(59, 130, 246, var(--hover-opacity)) !important;
            stroke: rgb(59, 130, 246) !important;
            stroke-width: 2px !important;
        }
        .dark g.selected path {
            fill: rgba(96, 165, 250, var(--hover-opacity)) !important;
            stroke: rgb(96, 165, 250) !important;
        }
        .tooltip {
            position: absolute;
            background-color: rgba(0, 0, 0, 0.75);
            color: #fff;
            padding: 5px 10px;
            border-radius: 4px;
            pointer-events: none;
            font-size: 0.875rem;
            z-index: 50;
        }
    </style>
    <!-- Create Survey Button -->
    <div class="fixed bottom-8 right-8 z-50">
        <form action="{{ route('surveys.create') }}" method="GET">
            <input type="hidden" name="template" value="target">
            <x-primary-button class="gap-2 text-base py-3 px-6 shadow-lg">
                {{ __('templates.use_template') }}
                <x-fas-arrow-right class="w-4 h-4" />
            </x-primary-button>
        </form>
    </div>
    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900 dark:text-gray-100" x-data="targetDiagram()">
                    <!-- Title and Instructions -->
                    <h1 class="text-2xl font-bold text-center mb-8">Zielscheibe</h1>
                    <p class="text-center mb-10 max-w-3xl mx-auto">
                        Bitte bewerten Sie die angegebenen Teilbereiche und setzen Sie innerhalb der einzelnen Segmente an der nach Ihrer Meinung richtigen Stelle ein Kreuzchen. Je näher das Kreuzchen in der Mitte der Zielscheibe gesetzt wird, desto positiver ist die Bewertung.
                    </p>
                    <p class="text-center mb-36 text-sm text-gray-600 dark:text-gray-400">
                        Die Auswertung der Fragebögen erfolgt anonym.
                    </p>
                    <!-- Target Diagram -->
                    <div class="mb-40 relative mt-20">
                        <div class="aspect-square max-w-2xl mx-auto relative">
                            <svg viewBox="-20 -20 440 440" class="w-full h-full">
                                <!-- Rings -->
                                <circle cx="200" cy="200" r="200" class="fill-gray-100 dark:fill-gray-700 stroke-gray-300 dark:stroke-gray-600" />
                                <circle cx="200" cy="200" r="160" class="fill-none stroke-gray-300 dark:stroke-gray-600" />
                                <circle cx="200" cy="200" r="120" class="fill-none stroke-gray-300 dark:stroke-gray-600" />
                                <circle cx="200" cy="200" r="80" class="fill-none stroke-gray-300 dark:stroke-gray-600" />
                                <circle cx="200" cy="200" r="40" class="fill-none stroke-gray-300 dark:stroke-gray-600" />
                                <!-- Ring Labels -->
                                <text x="205" y="25" class="text-xs fill-gray-500 dark:fill-gray-400">1</text>
                                <text x="205" y="65" class="text-xs fill-gray-500 dark:fill-gray-400">2</text>
                                <text x="205" y="105" class="text-xs fill-gray-500 dark:fill-gray-400">3</text>
                                <text x="205" y="145" class="text-xs fill-gray-500 dark:fill-gray-400">4</text>
                                <text x="205" y="185" class="text-xs fill-gray-500 dark:fill-gray-400">5</text>
                                <!-- Segment Lines -->
                                @for ($i = 0; $i < 8; $i++)
                                    <line
                                        x1="200"
                                        y1="200"
                                        x2="{{ 200 + 200 * cos($i * pi() / 4) }}"
                                        y2="{{ 200 + 200 * sin($i * pi() / 4) }}"
                                        class="stroke-gray-300 dark:stroke-gray-600"
                                    />
                                @endfor
                                <!-- Click Areas -->
                                @foreach(['Ich lerne im Unterricht viel.',
                                        'Die Lehrkraft hat ein großes Hintergrundwissen.',
                                        'Die Lehrkraft ist immer gut vorbereitet.',
                                        'Die Lehrkraft zeigt Interesse an ihren Schülern.',
                                        'Die Lehrkraft sorgt für ein gutes Lernklima in der Klasse.',
                                        'Die Notengebung ist fair und nachvollziehbar.',
                                        'Ich konnte dem Unterricht immer gut folgen.',
                                        'Der Unterricht wird vielfältig gestaltet.'] as $index => $statement)
                                    @foreach([200, 160, 120, 80, 40] as $ringIndex => $outerRadius)
                                        @php
                                            $innerRadius = $ringIndex < 4 ? [160, 120, 80, 40][$ringIndex] : 0;
                                            $hoverOpacity = ($ringIndex + 1) * 0.15;
                                            // Calculate arc points
                                            $startX = 200 + $outerRadius * cos($index * pi() / 4);
                                            $startY = 200 + $outerRadius * sin($index * pi() / 4);
                                            $endX = 200 + $outerRadius * cos(($index + 1) * pi() / 4);
                                            $endY = 200 + $outerRadius * sin(($index + 1) * pi() / 4);
                                            $innerStartX = 200 + $innerRadius * cos($index * pi() / 4);
                                            $innerStartY = 200 + $innerRadius * sin($index * pi() / 4);
                                            $innerEndX = 200 + $innerRadius * cos(($index + 1) * pi() / 4);
                                            $innerEndY = 200 + $innerRadius * sin(($index + 1) * pi() / 4);
                                        @endphp
                                        <g class="cursor-pointer"
                                           :class="{ 'selected': isSelected({{ $index }}, {{ $ringIndex + 1 }}) }"
                                           style="--hover-opacity: {{ $hoverOpacity }};"
                                           @click="toggleRating($event, {{ $index }}, {{ $ringIndex + 1 }})"
                                           @mouseenter="showTooltip($event, '{{ $statement }} - Bewertung: {{ $ringIndex + 1 }}')"
                                           @mouseleave="hideTooltip()">
                                            <!-- Outer arc -->
                                            <path
                                                d="M {{ $startX }} {{ $startY }}
                                                   A {{ $outerRadius }} {{ $outerRadius }} 0 0 1 {{ $endX }} {{ $endY }}
                                                   L {{ $innerEndX }} {{ $innerEndY }}
                                                   A {{ $innerRadius }} {{ $innerRadius }} 0 0 0 {{ $innerStartX }} {{ $innerStartY }}
                                                   Z"
                                                class="fill-transparent transition-colors stroke-transparent hover:fill-blue-500 hover:fill-opacity-[var(--hover-opacity)]"
                                            />
                                        </g>
                                    @endforeach
                                @endforeach
                                <!-- Rating Markers -->
                                <g x-html="marks.map(mark => `
                                    <circle
                                        cx='${getMarkPosition(mark).cx}'
                                        cy='${getMarkPosition(mark).cy}'
                                        r='3'
                                        class='fill-blue-500'
                                        style='opacity: 0;'
                                        transform='translate(0,0)'
                                    />`).join('')">
                                </g>
                            </svg>
                            <!-- Tooltip -->
                            <div
                                x-show="tooltip.show"
                                x-cloak
                                class="tooltip"
                                :style="`left: ${tooltip.x}px; top: ${tooltip.y}px;`"
                                x-text="tooltip.text">
                            </div>
                            <!-- Labels -->
                            @foreach(['Ich lerne im Unterricht viel.',
                                    'Die Lehrkraft hat ein großes Hintergrundwissen.',
                                    'Die Lehrkraft ist immer gut vorbereitet.',
                                    'Die Lehrkraft zeigt Interesse an ihren Schülern.',
                                    'Die Lehrkraft sorgt für ein gutes Lernklima in der Klasse.',
                                    'Die Notengebung ist fair und nachvollziehbar.',
                                    'Ich konnte dem Unterricht immer gut folgen.',
                                    'Der Unterricht wird vielfältig gestaltet.'] as $index => $statement)
                                @php
                                    $angle = ($index * pi() / 4) + (pi() / 8);
                                    $labelRadius = 410;
                                    $offsetX = $labelRadius * cos($angle);
                                    $offsetY = $labelRadius * sin($angle);
                                    // Text alignment based on position
                                    if ($index >= 6) {
                                        $textAlign = 'right';
                                        $maxWidth = '180px';
                                    } elseif ($index <= 1) {
                                        $textAlign = 'left';
                                        $maxWidth = '180px';
                                    } else {
                                        $textAlign = 'center';
                                        $maxWidth = '180px';
                                    }
                                @endphp
                                <div class="absolute text-sm leading-tight"
                                     style="
                                        left: calc(50% + {{ $offsetX }}px);
                                        top: calc(50% + {{ $offsetY }}px);
                                        transform: translate(-50%, -50%);
                                        max-width: {{ $maxWidth }};
                                        width: {{ $maxWidth }};
                                        text-align: {{ $textAlign }};
                                     ">
                                    {{ $statement }}
                                </div>
                            @endforeach
                        </div>
                    </div>
                    <!-- Open Feedback Section -->
                    <div class="max-w-3xl mx-auto mt-32">
                        <label class="block font-medium mb-4">
                            Was ich sonst noch anmerken möchte:
                        </label>
                        <textarea
                            x-ref="feedbackText"
                            x-model="feedback"
                            rows="4"
                            class="block w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-indigo-500 focus:ring-indigo-500"
                        ></textarea>
                    </div>
                    <!-- Submit Button -->
                    <div class="flex justify-end mt-8">
                        <form action="{{ route('surveys.store') }}" method="POST">
                            @csrf
                            <input type="hidden" name="template_id" value="{{ optional(App\Models\Feedback_template::where('name', 'templates.feedback.target')->first())->id ?? '' }}">
                            <input type="hidden" name="expire_date" value="{{ \Carbon\Carbon::now()->addDays(30)->format('Y-m-d H:i:s') }}">
                            <input type="hidden" name="response_limit" value="30">
                            <input type="hidden" name="school_year" value="{{ App\Models\SchoolYear::active()->first()->name ?? '2023/24' }}">
                            <input type="hidden" name="department" value="{{ App\Models\Department::active()->first()->code ?? 'AIT' }}">
                            <input type="hidden" name="grade_level" value="{{ App\Models\GradeLevel::active()->first()->level ?? '5' }}">
                            <input type="hidden" name="class" value="{{ App\Models\SchoolClass::active()->first()->name ?? '5a' }}">
                            <input type="hidden" name="subject" value="{{ App\Models\Subject::active()->first()->code ?? 'math' }}">
                            <input type="hidden" name="survey_data" x-bind:value="JSON.stringify({ratings: marks, feedback: feedback})">
                            <x-primary-button type="submit" disabled>
                                Absenden <x-fas-arrow-right class="w-6 h-6 ml-2" />
                            </x-primary-button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @push('scripts')
    <script>
        document.addEventListener('alpine:init', () => {
            Alpine.data('targetDiagram', () => ({
                marks: [],
                feedback: '',
                tooltip: {
                    show: false,
                    x: 0,
                    y: 0,
                    text: ''
                },
                init() {
                    // Initialize with an empty array
                    this.marks = [];
                },
                isSelected(segment, rating) {
                    return this.marks.some(m => m.segment === segment && m.rating === rating);
                },
                toggleRating(event, segment, rating) {
                    event.preventDefault();
                    const existingMarkIndex = this.marks.findIndex(m => m.segment === segment);
                    if (existingMarkIndex !== -1) {
                        if (this.marks[existingMarkIndex].rating === rating) {
                            // Remove the mark if clicking the same rating
                            this.marks.splice(existingMarkIndex, 1);
                        } else {
                            // Update the rating if clicking a different rating
                            this.marks[existingMarkIndex].rating = rating;
                        }
                    } else {
                        // Add new mark
                        this.marks.push({ segment, rating });
                    }
                    // Create a new array reference to trigger reactivity
                    this.marks = [...this.marks];
                },
                getMarkPosition(mark) {
                    if (!mark || typeof mark.segment === 'undefined' || typeof mark.rating === 'undefined') {
                        return { cx: 200, cy: 200 };
                    }
                    const radius = 200 - (mark.rating * 40) + 20; // Adjust the position to be in the middle of each ring
                    const angle = (mark.segment * Math.PI / 4) + (Math.PI / 8); // Center in segment
                    return {
                        cx: 200 + radius * Math.cos(angle),
                        cy: 200 + radius * Math.sin(angle)
                    };
                },
                showTooltip(event, text) {
                    const rect = event.target.closest('svg').getBoundingClientRect();
                    this.tooltip = {
                        show: true,
                        x: event.clientX - rect.left + 10,
                        y: event.clientY - rect.top + 10,
                        text
                    };
                },
                hideTooltip() {
                    this.tooltip.show = false;
                },
                getStatementForSegment(segment) {
                    const statements = [
                        'Ich lerne im Unterricht viel.',
                        'Die Lehrkraft hat ein großes Hintergrundwissen.',
                        'Die Lehrkraft ist immer gut vorbereitet.',
                        'Die Lehrkraft zeigt Interesse an ihren Schülern.',
                        'Die Lehrkraft sorgt für ein gutes Lernklima in der Klasse.',
                        'Die Notengebung ist fair und nachvollziehbar.',
                        'Ich konnte dem Unterricht immer gut folgen.',
                        'Der Unterricht wird vielfältig gestaltet.'
                    ];
                    return statements[segment] || '';
                },
                handleSubmit() {
                    const surveyData = {
                        ratings: this.marks.map(mark => ({
                            segment: mark.segment,
                            rating: mark.rating,
                            statement: this.getStatementForSegment(mark.segment)
                        })),
                        feedback: this.$refs.feedbackText?.value || ''
                    };
                    // Log the results
                    console.log('Survey Results:', surveyData);
                    console.table(surveyData.ratings);
                }
            }));
        });
    </script>
    @endpush
</x-app-layout>
</file>

<file path="resources/views/surveys/create.blade.php">
<x-app-layout>
    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900 dark:text-gray-100">
                    <h2 class="text-2xl font-bold mb-6">{{ __('surveys.create_new_survey') }}</h2>
                    <form method="POST" action="{{ route('surveys.store') }}">
                        @csrf
                        <!-- Template Selection (hidden since it's pre-selected) -->
                        <input type="hidden" name="template_id" value="{{ optional($templates->where('name', 'templates.feedback.' . $selectedTemplate)->first())->id ?? '' }}">
                        <!-- School Year -->
                        <div class="mb-6">
                            <x-input-label for="school_year" :value="__('surveys.select_school_year')" />
                            <select id="school_year"
                                    name="school_year"
                                    class="mt-1 block w-full border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-indigo-500 dark:focus:border-indigo-600 focus:ring-indigo-500 dark:focus:ring-indigo-600 rounded-md shadow-sm"
                                    required>
                                <option value="">{{ __('surveys.select_school_year_placeholder') }}</option>
                                @foreach($schoolYears as $year)
                                    <option value="{{ $year->name }}">{{ $year->name }}</option>
                                @endforeach
                            </select>
                            <x-input-error :messages="$errors->get('school_year')" class="mt-2" />
                        </div>
                        <!-- Department -->
                        <div class="mb-6">
                            <x-input-label for="department" :value="__('surveys.select_department')" />
                            <select id="department"
                                    name="department"
                                    class="mt-1 block w-full border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-indigo-500 dark:focus:border-indigo-600 focus:ring-indigo-500 dark:focus:ring-indigo-600 rounded-md shadow-sm"
                                    required>
                                <option value="">{{ __('surveys.select_department_placeholder') }}</option>
                                @foreach($departments as $dept)
                                    <option value="{{ $dept->name }}">{{ $dept->name }}</option>
                                @endforeach
                            </select>
                            <x-input-error :messages="$errors->get('department')" class="mt-2" />
                        </div>
                        <!-- Grade Level -->
                        <div class="mb-6">
                            <x-input-label for="grade_level" :value="__('surveys.select_grade_level')" />
                            <select id="grade_level"
                                    name="grade_level"
                                    class="mt-1 block w-full border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-indigo-500 dark:focus:border-indigo-600 focus:ring-indigo-500 dark:focus:ring-indigo-600 rounded-md shadow-sm"
                                    required>
                                <option value="">{{ __('surveys.select_grade_level_placeholder') }}</option>
                                @foreach($gradeLevels as $grade)
                                    <option value="{{ $grade->name }}">{{ $grade->name }}</option>
                                @endforeach
                            </select>
                            <x-input-error :messages="$errors->get('grade_level')" class="mt-2" />
                        </div>
                        <!-- Class Selection -->
                        <div class="mb-6">
                            <x-input-label for="class" :value="__('surveys.select_class')" />
                            <select id="class"
                                    name="class"
                                    class="mt-1 block w-full border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-indigo-500 dark:focus:border-indigo-600 focus:ring-indigo-500 dark:focus:ring-indigo-600 rounded-md shadow-sm"
                                    required>
                                <option value="">{{ __('surveys.select_class_placeholder') }}</option>
                                @foreach($schoolClasses as $class)
                                    <option value="{{ $class->name }}">{{ $class->name }}</option>
                                @endforeach
                            </select>
                            <x-input-error :messages="$errors->get('class')" class="mt-2" />
                        </div>
                        <!-- Subject Selection -->
                        <div class="mb-6">
                            <x-input-label for="subject" :value="__('surveys.select_subject')" />
                            <select id="subject"
                                    name="subject"
                                    class="mt-1 block w-full border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-indigo-500 dark:focus:border-indigo-600 focus:ring-indigo-500 dark:focus:ring-indigo-600 rounded-md shadow-sm"
                                    required>
                                <option value="">{{ __('surveys.select_subject_placeholder') }}</option>
                                @foreach($subjects as $subject)
                                    <option value="{{ $subject->name }}">{{ $subject->name }}</option>
                                @endforeach
                            </select>
                            <x-input-error :messages="$errors->get('subject')" class="mt-2" />
                        </div>
                        <!-- Response Limit -->
                        <div class="mb-6">
                            <x-input-label for="response_limit" :value="__('surveys.response_limit')" />
                            <x-text-input
                                id="response_limit"
                                name="response_limit"
                                type="number"
                                min="-1"
                                class="mt-1 block w-full"
                                :value="old('response_limit', -1)"
                            />
                            <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
                                {{ __('surveys.response_limit_help') }}
                            </p>
                            <x-input-error :messages="$errors->get('response_limit')" class="mt-2" />
                        </div>
                        <!-- Expiration Date -->
                        <div class="mb-6">
                            <x-input-label for="expire_date" :value="__('surveys.expire_date')" />
                            <x-text-input
                                id="expire_date"
                                name="expire_date"
                                type="datetime-local"
                                class="mt-1 block w-full"
                                required
                            />
                            <x-input-error :messages="$errors->get('expire_date')" class="mt-2" />
                        </div>
                        <!-- Template Information Section -->
                        <div class="mb-6">
                            <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
                                <h3 class="text-lg font-semibold mb-2">{{ __('surveys.template_information') }}</h3>
                                <p class="text-sm text-gray-600 dark:text-gray-300 mb-2">
                                    {{ __('surveys.template_info_description') }}
                                </p>
                                <div class="flex items-center">
                                    <div class="flex-shrink-0 mr-3">
                                        <img src="{{ asset('img/preview.png') }}" alt="Template preview" class="w-16 h-16 object-cover rounded">
                                    </div>
                                    <div>
                                        <h4 class="font-medium">{{ __('templates.feedback.' . $selectedTemplate) }}</h4>
                                        <p class="text-sm text-gray-500 dark:text-gray-400">
                                            {{ __('templates.' . $selectedTemplate . '_feedback_description') }}
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="flex justify-end gap-4">
                            <x-secondary-button type="button" onclick="window.history.back()">
                                {{ __('Cancel') }}
                            </x-secondary-button>
                            <x-primary-button>
                                {{ __('surveys.create_survey') }}
                            </x-primary-button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    @push('scripts')
    <script>
        // Initialize any needed JavaScript here
        document.addEventListener('DOMContentLoaded', function() {
            // Set default expiration date to 30 days from now
            const expireDate = document.getElementById('expire_date');
            if (expireDate) {
                const date = new Date();
                date.setDate(date.getDate() + 30);
                expireDate.value = date.toISOString().slice(0, 16);
            }
        });
    </script>
    @endpush
</x-app-layout>
</file>

<file path="resources/views/surveys/respond.blade.php">
<x-guest-layout>
    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900 dark:text-gray-100">
                    <h1 class="text-2xl font-bold text-center mb-8">
                        {{ $survey->feedback_template->title ?? __('surveys.survey') }}
                    </h1>
                    <!-- Session Status -->
                    <x-auth-session-status class="mb-4" :status="session('status')" />
                    <!-- Validation Errors -->
                    @if ($errors->any())
                        <div class="mb-4">
                            <div class="font-medium text-red-600 dark:text-red-400">
                                {{ __('surveys.whoops') }}
                            </div>
                            <ul class="mt-3 list-disc list-inside text-sm text-red-600 dark:text-red-400">
                                @foreach ($errors->all() as $error)
                                    <li>{{ $error }}</li>
                                @endforeach
                            </ul>
                        </div>
                    @endif
                    <!-- Error Message -->
                    @if (session('error'))
                        <div class="mb-4 font-medium text-sm text-red-600 dark:text-red-400">
                            {{ session('error') }}
                        </div>
                    @endif
                    <form method="POST" action="{{ route('surveys.submit', $survey->accesskey) }}">
                        @csrf
                        <!-- Survey Information -->
                        <div class="mb-6 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                            <h1 class="text-2xl font-bold mb-4 text-center">
                                {{ $survey->feedback_template->title ?? __('surveys.survey') }}
                            </h1>
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
                                @if($survey->subject)
                                    <div>
                                        <span class="font-semibold">{{ __('surveys.subject') }}:</span>
                                        <span>{{ $survey->subject }}</span>
                                    </div>
                                @endif
                                @if($survey->grade_level)
                                    <div>
                                        <span class="font-semibold">{{ __('surveys.grade_level') }}:</span>
                                        <span>{{ $survey->grade_level }}</span>
                                    </div>
                                @endif
                                @if($survey->class)
                                    <div>
                                        <span class="font-semibold">{{ __('surveys.class') }}:</span>
                                        <span>{{ $survey->class }}</span>
                                    </div>
                                @endif
                            </div>
                        </div>
                        <!-- Survey Questions -->
                        <div class="space-y-8">
                            @foreach($survey->questions->sortBy('order') as $question)
                                <div class="p-4 border rounded-lg">
                                    <h3 class="font-semibold mb-3">{{ $question->order }}. {{ $question->question }}</h3>
                                    @php
                                        $templateType = $question->question_template->type ?? 'text';
                                    @endphp
                                    @if($templateType === 'smiley')
                                        <div class="flex justify-between items-center">
                                            @foreach(['😡', '😕', '😐', '🙂', '😄'] as $index => $smiley)
                                                <label class="flex flex-col items-center cursor-pointer">
                                                    <span class="text-3xl mb-2">{{ $smiley }}</span>
                                                    <input type="radio" name="responses[{{ $question->id }}]" value="{{ $index + 1 }}" class="form-radio" required>
                                                </label>
                                            @endforeach
                                        </div>
                                    @elseif($templateType === 'target')
                                        <div class="flex justify-center">
                                            <div class="relative w-64 h-64">
                                                @foreach(range(5, 1, -1) as $value)
                                                    <div class="absolute inset-0 rounded-full border-2 border-gray-300 dark:border-gray-600"
                                                        style="transform: scale({{ $value / 5 }})">
                                                    </div>
                                                @endforeach
                                                <div class="absolute inset-0 flex items-center justify-center">
                                                    <div class="space-y-2">
                                                        @foreach(range(1, 5) as $value)
                                                            <label class="flex items-center space-x-2 cursor-pointer">
                                                                <input type="radio" name="responses[{{ $question->id }}]" value="{{ $value }}" class="form-radio" required>
                                                                <span>{{ $value }}</span>
                                                            </label>
                                                        @endforeach
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    @elseif($templateType === 'checkbox')
                                        <div class="space-y-2">
                                            @foreach(['Yes', 'No', 'Not applicable'] as $index => $option)
                                                <label class="flex items-center space-x-2 cursor-pointer">
                                                    <input type="radio" name="responses[{{ $question->id }}]" value="{{ $option }}" class="form-radio" required>
                                                    <span>{{ $option }}</span>
                                                </label>
                                            @endforeach
                                        </div>
                                    @elseif($templateType === 'table')
                                        <div class="overflow-x-auto">
                                            <table class="w-full">
                                                <thead>
                                                    <tr class="border-b">
                                                        <th class="text-center py-2">{{ __('surveys.strongly_agree') }}</th>
                                                        <th class="text-center py-2">{{ __('surveys.agree') }}</th>
                                                        <th class="text-center py-2">{{ __('surveys.disagree') }}</th>
                                                        <th class="text-center py-2">{{ __('surveys.strongly_disagree') }}</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <tr>
                                                        @foreach(range(1, 4) as $value)
                                                            <td class="text-center py-2">
                                                                <input type="radio" name="responses[{{ $question->id }}]" value="{{ $value }}" class="form-radio" required>
                                                            </td>
                                                        @endforeach
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    @else
                                        <textarea name="responses[{{ $question->id }}]" rows="3" class="block w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-indigo-500 focus:ring-indigo-500" required></textarea>
                                    @endif
                                </div>
                            @endforeach
                        </div>
                        <div class="flex justify-end mt-6">
                            <x-primary-button>
                                {{ __('surveys.submit_response') }}
                            </x-primary-button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</x-guest-layout>
</file>

<file path="resources/views/surveys/statistics.blade.php">
<x-app-layout>
    <x-slot name="header">
        <div class="bg-indigo-100 dark:bg-indigo-900 py-4 px-6 rounded-md shadow-md">
            <h2 class="font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight">
                {{ __('Survey Statistics') }} - {{ $survey->feedback_template->title ?? 'Survey' }}
            </h2>
        </div>
    </x-slot>
    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900 dark:text-gray-100">
                    <div class="mb-8">
                        <a href="{{ route('dashboard') }}" class="flex flex-row gap-2 items-center w-fit text-lg px-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 text-gray-500 dark:text-gray-300" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                            </svg>
                            <span class="text-gray-500 dark:text-gray-400">{{ __('Back to Dashboard') }}</span>
                        </a>
                    </div>
                    <h3 class="text-xl font-semibold mb-4 text-indigo-700 dark:text-indigo-300">{{ __('Survey Details') }}</h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-10">
                        <div class="bg-gray-50 dark:bg-gray-700 p-5 rounded-lg shadow-sm">
                            <p class="mb-2"><span class="font-semibold">Survey Title:</span> {{ $survey->feedback_template->title ?? 'N/A' }}</p>
                            <p class="mb-2"><span class="font-semibold">Access Key:</span> {{ $survey->accesskey }}</p>
                            <p><span class="font-semibold">Created:</span> {{ $survey->created_at->format('M d, Y') }}</p>
                        </div>
                        <div class="bg-gray-50 dark:bg-gray-700 p-5 rounded-lg shadow-sm">
                            <p class="mb-2"><span class="font-semibold">Responses:</span> {{ $survey->submission_count }} / {{ $survey->limit == -1 ? '∞' : $survey->limit }}</p>
                            <p class="mb-2"><span class="font-semibold">Expires:</span> {{ $survey->expire_date->format('M d, Y') }}</p>
                            <p><span class="font-semibold">Status:</span>
                                @if($survey->expire_date->isPast())
                                    <span class="text-red-500 font-medium">Expired</span>
                                @else
                                    <span class="text-green-500 font-medium">Active</span>
                                @endif
                            </p>
                        </div>
                    </div>
                    <h3 class="text-xl font-semibold mt-10 mb-6 text-indigo-700 dark:text-indigo-300">{{ __('Question Statistics') }}</h3>
                    @if(count($statisticsData) > 0)
                        @php
                            // Check if this is a target survey and has target statistics
                            $hasTargetStatistics = false;
                            foreach($statisticsData as $stat) {
                                if($stat['template_type'] === 'target' && isset($stat['data']['segment_statistics'])) {
                                    $hasTargetStatistics = true;
                                    break;
                                }
                            }
                            // Check if this is a table survey
                            $isTableSurvey = false;
                            foreach($statisticsData as $stat) {
                                if($stat['template_type'] === 'table' && isset($stat['data']['table_survey']) && $stat['data']['table_survey'] === true) {
                                    $isTableSurvey = true;
                                    break;
                                }
                            }
                            // Group table survey questions by categories
                            $tableCategories = [
                                'behavior' => [
                                    'title' => 'Verhalten des Lehrers',
                                    'questions' => [],
                                ],
                                'fairness' => [
                                    'title' => 'Fairness und Umgang mit Schülern',
                                    'questions' => [],
                                ],
                                'quality' => [
                                    'title' => 'Unterrichtsqualität',
                                    'questions' => [],
                                ],
                                'evaluation' => [
                                    'title' => 'Bewertung',
                                    'questions' => [],
                                ],
                                'feedback' => [
                                    'title' => 'Offenes Feedback',
                                    'questions' => [],
                                ],
                            ];
                            // Map questions to categories based on content
                            if ($isTableSurvey) {
                                foreach($statisticsData as $index => $stat) {
                                    if (!isset($stat['question'])) continue;
                                    $question = $stat['question']->question ?? '';
                                    if (Str::startsWith($question, '...') &&
                                        !Str::startsWith($question, '... bevorzugt') &&
                                        !Str::startsWith($question, '... nimmt') &&
                                        !Str::startsWith($question, '... ermutigt') &&
                                        !Str::startsWith($question, '... entscheidet') &&
                                        !Str::startsWith($question, '... gesteht')) {
                                        $tableCategories['behavior']['questions'][] = $stat;
                                    } elseif (Str::startsWith($question, '...')) {
                                        $tableCategories['fairness']['questions'][] = $stat;
                                    } elseif (Str::startsWith($question, 'Die Themen der Schulaufgaben') ||
                                              Str::startsWith($question, 'Der Schwierigkeitsgrad') ||
                                              Str::startsWith($question, 'Die Bewertungen sind')) {
                                        $tableCategories['evaluation']['questions'][] = $stat;
                                    } elseif (Str::startsWith($question, 'Das hat mir') ||
                                              Str::startsWith($question, 'Verbesserungsvorschläge')) {
                                        $tableCategories['feedback']['questions'][] = $stat;
                                    } else {
                                        $tableCategories['quality']['questions'][] = $stat;
                                    }
                                }
                            }
                            // Check if any of the questions has responses
                            $categoryHasResponses = [];
                            foreach ($tableCategories as $catKey => $category) {
                                $categoryHasResponses[$catKey] = false;
                                foreach ($category['questions'] as $stat) {
                                    if ($stat['template_type'] === 'range' &&
                                        isset($stat['data']['average_rating']) &&
                                        is_numeric($stat['data']['average_rating'])) {
                                        $categoryHasResponses[$catKey] = true;
                                        break;
                                    } elseif (($stat['template_type'] === 'text' || $stat['template_type'] === 'textarea') &&
                                             isset($stat['data']['response_count']) &&
                                             $stat['data']['response_count'] > 0) {
                                        $categoryHasResponses[$catKey] = true;
                                        break;
                                    }
                                }
                            }
                        @endphp
                        @foreach($statisticsData as $index => $stat)
                            @if($stat['template_type'] === 'error')
                                <div class="p-4 bg-red-50 dark:bg-red-900 text-red-800 dark:text-red-200 rounded-lg mb-6 shadow-sm">
                                    <p class="font-semibold">{{ $stat['data']['message'] }}</p>
                                    @if(isset($stat['data']['error_type']))
                                        <p class="text-sm mt-2">Error Type: {{ $stat['data']['error_type'] }}</p>
                                    @endif
                                    <p class="text-sm mt-2">Please try again later or contact support if the problem persists.</p>
                                </div>
                                @break
                            @endif
                            @if($hasTargetStatistics && $stat['template_type'] !== 'target' && str_contains($survey->feedback_template->name ?? '', 'templates.feedback.target'))
                                @continue
                            @endif
                            <!-- Skip individual stats for table survey, they'll be shown in the categories -->
                            @if($isTableSurvey && $stat['question'])
                                @continue
                            @endif
                            <div class="mb-8 p-6 border rounded-lg bg-gray-50 dark:bg-gray-700 shadow-sm hover:shadow-md transition-shadow duration-300">
                                @if($stat['question'])
                                    <h4 class="font-semibold text-lg text-gray-800 dark:text-gray-200">{{ $index + 1 }}. {{ $stat['question']->question }}</h4>
                                    <p class="text-sm text-gray-500 dark:text-gray-400 mb-4">Question Type: {{ ucfirst($stat['template_type']) }}</p>
                                @else
                                    @if($stat['template_type'] === 'target')
                                        <h4 class="font-semibold text-lg text-gray-800 dark:text-gray-200 mb-1">Target Survey Results</h4>
                                        <p class="text-sm text-gray-500 dark:text-gray-400 mb-4">Segment ratings and distribution</p>
                                    @elseif($stat['template_type'] === 'table')
                                        <h4 class="font-semibold text-lg text-gray-800 dark:text-gray-200 mb-1">Table Survey Results</h4>
                                        <p class="text-sm text-gray-500 dark:text-gray-400 mb-4">Ratings grouped by category</p>
                                    @else
                                        <h4 class="font-semibold text-lg text-gray-800 dark:text-gray-200 mb-1">Survey Results</h4>
                                        <p class="text-sm text-gray-500 dark:text-gray-400 mb-4">Response summary</p>
                                    @endif
                                @endif
                                @if($stat['template_type'] === 'range')
                                    <div class="mt-4">
                                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                            <div>
                                                <p class="font-medium">Average Rating:
                                                    @if(is_numeric($stat['data']['average_rating']))
                                                        <span class="text-blue-500">{{ $stat['data']['average_rating'] }}</span>
                                                    @else
                                                        <span class="text-gray-500">{{ $stat['data']['average_rating'] }}</span>
                                                    @endif
                                                </p>
                                            </div>
                                            <div>
                                                <p class="font-medium">Median Rating:
                                                    @if(is_numeric($stat['data']['median_rating']))
                                                        <span class="text-blue-500">{{ $stat['data']['median_rating'] }}</span>
                                                    @else
                                                        <span class="text-gray-500">{{ $stat['data']['median_rating'] }}</span>
                                                    @endif
                                                </p>
                                            </div>
                                        </div>
                                        @if(!empty($stat['data']['rating_counts']))
                                            <div class="mt-4">
                                                <p class="font-medium mb-3">Rating Distribution:</p>
                                                <div class="space-y-3">
                                                    @foreach($stat['data']['rating_counts'] as $rating => $count)
                                                        <div class="flex items-center">
                                                            <span class="w-8 text-right mr-3 font-medium">{{ $rating }}:</span>
                                                            <div class="h-6 bg-blue-500 rounded-full shadow-sm" style="width: {{ min(100, ($count / array_sum($stat['data']['rating_counts'])) * 100) }}%"></div>
                                                            <span class="ml-3">{{ $count }} response(s) ({{ round(($count / array_sum($stat['data']['rating_counts'])) * 100, 1) }}%)</span>
                                                        </div>
                                                    @endforeach
                                                </div>
                                            </div>
                                        @endif
                                    </div>
                                @elseif($stat['template_type'] === 'checkboxes')
                                    @if(!empty($stat['data']['option_counts']))
                                        <div class="mt-4">
                                            <p class="font-medium mb-3">Option Selections:</p>
                                            <div class="space-y-3">
                                                @foreach($stat['data']['option_counts'] as $option => $count)
                                                    <div class="flex items-center">
                                                        <span class="w-24 truncate mr-3">{{ $option }}:</span>
                                                        <div class="h-6 bg-green-500 rounded-full shadow-sm" style="width: {{ min(100, ($count / array_sum($stat['data']['option_counts'])) * 100) }}%"></div>
                                                        <span class="ml-3">{{ $count }} selection(s)</span>
                                                    </div>
                                                @endforeach
                                            </div>
                                        </div>
                                    @else
                                        <p class="text-gray-500">No responses yet</p>
                                    @endif
                                @elseif(in_array($stat['template_type'], ['textarea', 'text']))
                                    <p class="mt-3">
                                        <span class="font-medium">Text Responses:</span>
                                        {{ $stat['data']['response_count'] }} response(s)
                                    </p>
                                @elseif(in_array($stat['template_type'], ['target', 'smiley', 'checkbox']))
                                    <div class="mt-3">
                                        <p class="font-medium mb-2">Complex Response Data:</p>
                                        <!-- Target template specific handling -->
                                        @if($stat['template_type'] === 'target')
                                            @if(isset($stat['data']['segment_statistics']) && !empty($stat['data']['segment_statistics']))
                                                <p class="text-sm mb-4">{{ $stat['data']['submission_count'] }} response(s) received</p>
                                                <div class="mt-4">
                                                    <h5 class="font-semibold text-lg mb-3 text-indigo-700 dark:text-indigo-300">Segment Ratings:</h5>
                                                    <div class="overflow-x-auto rounded-lg shadow-md">
                                                        <table class="min-w-full bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700">
                                                            <thead>
                                                                <tr>
                                                                    <th class="py-3 px-4 bg-gray-100 dark:bg-gray-900 border-b border-gray-300 dark:border-gray-700 text-left font-semibold text-gray-700 dark:text-gray-300">Segment</th>
                                                                    <th class="py-3 px-4 bg-gray-100 dark:bg-gray-900 border-b border-gray-300 dark:border-gray-700 text-center font-semibold text-gray-700 dark:text-gray-300">Avg. Rating</th>
                                                                    <th class="py-3 px-4 bg-gray-100 dark:bg-gray-900 border-b border-gray-300 dark:border-gray-700 text-center font-semibold text-gray-700 dark:text-gray-300">Responses</th>
                                                                    <th class="py-3 px-4 bg-gray-100 dark:bg-gray-900 border-b border-gray-300 dark:border-gray-700 text-center font-semibold text-gray-700 dark:text-gray-300">Distribution</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                                @foreach($stat['data']['segment_statistics'] as $segmentStat)
                                                                    <tr class="hover:bg-gray-50 dark:hover:bg-gray-600">
                                                                        <td class="py-3 px-4 border-b border-gray-300 dark:border-gray-700">
                                                                            {{ $segmentStat['statement'] }}
                                                                        </td>
                                                                        <td class="py-3 px-4 border-b border-gray-300 dark:border-gray-700 text-center">
                                                                            <span class="text-blue-500 font-medium">{{ $segmentStat['average_rating'] }}</span>
                                                                        </td>
                                                                        <td class="py-3 px-4 border-b border-gray-300 dark:border-gray-700 text-center">
                                                                            {{ $segmentStat['response_count'] }}
                                                                        </td>
                                                                        <td class="py-3 px-4 border-b border-gray-300 dark:border-gray-700">
                                                                            <div class="flex justify-between items-end w-full" style="min-height: 60px;">
                                                                                @php
                                                                                    $allRatings = [1 => 0, 2 => 0, 3 => 0, 4 => 0, 5 => 0];
                                                                                    foreach($segmentStat['rating_counts'] as $rating => $count) {
                                                                                        $allRatings[$rating] = $count;
                                                                                    }
                                                                                    $maxCount = max(1, max($allRatings));
                                                                                @endphp
                                                                                <div class="grid grid-cols-5 gap-1 w-full">
                                                                                    @for($rating = 1; $rating <= 5; $rating++)
                                                                                        <div class="flex flex-col items-center">
                                                                                            <!-- Count number at the top -->
                                                                                            <div class="text-xs {{ $allRatings[$rating] > 0 ? 'text-blue-500 font-medium' : 'text-gray-400' }} h-4 flex items-center justify-center mb-1">
                                                                                                {{ $allRatings[$rating] }}
                                                                                            </div>
                                                                                            <!-- Container for proper alignment - crucial for upward bars -->
                                                                                            <div class="flex items-end justify-center h-[28px]">
                                                                                                <!-- Bar grows UPWARD from bottom -->
                                                                                                <div class="w-5 bg-blue-500 rounded-t-sm"
                                                                                                     style="height: {{ max(4, min(24, ($allRatings[$rating] / $maxCount) * 24)) }}px;
                                                                                                            opacity: {{ $allRatings[$rating] > 0 ? 0.5 + ($rating * 0.1) : 0.2 }};">
                                                                                                </div>
                                                                                            </div>
                                                                                            <!-- Rating number below bar -->
                                                                                            <div class="text-xs text-gray-500 h-4 flex items-center justify-center mt-1">
                                                                                                {{ $rating }}
                                                                                            </div>
                                                                                        </div>
                                                                                    @endfor
                                                                                </div>
                                                                            </div>
                                                                        </td>
                                                                    </tr>
                                                                @endforeach
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                            @else
                                                <div class="mt-4 p-4 bg-yellow-50 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200 rounded-lg">
                                                    <p>Processing target survey data...</p>
                                                    <p class="text-sm mt-2">If you continue to see this message, please try refreshing the page.</p>
                                                </div>
                                            @endif
                                        <!-- Table template specific handling -->
                                        @elseif($stat['template_type'] === 'table')
                                            @if(isset($stat['data']['table_survey']))
                                                <p class="text-sm mb-4">{{ $stat['data']['submission_count'] }} response(s) received</p>
                                                @if($stat['data']['submission_count'] > 0)
                                                <div x-data="{ activeTab: 'behavior' }" class="mt-6">
                                                    <!-- Tabs -->
                                                    <div class="border-b border-gray-300 dark:border-gray-600 flex flex-wrap" role="tablist">
                                                        @foreach($tableCategories as $catKey => $category)
                                                            @if(!empty($category['questions']))
                                                                <button
                                                                    @click="activeTab = '{{ $catKey }}'"
                                                                    :class="{
                                                                        'border-indigo-500 text-indigo-600 dark:text-indigo-400': activeTab === '{{ $catKey }}',
                                                                        'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300': activeTab !== '{{ $catKey }}'
                                                                    }"
                                                                    class="px-4 py-2 font-medium border-b-2 -mb-px transition"
                                                                    role="tab"
                                                                    id="tab-{{ $catKey }}"
                                                                    :aria-selected="activeTab === '{{ $catKey }}' ? 'true' : 'false'"
                                                                    aria-controls="tabpanel-{{ $catKey }}">
                                                                    {{ $category['title'] }}
                                                                    @if($categoryHasResponses[$catKey])
                                                                        <span class="ml-1 bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-200 text-xs font-semibold px-2 py-0.5 rounded">
                                                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="inline-block w-3 h-3">
                                                                                <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5" />
                                                                            </svg>
                                                                        </span>
                                                                    @endif
                                                                </button>
                                                            @endif
                                                        @endforeach
                                                    </div>
                                                    <!-- Tab Panels -->
                                                    @foreach($tableCategories as $catKey => $category)
                                                        @if(!empty($category['questions']))
                                                            <div
                                                                x-show="activeTab === '{{ $catKey }}'"
                                                                class="py-4"
                                                                role="tabpanel"
                                                                id="tabpanel-{{ $catKey }}"
                                                                aria-labelledby="tab-{{ $catKey }}"
                                                                x-cloak>
                                                                <h5 class="font-semibold text-lg mb-3 text-indigo-700 dark:text-indigo-300">{{ $category['title'] }}:</h5>
                                                                <!-- Questions with Responses -->
                                                                <div class="overflow-x-auto rounded-lg shadow-md mb-4">
                                                                    <table class="min-w-full bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700">
                                                                        <thead>
                                                                            <tr>
                                                                                <th class="py-3 px-4 bg-gray-100 dark:bg-gray-900 border-b border-gray-300 dark:border-gray-700 text-left font-semibold text-gray-700 dark:text-gray-300">Question</th>
                                                                                <th class="py-3 px-4 bg-gray-100 dark:bg-gray-900 border-b border-gray-300 dark:border-gray-700 text-center font-semibold text-gray-700 dark:text-gray-300">Avg. Rating</th>
                                                                                <th class="py-3 px-4 bg-gray-100 dark:bg-gray-900 border-b border-gray-300 dark:border-gray-700 text-center font-semibold text-gray-700 dark:text-gray-300">Responses</th>
                                                                                <th class="py-3 px-4 bg-gray-100 dark:bg-gray-900 border-b border-gray-300 dark:border-gray-700 text-center font-semibold text-gray-700 dark:text-gray-300 hidden sm:table-cell">Distribution</th>
                                                                            </tr>
                                                                        </thead>
                                                                        <tbody>
                                                                            @foreach($category['questions'] as $questionStat)
                                                                                @if($questionStat['template_type'] === 'range' &&
                                                                                   isset($questionStat['data']['average_rating']) &&
                                                                                   is_numeric($questionStat['data']['average_rating']))
                                                                                    <tr class="hover:bg-gray-50 dark:hover:bg-gray-600">
                                                                                        <td class="py-3 px-4 border-b border-gray-300 dark:border-gray-700">
                                                                                            {{ $questionStat['question']->question }}
                                                                                        </td>
                                                                                        <td class="py-3 px-4 border-b border-gray-300 dark:border-gray-700 text-center">
                                                                                            <span class="text-blue-500 font-medium">{{ $questionStat['data']['average_rating'] }}</span>
                                                                                        </td>
                                                                                        <td class="py-3 px-4 border-b border-gray-300 dark:border-gray-700 text-center">
                                                                                            {{ $questionStat['data']['submission_count'] }}
                                                                                        </td>
                                                                                        <td class="py-3 px-4 border-b border-gray-300 dark:border-gray-700 hidden sm:table-cell">
                                                                                            <div class="flex space-x-1">
                                                                                                @foreach($questionStat['data']['rating_counts'] as $rating => $count)
                                                                                                    <div class="flex flex-col items-center">
                                                                                                        <div class="text-xs {{ $count > 0 ? 'text-blue-500 font-medium' : 'text-gray-400' }}">
                                                                                                            {{ $count }}
                                                                                                        </div>
                                                                                                        <div class="flex items-end justify-center">
                                                                                                            <div class="w-8 bg-blue-500 rounded-t-sm"
                                                                                                                style="height: {{ max(4, min(24, ($count / array_sum($questionStat['data']['rating_counts'])) * 24)) }}px;
                                                                                                                        opacity: {{ 0.5 + ($rating * 0.1) }};">
                                                                                                            </div>
                                                                                                        </div>
                                                                                                        <div class="text-xs text-gray-500">{{ $rating }}</div>
                                                                                                    </div>
                                                                                                @endforeach
                                                                                            </div>
                                                                                        </td>
                                                                                    </tr>
                                                                                @elseif(($questionStat['template_type'] === 'text' || $questionStat['template_type'] === 'textarea') &&
                                                                                      isset($questionStat['data']['response_count']) &&
                                                                                      $questionStat['data']['response_count'] > 0)
                                                                                    <tr class="hover:bg-gray-50 dark:hover:bg-gray-600">
                                                                                        <td class="py-3 px-4 border-b border-gray-300 dark:border-gray-700" colspan="4">
                                                                                            <div class="mb-2 font-medium">{{ $questionStat['question']->question }}</div>
                                                                                            <p class="text-sm text-gray-600 dark:text-gray-400">{{ $questionStat['data']['response_count'] }} text response(s) received</p>
                                                                                            @if(isset($questionStat['data']['responses']))
                                                                                                <div class="mt-2 space-y-2">
                                                                                                    @foreach($questionStat['data']['responses'] as $response)
                                                                                                        <div class="p-2 bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded">{{ $response }}</div>
                                                                                                    @endforeach
                                                                                                </div>
                                                                                            @endif
                                                                                        </td>
                                                                                    </tr>
                                                                                @endif
                                                                            @endforeach
                                                                        </tbody>
                                                                    </table>
                                                                </div>
                                                                <!-- Toggle for Questions with No Responses -->
                                                                @php
                                                                    $hasNoResponseQuestions = false;
                                                                    foreach($category['questions'] as $questionStat) {
                                                                        if($questionStat['template_type'] === 'range' &&
                                                                          (!isset($questionStat['data']['average_rating']) ||
                                                                           !is_numeric($questionStat['data']['average_rating']))) {
                                                                            $hasNoResponseQuestions = true;
                                                                            break;
                                                                        }
                                                                    }
                                                                @endphp
                                                                @if($hasNoResponseQuestions)
                                                                    <div x-data="{ showNoResponses: false }" class="mt-4">
                                                                        <button
                                                                            @click="showNoResponses = !showNoResponses"
                                                                            class="flex items-center text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
                                                                            aria-expanded="false"
                                                                            :aria-expanded="showNoResponses ? 'true' : 'false'"
                                                                            aria-controls="no-responses-{{ $catKey }}">
                                                                            <span x-text="showNoResponses ? 'Hide' : 'Show'"></span> questions with no responses
                                                                            <svg x-show="!showNoResponses" xmlns="http://www.w3.org/2000/svg" class="ml-1 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                                                                            </svg>
                                                                            <svg x-show="showNoResponses" xmlns="http://www.w3.org/2000/svg" class="ml-1 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
                                                                            </svg>
                                                                        </button>
                                                                        <div
                                                                            x-show="showNoResponses"
                                                                            class="mt-3 overflow-x-auto rounded-lg"
                                                                            id="no-responses-{{ $catKey }}"
                                                                            x-cloak>
                                                                            <table class="min-w-full bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 opacity-50">
                                                                                <thead>
                                                                                    <tr>
                                                                                        <th class="py-2 px-4 bg-gray-100 dark:bg-gray-900 border-b border-gray-300 dark:border-gray-700 text-left font-semibold text-gray-700 dark:text-gray-300">Question</th>
                                                                                        <th class="py-2 px-4 bg-gray-100 dark:bg-gray-900 border-b border-gray-300 dark:border-gray-700 text-center font-semibold text-gray-700 dark:text-gray-300">Status</th>
                                                                                    </tr>
                                                                                </thead>
                                                                                <tbody>
                                                                                    @foreach($category['questions'] as $questionStat)
                                                                                        @if($questionStat['template_type'] === 'range' &&
                                                                                          (!isset($questionStat['data']['average_rating']) ||
                                                                                           !is_numeric($questionStat['data']['average_rating'])))
                                                                                            <tr class="hover:bg-gray-50 dark:hover:bg-gray-600">
                                                                                                <td class="py-2 px-4 border-b border-gray-300 dark:border-gray-700">
                                                                                                    {{ $questionStat['question']->question }}
                                                                                                </td>
                                                                                                <td class="py-2 px-4 border-b border-gray-300 dark:border-gray-700 text-center">
                                                                                                    <span class="text-gray-500">No responses</span>
                                                                                                </td>
                                                                                            </tr>
                                                                                        @endif
                                                                                    @endforeach
                                                                                </tbody>
                                                                            </table>
                                                                        </div>
                                                                    </div>
                                                                @endif
                                                            </div>
                                                        @endif
                                                    @endforeach
                                                </div>
                                                @endif
                                            @else
                                                <div class="mt-4 p-4 bg-yellow-50 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200 rounded-lg">
                                                    <p>Processing table survey data...</p>
                                                    <p class="text-sm mt-2">If you continue to see this message, please try refreshing the page.</p>
                                                </div>
                                            @endif
                                        <!-- Other template types that use json_responses -->
                                        @elseif(!empty($stat['data']['json_responses']))
                                            <p class="text-sm mb-4">{{ count($stat['data']['json_responses']) }} response(s) received</p>
                                            <details class="mt-6 bg-gray-50 dark:bg-gray-700 p-3 rounded-lg">
                                                <summary class="cursor-pointer text-blue-500 font-medium">View Raw Data</summary>
                                                <pre class="mt-3 p-3 bg-gray-100 dark:bg-gray-800 rounded text-xs overflow-x-auto">{{ json_encode($stat['data']['json_responses'], JSON_PRETTY_PRINT) }}</pre>
                                            </details>
                                        @else
                                            <p class="text-gray-500">No responses yet</p>
                                        @endif
                                    </div>
                                @else
                                    <div class="template-stats">
                                        @if($stat['template_type'] === 'target')
                                            <!-- Target template overview -->
                                            <!-- ... existing target template overview code ... -->
                                        @elseif($stat['template_type'] === 'table')
                                            <!-- Table template overview -->
                                            @if(isset($stat['data']['table_survey']))
                                                <p class="text-sm mb-4">{{ $stat['data']['submission_count'] }} response(s) received</p>
                                                @if($isTableSurvey && count($tableCategories) > 0)
                                                    <!-- Existing table survey display code -->
                                                    <div x-data="{ activeTab: 'behavior' }" class="mt-6">
                                                        <!-- ... existing table survey code ... -->
                                                    </div>
                                                @elseif($stat['data']['submission_count'] == 0)
                                                    <p class="text-gray-500">No responses yet</p>
                                                @else
                                                    <p class="text-gray-500">Table survey data is being processed.</p>
                                                @endif
                                            @else
                                                <div class="mt-4 p-4 bg-yellow-50 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200 rounded-lg">
                                                    <p>Processing table survey data...</p>
                                                    <p class="text-sm mt-2">If you continue to see this message, please try refreshing the page.</p>
                                                </div>
                                            @endif
                                        @elseif(!empty($stat['data']['json_responses']))
                                            <!-- JSON responses template handling -->
                                            <!-- ... existing JSON responses code ... -->
                                        @else
                                            <p class="text-gray-500 mt-3">{{ $stat['data']['message'] ?? 'No statistics available for this question type.' }}</p>
                                        @endif
                                    </div>
                                @endif
                            </div>
                        @endforeach
                    @else
                        <div class="p-4 bg-yellow-50 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200 rounded-lg shadow-sm">
                            <p>No questions found for this survey.</p>
                        </div>
                    @endif
                </div>
            </div>
        </div>
    </div>
</x-app-layout>
</file>

<file path="resources/views/surveys/thank-you.blade.php">
<x-survey-layout>
    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900 dark:text-gray-100">
                    <div class="text-center">
                        <svg class="mx-auto h-12 w-12 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                        <h1 class="mt-3 text-2xl font-bold">{{ __('surveys.thank_you') }}</h1>
                        <p class="mt-4">{{ __('surveys.response_received') }}</p>
                        <div class="mt-8">
                            <a href="{{ route('welcome') }}" class="text-indigo-600 dark:text-indigo-400 hover:underline">
                                {{ __('surveys.access_another_survey') }}
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</x-survey-layout>
</file>

<file path="resources/views/vendor/livewire/bootstrap.blade.php">
@php
if (! isset($scrollTo)) {
    $scrollTo = 'body';
}
$scrollIntoViewJsSnippet = ($scrollTo !== false)
    ? <<<JS
       (\$el.closest('{$scrollTo}') || document.querySelector('{$scrollTo}')).scrollIntoView()
    JS
    : '';
@endphp
<div>
    @if ($paginator->hasPages())
        <nav class="d-flex justify-items-center justify-content-between">
            <div class="d-flex justify-content-between flex-fill d-sm-none">
                <ul class="pagination">
                    {{-- Previous Page Link --}}
                    @if ($paginator->onFirstPage())
                        <li class="page-item disabled" aria-disabled="true">
                            <span class="page-link">@lang('pagination.previous')</span>
                        </li>
                    @else
                        <li class="page-item">
                            <button type="button" dusk="previousPage{{ $paginator->getPageName() == 'page' ? '' : '.' . $paginator->getPageName() }}" class="page-link" wire:click="previousPage('{{ $paginator->getPageName() }}')" x-on:click="{{ $scrollIntoViewJsSnippet }}" wire:loading.attr="disabled">@lang('pagination.previous')</button>
                        </li>
                    @endif
                    {{-- Next Page Link --}}
                    @if ($paginator->hasMorePages())
                        <li class="page-item">
                            <button type="button" dusk="nextPage{{ $paginator->getPageName() == 'page' ? '' : '.' . $paginator->getPageName() }}" class="page-link" wire:click="nextPage('{{ $paginator->getPageName() }}')" x-on:click="{{ $scrollIntoViewJsSnippet }}" wire:loading.attr="disabled">@lang('pagination.next')</button>
                        </li>
                    @else
                        <li class="page-item disabled" aria-disabled="true">
                            <span class="page-link" aria-hidden="true">@lang('pagination.next')</span>
                        </li>
                    @endif
                </ul>
            </div>
            <div class="d-none flex-sm-fill d-sm-flex align-items-sm-center justify-content-sm-between">
                <div>
                    <p class="small text-muted">
                        {!! __('Showing') !!}
                        <span class="fw-semibold">{{ $paginator->firstItem() }}</span>
                        {!! __('to') !!}
                        <span class="fw-semibold">{{ $paginator->lastItem() }}</span>
                        {!! __('of') !!}
                        <span class="fw-semibold">{{ $paginator->total() }}</span>
                        {!! __('results') !!}
                    </p>
                </div>
                <div>
                    <ul class="pagination">
                        {{-- Previous Page Link --}}
                        @if ($paginator->onFirstPage())
                            <li class="page-item disabled" aria-disabled="true" aria-label="@lang('pagination.previous')">
                                <span class="page-link" aria-hidden="true">&lsaquo;</span>
                            </li>
                        @else
                            <li class="page-item">
                                <button type="button" dusk="previousPage{{ $paginator->getPageName() == 'page' ? '' : '.' . $paginator->getPageName() }}" class="page-link" wire:click="previousPage('{{ $paginator->getPageName() }}')" x-on:click="{{ $scrollIntoViewJsSnippet }}" wire:loading.attr="disabled" aria-label="@lang('pagination.previous')">&lsaquo;</button>
                            </li>
                        @endif
                        {{-- Pagination Elements --}}
                        @foreach ($elements as $element)
                            {{-- "Three Dots" Separator --}}
                            @if (is_string($element))
                                <li class="page-item disabled" aria-disabled="true"><span class="page-link">{{ $element }}</span></li>
                            @endif
                            {{-- Array Of Links --}}
                            @if (is_array($element))
                                @foreach ($element as $page => $url)
                                    @if ($page == $paginator->currentPage())
                                        <li class="page-item active" wire:key="paginator-{{ $paginator->getPageName() }}-page-{{ $page }}" aria-current="page"><span class="page-link">{{ $page }}</span></li>
                                    @else
                                        <li class="page-item" wire:key="paginator-{{ $paginator->getPageName() }}-page-{{ $page }}"><button type="button" class="page-link" wire:click="gotoPage({{ $page }}, '{{ $paginator->getPageName() }}')" x-on:click="{{ $scrollIntoViewJsSnippet }}">{{ $page }}</button></li>
                                    @endif
                                @endforeach
                            @endif
                        @endforeach
                        {{-- Next Page Link --}}
                        @if ($paginator->hasMorePages())
                            <li class="page-item">
                                <button type="button" dusk="nextPage{{ $paginator->getPageName() == 'page' ? '' : '.' . $paginator->getPageName() }}" class="page-link" wire:click="nextPage('{{ $paginator->getPageName() }}')" x-on:click="{{ $scrollIntoViewJsSnippet }}" wire:loading.attr="disabled" aria-label="@lang('pagination.next')">&rsaquo;</button>
                            </li>
                        @else
                            <li class="page-item disabled" aria-disabled="true" aria-label="@lang('pagination.next')">
                                <span class="page-link" aria-hidden="true">&rsaquo;</span>
                            </li>
                        @endif
                    </ul>
                </div>
            </div>
        </nav>
    @endif
</div>
</file>

<file path="resources/views/vendor/livewire/simple-bootstrap.blade.php">
@php
if (! isset($scrollTo)) {
    $scrollTo = 'body';
}
$scrollIntoViewJsSnippet = ($scrollTo !== false)
    ? <<<JS
       (\$el.closest('{$scrollTo}') || document.querySelector('{$scrollTo}')).scrollIntoView()
    JS
    : '';
@endphp
<div>
    @if ($paginator->hasPages())
        <nav>
            <ul class="pagination">
                {{-- Previous Page Link --}}
                @if ($paginator->onFirstPage())
                    <li class="page-item disabled" aria-disabled="true">
                        <span class="page-link">@lang('pagination.previous')</span>
                    </li>
                @else
                    @if(method_exists($paginator,'getCursorName'))
                        <li class="page-item">
                            <button dusk="previousPage" type="button" class="page-link" wire:key="cursor-{{ $paginator->getCursorName() }}-{{ $paginator->previousCursor()->encode() }}" wire:click="setPage('{{$paginator->previousCursor()->encode()}}','{{ $paginator->getCursorName() }}')" x-on:click="{{ $scrollIntoViewJsSnippet }}" wire:loading.attr="disabled">@lang('pagination.previous')</button>
                        </li>
                    @else
                        <li class="page-item">
                            <button type="button" dusk="previousPage{{ $paginator->getPageName() == 'page' ? '' : '.' . $paginator->getPageName() }}" class="page-link" wire:click="previousPage('{{ $paginator->getPageName() }}')" x-on:click="{{ $scrollIntoViewJsSnippet }}" wire:loading.attr="disabled">@lang('pagination.previous')</button>
                        </li>
                    @endif
                @endif
                {{-- Next Page Link --}}
                @if ($paginator->hasMorePages())
                    @if(method_exists($paginator,'getCursorName'))
                        <li class="page-item">
                            <button dusk="nextPage" type="button" class="page-link" wire:key="cursor-{{ $paginator->getCursorName() }}-{{ $paginator->nextCursor()->encode() }}" wire:click="setPage('{{$paginator->nextCursor()->encode()}}','{{ $paginator->getCursorName() }}')" x-on:click="{{ $scrollIntoViewJsSnippet }}" wire:loading.attr="disabled">@lang('pagination.next')</button>
                        </li>
                    @else
                        <li class="page-item">
                            <button type="button" dusk="nextPage{{ $paginator->getPageName() == 'page' ? '' : '.' . $paginator->getPageName() }}" class="page-link" wire:click="nextPage('{{ $paginator->getPageName() }}')" x-on:click="{{ $scrollIntoViewJsSnippet }}" wire:loading.attr="disabled">@lang('pagination.next')</button>
                        </li>
                    @endif
                @else
                    <li class="page-item disabled" aria-disabled="true">
                        <span class="page-link">@lang('pagination.next')</span>
                    </li>
                @endif
            </ul>
        </nav>
    @endif
</div>
</file>

<file path="resources/views/vendor/livewire/simple-tailwind.blade.php">
@php
if (! isset($scrollTo)) {
    $scrollTo = 'body';
}
$scrollIntoViewJsSnippet = ($scrollTo !== false)
    ? <<<JS
       (\$el.closest('{$scrollTo}') || document.querySelector('{$scrollTo}')).scrollIntoView()
    JS
    : '';
@endphp
<div>
    @if ($paginator->hasPages())
        <nav role="navigation" aria-label="Pagination Navigation" class="flex justify-between">
            <span>
                {{-- Previous Page Link --}}
                @if ($paginator->onFirstPage())
                    <span class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 cursor-default leading-5 rounded-md dark:text-gray-600 dark:bg-gray-800 dark:border-gray-600">
                        {!! __('pagination.previous') !!}
                    </span>
                @else
                    @if(method_exists($paginator,'getCursorName'))
                        <button type="button" dusk="previousPage" wire:key="cursor-{{ $paginator->getCursorName() }}-{{ $paginator->previousCursor()->encode() }}" wire:click="setPage('{{$paginator->previousCursor()->encode()}}','{{ $paginator->getCursorName() }}')" x-on:click="{{ $scrollIntoViewJsSnippet }}" wire:loading.attr="disabled" class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 leading-5 rounded-md hover:text-gray-500 focus:outline-none focus:ring ring-blue-300 focus:border-blue-300 active:bg-gray-100 active:text-gray-700 transition ease-in-out duration-150 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:focus:border-blue-700 dark:active:bg-gray-700 dark:active:text-gray-300">
                                {!! __('pagination.previous') !!}
                        </button>
                    @else
                        <button
                            type="button" wire:click="previousPage('{{ $paginator->getPageName() }}')" x-on:click="{{ $scrollIntoViewJsSnippet }}" wire:loading.attr="disabled" dusk="previousPage{{ $paginator->getPageName() == 'page' ? '' : '.' . $paginator->getPageName() }}" class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 leading-5 rounded-md hover:text-gray-500 focus:outline-none focus:ring ring-blue-300 focus:border-blue-300 active:bg-gray-100 active:text-gray-700 transition ease-in-out duration-150 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:focus:border-blue-700 dark:active:bg-gray-700 dark:active:text-gray-300">
                                {!! __('pagination.previous') !!}
                        </button>
                    @endif
                @endif
            </span>
            <span>
                {{-- Next Page Link --}}
                @if ($paginator->hasMorePages())
                    @if(method_exists($paginator,'getCursorName'))
                        <button type="button" dusk="nextPage" wire:key="cursor-{{ $paginator->getCursorName() }}-{{ $paginator->nextCursor()->encode() }}" wire:click="setPage('{{$paginator->nextCursor()->encode()}}','{{ $paginator->getCursorName() }}')" x-on:click="{{ $scrollIntoViewJsSnippet }}" wire:loading.attr="disabled" class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 leading-5 rounded-md hover:text-gray-500 focus:outline-none focus:ring ring-blue-300 focus:border-blue-300 active:bg-gray-100 active:text-gray-700 transition ease-in-out duration-150 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:focus:border-blue-700 dark:active:bg-gray-700 dark:active:text-gray-300">
                                {!! __('pagination.next') !!}
                        </button>
                    @else
                        <button type="button" wire:click="nextPage('{{ $paginator->getPageName() }}')" x-on:click="{{ $scrollIntoViewJsSnippet }}" wire:loading.attr="disabled" dusk="nextPage{{ $paginator->getPageName() == 'page' ? '' : '.' . $paginator->getPageName() }}" class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 leading-5 rounded-md hover:text-gray-500 focus:outline-none focus:ring ring-blue-300 focus:border-blue-300 active:bg-gray-100 active:text-gray-700 transition ease-in-out duration-150 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:focus:border-blue-700 dark:active:bg-gray-700 dark:active:text-gray-300">
                                {!! __('pagination.next') !!}
                        </button>
                    @endif
                @else
                    <span class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 cursor-default leading-5 rounded-md">
                        {!! __('pagination.next') !!}
                    </span>
                @endif
            </span>
        </nav>
    @endif
</div>
</file>

<file path="resources/views/vendor/livewire/tailwind.blade.php">
@php
if (! isset($scrollTo)) {
    $scrollTo = 'body';
}
$scrollIntoViewJsSnippet = ($scrollTo !== false)
    ? <<<JS
       (\$el.closest('{$scrollTo}') || document.querySelector('{$scrollTo}')).scrollIntoView()
    JS
    : '';
@endphp
<div>
    @if ($paginator->hasPages())
        <nav role="navigation" aria-label="Pagination Navigation" class="flex items-center justify-between">
            <div class="flex justify-between flex-1 sm:hidden">
                <span>
                    @if ($paginator->onFirstPage())
                        <span class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 cursor-default leading-5 rounded-md dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:focus:border-blue-700 dark:active:bg-gray-700 dark:active:text-gray-300">
                            {!! __('pagination.previous') !!}
                        </span>
                    @else
                        <button type="button" wire:click="previousPage('{{ $paginator->getPageName() }}')" x-on:click="{{ $scrollIntoViewJsSnippet }}" wire:loading.attr="disabled" dusk="previousPage{{ $paginator->getPageName() == 'page' ? '' : '.' . $paginator->getPageName() }}.before" class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 leading-5 rounded-md hover:text-gray-500 focus:outline-none focus:ring ring-blue-300 focus:border-blue-300 active:bg-gray-100 active:text-gray-700 transition ease-in-out duration-150 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:focus:border-blue-700 dark:active:bg-gray-700 dark:active:text-gray-300">
                            {!! __('pagination.previous') !!}
                        </button>
                    @endif
                </span>
                <span>
                    @if ($paginator->hasMorePages())
                        <button type="button" wire:click="nextPage('{{ $paginator->getPageName() }}')" x-on:click="{{ $scrollIntoViewJsSnippet }}" wire:loading.attr="disabled" dusk="nextPage{{ $paginator->getPageName() == 'page' ? '' : '.' . $paginator->getPageName() }}.before" class="relative inline-flex items-center px-4 py-2 ml-3 text-sm font-medium text-gray-700 bg-white border border-gray-300 leading-5 rounded-md hover:text-gray-500 focus:outline-none focus:ring ring-blue-300 focus:border-blue-300 active:bg-gray-100 active:text-gray-700 transition ease-in-out duration-150 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:focus:border-blue-700 dark:active:bg-gray-700 dark:active:text-gray-300">
                            {!! __('pagination.next') !!}
                        </button>
                    @else
                        <span class="relative inline-flex items-center px-4 py-2 ml-3 text-sm font-medium text-gray-500 bg-white border border-gray-300 cursor-default leading-5 rounded-md dark:text-gray-600 dark:bg-gray-800 dark:border-gray-600">
                            {!! __('pagination.next') !!}
                        </span>
                    @endif
                </span>
            </div>
            <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                <div>
                    <p class="text-sm text-gray-700 leading-5 dark:text-gray-400">
                        <span>{!! __('Showing') !!}</span>
                        <span class="font-medium">{{ $paginator->firstItem() }}</span>
                        <span>{!! __('to') !!}</span>
                        <span class="font-medium">{{ $paginator->lastItem() }}</span>
                        <span>{!! __('of') !!}</span>
                        <span class="font-medium">{{ $paginator->total() }}</span>
                        <span>{!! __('results') !!}</span>
                    </p>
                </div>
                <div>
                    <span class="relative z-0 inline-flex rtl:flex-row-reverse rounded-md shadow-sm">
                        <span>
                            {{-- Previous Page Link --}}
                            @if ($paginator->onFirstPage())
                                <span aria-disabled="true" aria-label="{{ __('pagination.previous') }}">
                                    <span class="relative inline-flex items-center px-2 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 cursor-default rounded-l-md leading-5 dark:bg-gray-800 dark:border-gray-600" aria-hidden="true">
                                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                                        </svg>
                                    </span>
                                </span>
                            @else
                                <button type="button" wire:click="previousPage('{{ $paginator->getPageName() }}')" x-on:click="{{ $scrollIntoViewJsSnippet }}" dusk="previousPage{{ $paginator->getPageName() == 'page' ? '' : '.' . $paginator->getPageName() }}.after" class="relative inline-flex items-center px-2 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-l-md leading-5 hover:text-gray-400 focus:z-10 focus:outline-none focus:border-blue-300 focus:ring ring-blue-300 active:bg-gray-100 active:text-gray-500 transition ease-in-out duration-150 dark:bg-gray-800 dark:border-gray-600 dark:active:bg-gray-700 dark:focus:border-blue-800" aria-label="{{ __('pagination.previous') }}">
                                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            @endif
                        </span>
                        {{-- Pagination Elements --}}
                        @foreach ($elements as $element)
                            {{-- "Three Dots" Separator --}}
                            @if (is_string($element))
                                <span aria-disabled="true">
                                    <span class="relative inline-flex items-center px-4 py-2 -ml-px text-sm font-medium text-gray-700 bg-white border border-gray-300 cursor-default leading-5 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300">{{ $element }}</span>
                                </span>
                            @endif
                            {{-- Array Of Links --}}
                            @if (is_array($element))
                                @foreach ($element as $page => $url)
                                    <span wire:key="paginator-{{ $paginator->getPageName() }}-page{{ $page }}">
                                        @if ($page == $paginator->currentPage())
                                            <span aria-current="page">
                                                <span class="relative inline-flex items-center px-4 py-2 -ml-px text-sm font-medium text-gray-500 bg-white border border-gray-300 cursor-default leading-5 dark:bg-gray-800 dark:border-gray-600">{{ $page }}</span>
                                            </span>
                                        @else
                                            <button type="button" wire:click="gotoPage({{ $page }}, '{{ $paginator->getPageName() }}')" x-on:click="{{ $scrollIntoViewJsSnippet }}" class="relative inline-flex items-center px-4 py-2 -ml-px text-sm font-medium text-gray-700 bg-white border border-gray-300 leading-5 hover:text-gray-500 focus:z-10 focus:outline-none focus:border-blue-300 focus:ring ring-blue-300 active:bg-gray-100 active:text-gray-700 transition ease-in-out duration-150 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-400 dark:hover:text-gray-300 dark:active:bg-gray-700 dark:focus:border-blue-800" aria-label="{{ __('Go to page :page', ['page' => $page]) }}">
                                                {{ $page }}
                                            </button>
                                        @endif
                                    </span>
                                @endforeach
                            @endif
                        @endforeach
                        <span>
                            {{-- Next Page Link --}}
                            @if ($paginator->hasMorePages())
                                <button type="button" wire:click="nextPage('{{ $paginator->getPageName() }}')" x-on:click="{{ $scrollIntoViewJsSnippet }}" dusk="nextPage{{ $paginator->getPageName() == 'page' ? '' : '.' . $paginator->getPageName() }}.after" class="relative inline-flex items-center px-2 py-2 -ml-px text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-r-md leading-5 hover:text-gray-400 focus:z-10 focus:outline-none focus:border-blue-300 focus:ring ring-blue-300 active:bg-gray-100 active:text-gray-500 transition ease-in-out duration-150 dark:bg-gray-800 dark:border-gray-600 dark:active:bg-gray-700 dark:focus:border-blue-800" aria-label="{{ __('pagination.next') }}">
                                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                                    </svg>
                                </button>
                            @else
                                <span aria-disabled="true" aria-label="{{ __('pagination.next') }}">
                                    <span class="relative inline-flex items-center px-2 py-2 -ml-px text-sm font-medium text-gray-500 bg-white border border-gray-300 cursor-default rounded-r-md leading-5 dark:bg-gray-800 dark:border-gray-600" aria-hidden="true">
                                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                                        </svg>
                                    </span>
                                </span>
                            @endif
                        </span>
                    </span>
                </div>
            </div>
        </nav>
    @endif
</div>
</file>

<file path="resources/views/vendor/notifications/email.blade.php">
<x-mail::message>
{{-- Greeting --}}
@if (! empty($greeting))
# {{ $greeting }}
@else
@if ($level === 'error')
# @lang('Whoops!')
@else
# @lang('Hello!')
@endif
@endif
{{-- Intro Lines --}}
@foreach ($introLines as $line)
{{ $line }}
@endforeach
{{-- Action Button --}}
@isset($actionText)
<?php
    $color = match ($level) {
        'success', 'error' => $level,
        default => 'primary',
    };
?>
<x-mail::button :url="$actionUrl" :color="$color">
{{ $actionText }}
</x-mail::button>
@endisset
{{-- Outro Lines --}}
@foreach ($outroLines as $line)
{{ $line }}
@endforeach
{{-- Salutation --}}
@if (! empty($salutation))
{{ $salutation }}
@else
@lang('notification.verify_email.salutation')<br>
{{ config('app.name') }}
@endif
{{-- Subcopy --}}
@isset($actionText)
<x-slot:subcopy>
@lang('notification.verify_email.trouble', [
    'actionText' => $actionText,
]) <span class="break-all">[{{ $displayableActionUrl }}]({{ $actionUrl }})</span>
</x-slot:subcopy>
@endisset
</x-mail::message>
</file>

<file path="resources/views/dashboard.blade.php">
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight">
            {{ __('Dashboard') }}
        </h2>
    </x-slot>
    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900 dark:text-gray-100">
                    {{ __("You're logged in!") }}
                </div>
            </div>
        </div>
    </div>
</x-app-layout>
</file>

<file path="resources/views/profile.blade.php">
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight">
            {{ __('Profile') }}
        </h2>
    </x-slot>
    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 space-y-6">
            <div class="p-4 sm:p-8 bg-white dark:bg-gray-800 shadow sm:rounded-lg">
                <div class="max-w-xl">
                    <livewire:profile.update-profile-information-form />
                </div>
            </div>
            <div class="p-4 sm:p-8 bg-white dark:bg-gray-800 shadow sm:rounded-lg">
                <div class="max-w-xl">
                    <livewire:profile.update-password-form />
                </div>
            </div>
            <div class="p-4 sm:p-8 bg-white dark:bg-gray-800 shadow sm:rounded-lg">
                <div class="max-w-xl">
                    <livewire:profile.delete-user-form />
                </div>
            </div>
        </div>
    </div>
</x-app-layout>
</file>

<file path="resources/views/welcome.blade.php">
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>{{ config('app.name', 'Laravel') }}</title>
        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.bunny.net">
        <link href="https://fonts.bunny.net/css?family=figtree:400,600&display=swap" rel="stylesheet" />
        <!-- Styles -->
        @vite(['resources/css/app.css', 'resources/js/app.js'])
    </head>
    <body class="antialiased font-sans" x-data>
        <div class="bg-gray-100 text-black/50 dark:bg-gray-900 dark:text-white/50">
            <main>
                <div class="min-h-dvh flex flex-col items-center justify-center gap-8 selection:bg-[#FF2D20] selection:text-white">
                    <a href="/">
                        <x-application-logo class="w-20 h-20 fill-current text-gray-500" />
                    </a>
                    <h2 class="text-2xl font-medium text-gray-900 dark:text-gray-100">
                        {{__('welcome.vote_now')}}!
                    </h2>
                    <div class="lg:max-w-1/2 sm:max-w-2/3 w-full px-6">
                        <!-- Session Status -->
                        <x-auth-session-status class="mb-4" :status="session('status')" />
                        <!-- Validation Errors -->
                        @if ($errors->any())
                            <div class="mb-4 text-center">
                                <div class="font-medium text-red-600 dark:text-red-400 mb-2">
                                    {{ __('surveys.whoops') }}
                                </div>
                                <div class="mt-2 text-sm text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/20 p-4 rounded-lg shadow-sm">
                                    @foreach ($errors->all() as $error)
                                        <p class="mb-1 flex items-center justify-center">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5 inline" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                                            </svg>
                                            {{ $error }}
                                        </p>
                                    @endforeach
                                </div>
                            </div>
                        @endif
                        <!-- Success Message -->
                        @if (session('success'))
                            <div class="mb-4 text-center">
                                <div class="font-medium text-sm text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-900/20 p-4 rounded-lg shadow-sm flex items-center justify-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                    </svg>
                                    {{ session('success') }}
                                </div>
                            </div>
                        @endif
                        <!-- Error Message -->
                        @if (session('error'))
                            <div class="mb-4 text-center">
                                <div class="font-medium text-sm text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/20 p-4 rounded-lg shadow-sm flex items-center justify-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                                    </svg>
                                    {{ session('error') }}
                                </div>
                            </div>
                        @endif
                        <form method="POST" action="{{ route('surveys.access.submit') }}" id="surveyForm">
                            @csrf
                            <div class="flex flex-row gap-2 justify-center">
                                <x-text-input id="token"
                                              class="border-t-0 border-l-0 border-r-0 border-b-2 bg-transparent !shadow-none rounded-none focus:ring-0 focus:!border-gray-500 dark:focus:!border-gray-500 text-center"
                                              placeholder="{{__('welcome.key')}}" type="text" name="token"
                                              :value="old('token') ?? request()->query('token')"
                                              required
                                              autofocus
                                              autocomplete="off"
                                />
                                <x-primary-button>
                                    <x-fas-arrow-right class="w-4 h-4"/>
                                </x-primary-button>
                            </div>
                            <p class="mt-4 text-sm text-center text-gray-600 dark:text-gray-400">{{ __('surveys.enter_access_key_hint') }}</p>
                        </form>
                        <!-- Auto-submit form if token is in URL -->
                        <script>
                            // Function to submit the form with a token
                            function submitFormWithToken(token) {
                                try {
                                    console.log("Setting token and submitting form", token);
                                    // Fill the token field
                                    const tokenField = document.getElementById('token');
                                    if (tokenField) {
                                        tokenField.value = token;
                                        // Submit the form
                                        const form = document.getElementById('surveyForm');
                                        if (form) {
                                            console.log("Form found, submitting");
                                            form.submit();
                                        } else {
                                            console.error("Form element not found");
                                        }
                                    } else {
                                        console.error("Token field element not found");
                                    }
                                } catch (error) {
                                    console.error("Error processing token:", error);
                                }
                            }
                            // When DOM is fully loaded
                            document.addEventListener('DOMContentLoaded', function() {
                                try {
                                    console.log("DOM loaded, checking for token in URL");
                                    const urlParams = new URLSearchParams(window.location.search);
                                    const token = urlParams.get('token');
                                    if (token) {
                                        console.log("Token found in URL:", token);
                                        // Wait a short time for everything to be fully ready
                                        setTimeout(function() {
                                            submitFormWithToken(token);
                                        }, 300);
                                    } else {
                                        console.log("No token in URL");
                                    }
                                } catch (error) {
                                    console.error("Error processing URL parameters:", error);
                                }
                            });
                        </script>
                    </div>
                </div>
            </main>
        </div>
        @php
            // Consider both feedback-forms-test and localhost as test environments
            $appUrl = config('app.url');
            $isTestEnv = str_contains($appUrl, 'feedback-forms-test') || str_contains($appUrl, 'localhost');
            // Get SHA from environment variable (set during container build)
            $gitSha = env('GIT_SHA');
            // If we have a full SHA, trim it to short format (7 characters)
            if ($gitSha && strlen($gitSha) > 7) {
                $gitSha = substr($gitSha, 0, 7);
            }
            // Fallback to reading from .git directory only in local development
            if (!$gitSha && str_contains($appUrl, 'localhost')) {
                $gitHeadPath = base_path('.git/HEAD');
                if (file_exists($gitHeadPath)) {
                    $gitHead = file_get_contents($gitHeadPath);
                    if (strpos($gitHead, 'ref:') === 0) {
                        $ref = trim(substr($gitHead, 5));
                        $gitRefPath = base_path('.git/' . $ref);
                        if (file_exists($gitRefPath)) {
                            $gitSha = trim(file_get_contents($gitRefPath));
                        }
                    } else {
                        $gitSha = trim($gitHead);
                    }
                    if ($gitSha) {
                        $gitSha = substr($gitSha, 0, 7); // Short SHA
                    }
                }
            }
        @endphp
        @if ($isTestEnv && $gitSha)
            <div class="fixed bottom-2 right-2 bg-gray-200 dark:bg-gray-800 text-gray-600 dark:text-gray-400 text-xs px-2 py-1 rounded-md opacity-70">
                SHA: {{ $gitSha }}
            </div>
        @endif
    </body>
</html>
</file>

<file path="routes/auth.php">
<?php
use App\Http\Controllers\Auth\VerifyEmailController;
use App\Livewire\Surveys\Overview;
use Illuminate\Support\Facades\Route;
use Livewire\Volt\Volt;
Route::middleware('guest')->group(function () {
    Volt::route('register', 'pages.auth.register')
        ->name('register');
    Volt::route('login', 'pages.auth.login')
        ->name('login');
    Volt::route('forgot-password', 'pages.auth.forgot-password')
        ->name('password.request');
    Volt::route('reset-password/{token}', 'pages.auth.reset-password')
        ->name('password.reset');
});
Route::middleware('auth')->group(function () {
    Volt::route('verify-email', 'pages.auth.verify-email')
        ->name('verification.notice');
    Route::get('verify-email/{id}/{hash}', VerifyEmailController::class)
        ->middleware(['signed', 'throttle:6,1'])
        ->name('verification.verify');
    Volt::route('confirm-password', 'pages.auth.confirm-password')
        ->name('password.confirm');
    Volt::route('surveys', Overview::class)
        ->name('surveys.list');
    Volt::route('templates', \App\Livewire\Templates\Overview::class)
        ->name('templates.list');
    Volt::route('teacher-interface', \App\Livewire\TeacherInterface\Overview::class)
    ->name('teacher.interface');
});
</file>

<file path="routes/console.php">
<?php
use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;
Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote')->hourly();
</file>

<file path="routes/web.php">
<?php
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\{WelcomeController, SurveyController, SurveyResponseController};
use Livewire\Volt\Volt;
// Root route for welcome page and survey access
Route::get('/', [WelcomeController::class, 'index'])->name('welcome');
Route::post('/', [WelcomeController::class, 'accessSurvey'])->name('surveys.access.submit');
// Direct QR code access route
Route::get('/survey/scan', [WelcomeController::class, 'scanQrAccess'])->name('surveys.scan');
Route::middleware(['auth'])->group(function () {
    Route::view('dashboard', 'dashboard')
        ->name('dashboard');
    Route::view('profile', 'profile')->name('profile');
    Route::get('/admin-panel', App\Livewire\Admin\Panel::class)->name('admin.panel');
    Route::get('/admin/users', App\Livewire\Admin\Users::class)->name('admin.users');
    // Survey statistics route
    Route::get('/surveys/{survey}/statistics', [App\Http\Controllers\SurveyStatisticsController::class, 'show'])
        ->name('surveys.statistics');
});
Route::controller(SurveyController::class)->group(function (){
    Route::get('feedback/smiley', 'showSmiley');
    Route::get('feedback/table', 'showTable');
    Route::get('feedback/target', 'showTarget');
    Route::post('feedback/smiley', 'retrieveSmiley');
});
// The thank-you route needs to be defined before the dynamic {accesskey} route to avoid conflicts
Route::get('/survey/thank-you', [SurveyResponseController::class, 'showThankYou'])
    ->name('surveys.thank-you');
Route::post('/survey/{accesskey}/submit', [SurveyResponseController::class, 'submitResponses'])
    ->name('surveys.submit');
Route::view('profile', 'profile')
    ->middleware(['auth'])
    ->name('profile');
Route::get('/admin-panel', App\Livewire\Admin\Panel::class)
    ->middleware(['auth', 'can:admin'])
    ->name('admin.panel');
Route::middleware(['auth'])->group(function () {
    // Survey management routes - use Livewire component
    Route::get('/surveys', App\Livewire\Surveys\Overview::class)
        ->name('surveys.index');
    // Use Livewire for the edit functionality
    Route::get('/surveys/{id}/edit', App\Livewire\Surveys\Edit::class)
        ->name('surveys.edit');
    // Templates routes
    Route::get('/templates', App\Livewire\Templates\Overview::class)
        ->name('templates.index');
    // Route to create a survey from a template
    Route::get('/surveys/create/from-template/{template}', [SurveyController::class, 'create'])
        ->name('surveys.create.from-template');
    // Use resource route but exclude 'edit' and 'index' to avoid conflicts with Livewire
    Route::resource('surveys', SurveyController::class)->except(['edit', 'index']);
});
Route::get('/admin/users', App\Livewire\Admin\Users::class)
    ->middleware(['auth', 'can:admin'])
    ->name('admin.users');
require __DIR__.'/auth.php';
</file>

<file path="storage/app/private/.gitignore">
*
!.gitignore
</file>

<file path="storage/app/public/.gitignore">
*
!.gitignore
</file>

<file path="storage/app/.gitignore">
*
!private/
!public/
!.gitignore
</file>

<file path="storage/framework/cache/data/.gitignore">
*
!.gitignore
</file>

<file path="storage/framework/cache/.gitignore">
*
!data/
!.gitignore
</file>

<file path="storage/framework/sessions/.gitignore">
*
!.gitignore
</file>

<file path="storage/framework/testing/.gitignore">
*
!.gitignore
</file>

<file path="storage/framework/views/.gitignore">
*
!.gitignore
</file>

<file path="storage/framework/.gitignore">
compiled.php
config.php
down
events.scanned.php
maintenance.php
routes.php
routes.scanned.php
schedule-*
services.json
</file>

<file path="storage/logs/.gitignore">
*
!.gitignore
</file>

<file path="tests/Feature/Auth/AuthenticationTest.php">
<?php
namespace Tests\Feature\Auth;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Livewire\Volt\Volt;
use Tests\TestCase;
class AuthenticationTest extends TestCase
{
    use RefreshDatabase;
    public function test_login_screen_can_be_rendered(): void
    {
        $response = $this->get('/login');
        $response
            ->assertOk()
            ->assertSeeVolt('pages.auth.login');
    }
    public function test_users_can_authenticate_using_the_login_screen(): void
    {
        $user = User::factory()->create();
        $component = Volt::test('pages.auth.login')
            ->set('form.email', $user->email)
            ->set('form.password', 'password');
        $component->call('login');
        $component
            ->assertHasNoErrors()
            ->assertRedirect(route('dashboard', absolute: false));
        $this->assertAuthenticated();
    }
    public function test_users_can_not_authenticate_with_invalid_password(): void
    {
        $user = User::factory()->create();
        $component = Volt::test('pages.auth.login')
            ->set('form.email', $user->email)
            ->set('form.password', 'wrong-password');
        $component->call('login');
        $component
            ->assertHasErrors()
            ->assertNoRedirect();
        $this->assertGuest();
    }
    public function test_navigation_menu_can_be_rendered(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);
        $response = $this->get('/dashboard');
        $response
            ->assertOk()
            ->assertSeeVolt('layout.navigation');
    }
    public function test_users_can_logout(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);
        $component = Volt::test('layout.navigation');
        $component->call('logout');
        $component
            ->assertHasNoErrors()
            ->assertRedirect('/');
        $this->assertGuest();
    }
}
</file>

<file path="tests/Feature/Auth/EmailVerificationTest.php">
<?php
namespace Tests\Feature\Auth;
use App\Models\User;
use Illuminate\Auth\Events\Verified;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\URL;
use Tests\TestCase;
class EmailVerificationTest extends TestCase
{
    use RefreshDatabase;
    public function test_email_verification_screen_can_be_rendered(): void
    {
        $user = User::factory()->unverified()->create();
        $response = $this->actingAs($user)->get('/verify-email');
        $response
            ->assertSeeVolt('pages.auth.verify-email')
            ->assertStatus(200);
    }
    public function test_email_can_be_verified(): void
    {
        $user = User::factory()->unverified()->create();
        Event::fake();
        $verificationUrl = URL::temporarySignedRoute(
            'verification.verify',
            now()->addMinutes(60),
            ['id' => $user->id, 'hash' => sha1($user->email)]
        );
        $response = $this->actingAs($user)->get($verificationUrl);
        Event::assertDispatched(Verified::class);
        $this->assertTrue($user->fresh()->hasVerifiedEmail());
        $response->assertRedirect(route('dashboard', absolute: false).'?verified=1');
    }
    public function test_email_is_not_verified_with_invalid_hash(): void
    {
        $user = User::factory()->unverified()->create();
        $verificationUrl = URL::temporarySignedRoute(
            'verification.verify',
            now()->addMinutes(60),
            ['id' => $user->id, 'hash' => sha1('wrong-email')]
        );
        $this->actingAs($user)->get($verificationUrl);
        $this->assertFalse($user->fresh()->hasVerifiedEmail());
    }
}
</file>

<file path="tests/Feature/Auth/PasswordConfirmationTest.php">
<?php
namespace Tests\Feature\Auth;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Livewire\Volt\Volt;
use Tests\TestCase;
class PasswordConfirmationTest extends TestCase
{
    use RefreshDatabase;
    public function test_confirm_password_screen_can_be_rendered(): void
    {
        $user = User::factory()->create();
        $response = $this->actingAs($user)->get('/confirm-password');
        $response
            ->assertSeeVolt('pages.auth.confirm-password')
            ->assertStatus(200);
    }
    public function test_password_can_be_confirmed(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);
        $component = Volt::test('pages.auth.confirm-password')
            ->set('password', 'password');
        $component->call('confirmPassword');
        $component
            ->assertRedirect('/dashboard')
            ->assertHasNoErrors();
    }
    public function test_password_is_not_confirmed_with_invalid_password(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);
        $component = Volt::test('pages.auth.confirm-password')
            ->set('password', 'wrong-password');
        $component->call('confirmPassword');
        $component
            ->assertNoRedirect()
            ->assertHasErrors('password');
    }
}
</file>

<file path="tests/Feature/Auth/PasswordResetTest.php">
<?php
namespace Tests\Feature\Auth;
use App\Models\User;
use Illuminate\Auth\Notifications\ResetPassword;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Notification;
use Livewire\Volt\Volt;
use Tests\TestCase;
class PasswordResetTest extends TestCase
{
    use RefreshDatabase;
    public function test_reset_password_link_screen_can_be_rendered(): void
    {
        $response = $this->get('/forgot-password');
        $response
            ->assertSeeVolt('pages.auth.forgot-password')
            ->assertStatus(200);
    }
    public function test_reset_password_link_can_be_requested(): void
    {
        Notification::fake();
        $user = User::factory()->create();
        Volt::test('pages.auth.forgot-password')
            ->set('email', $user->email)
            ->call('sendPasswordResetLink');
        Notification::assertSentTo($user, ResetPassword::class);
    }
    public function test_reset_password_screen_can_be_rendered(): void
    {
        Notification::fake();
        $user = User::factory()->create();
        Volt::test('pages.auth.forgot-password')
            ->set('email', $user->email)
            ->call('sendPasswordResetLink');
        Notification::assertSentTo($user, ResetPassword::class, function ($notification) {
            $response = $this->get('/reset-password/'.$notification->token);
            $response
                ->assertSeeVolt('pages.auth.reset-password')
                ->assertStatus(200);
            return true;
        });
    }
    public function test_password_can_be_reset_with_valid_token(): void
    {
        Notification::fake();
        $user = User::factory()->create();
        Volt::test('pages.auth.forgot-password')
            ->set('email', $user->email)
            ->call('sendPasswordResetLink');
        Notification::assertSentTo($user, ResetPassword::class, function ($notification) use ($user) {
            $component = Volt::test('pages.auth.reset-password', ['token' => $notification->token])
                ->set('email', $user->email)
                ->set('password', 'password')
                ->set('password_confirmation', 'password');
            $component->call('resetPassword');
            $component
                ->assertRedirect('/login')
                ->assertHasNoErrors();
            return true;
        });
    }
}
</file>

<file path="tests/Feature/Auth/PasswordUpdateTest.php">
<?php
namespace Tests\Feature\Auth;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Hash;
use Livewire\Volt\Volt;
use Tests\TestCase;
class PasswordUpdateTest extends TestCase
{
    use RefreshDatabase;
    public function test_password_can_be_updated(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);
        $component = Volt::test('profile.update-password-form')
            ->set('current_password', 'password')
            ->set('password', 'new-password')
            ->set('password_confirmation', 'new-password')
            ->call('updatePassword');
        $component
            ->assertHasNoErrors()
            ->assertNoRedirect();
        $this->assertTrue(Hash::check('new-password', $user->refresh()->password));
    }
    public function test_correct_password_must_be_provided_to_update_password(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);
        $component = Volt::test('profile.update-password-form')
            ->set('current_password', 'wrong-password')
            ->set('password', 'new-password')
            ->set('password_confirmation', 'new-password')
            ->call('updatePassword');
        $component
            ->assertHasErrors(['current_password'])
            ->assertNoRedirect();
    }
}
</file>

<file path="tests/Feature/Auth/RegistrationTest.php">
<?php
namespace Tests\Feature\Auth;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Livewire\Volt\Volt;
use Tests\TestCase;
class RegistrationTest extends TestCase
{
    use RefreshDatabase;
    public function test_registration_screen_can_be_rendered(): void
    {
        $response = $this->get('/register');
        $response
            ->assertOk()
            ->assertSeeVolt('pages.auth.register');
    }
    public function test_new_users_can_register(): void
    {
        $component = Volt::test('pages.auth.register')
            ->set('name', 'Test User')
            ->set('email', 'test@example.com')
            ->set('password', 'password')
            ->set('password_confirmation', 'password');
        $component->call('register');
        $component->assertRedirect(route('dashboard', absolute: false));
        $this->assertAuthenticated();
    }
}
</file>

<file path="tests/Feature/Livewire/Surveys/OverviewTest.php">
<?php
namespace Tests\Feature\Livewire\Surveys;
use App\Livewire\Surveys\Overview;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Livewire\Livewire;
use Tests\TestCase;
class OverviewTest extends TestCase
{
    /** @test */
    public function renders_successfully()
    {
        Livewire::test(Overview::class)
            ->assertStatus(200);
    }
}
</file>

<file path="tests/Feature/Livewire/Templates/OverviewTest.php">
<?php
namespace Tests\Feature\Livewire\Templates;
use App\Livewire\Templates\Overview;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Livewire\Livewire;
use Tests\TestCase;
class OverviewTest extends TestCase
{
    /** @test */
    public function renders_successfully()
    {
        Livewire::test(Overview::class)
            ->assertStatus(200);
    }
}
</file>

<file path="tests/Feature/ExampleTest.php">
<?php
namespace Tests\Feature;
// use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_the_application_returns_a_successful_response(): void
    {
        $response = $this->get('/');
        $response->assertStatus(200);
    }
}
</file>

<file path="tests/Feature/ProfileTest.php">
<?php
namespace Tests\Feature;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Livewire\Volt\Volt;
use Tests\TestCase;
class ProfileTest extends TestCase
{
    use RefreshDatabase;
    public function test_profile_page_is_displayed(): void
    {
        $user = User::factory()->create();
        $response = $this->actingAs($user)->get('/profile');
        $response
            ->assertOk()
            ->assertSeeVolt('profile.update-profile-information-form')
            ->assertSeeVolt('profile.update-password-form')
            ->assertSeeVolt('profile.delete-user-form');
    }
    public function test_profile_information_can_be_updated(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);
        $component = Volt::test('profile.update-profile-information-form')
            ->set('name', 'Test User')
            ->set('email', 'test@example.com')
            ->call('updateProfileInformation');
        $component
            ->assertHasNoErrors()
            ->assertNoRedirect();
        $user->refresh();
        $this->assertSame('Test User', $user->name);
        $this->assertSame('test@example.com', $user->email);
        $this->assertNull($user->email_verified_at);
    }
    public function test_email_verification_status_is_unchanged_when_the_email_address_is_unchanged(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);
        $component = Volt::test('profile.update-profile-information-form')
            ->set('name', 'Test User')
            ->set('email', $user->email)
            ->call('updateProfileInformation');
        $component
            ->assertHasNoErrors()
            ->assertNoRedirect();
        $this->assertNotNull($user->refresh()->email_verified_at);
    }
    public function test_user_can_delete_their_account(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);
        $component = Volt::test('profile.delete-user-form')
            ->set('password', 'password')
            ->call('deleteUser');
        $component
            ->assertHasNoErrors()
            ->assertRedirect('/');
        $this->assertGuest();
        $this->assertNull($user->fresh());
    }
    public function test_correct_password_must_be_provided_to_delete_account(): void
    {
        $user = User::factory()->create();
        $this->actingAs($user);
        $component = Volt::test('profile.delete-user-form')
            ->set('password', 'wrong-password')
            ->call('deleteUser');
        $component
            ->assertHasErrors('password')
            ->assertNoRedirect();
        $this->assertNotNull($user->fresh());
    }
}
</file>

<file path="tests/Feature/SurveyStatisticsTest.php">
<?php
namespace Tests\Feature;
use App\Models\Feedback;
use App\Models\Feedback_template;
use App\Models\Question;
use App\Models\Question_template;
use App\Models\Result;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
class SurveyStatisticsTest extends TestCase
{
    use RefreshDatabase;
    /**
     * Test that a teacher can view statistics for their own survey.
     */
    public function test_teacher_can_view_statistics_for_their_survey(): void
    {
        // Create a user (teacher)
        $teacher = User::factory()->create([
            'is_admin' => false,
        ]);
        // Create a feedback template
        $template = Feedback_template::create([
            'name' => 'Test Template',
            'title' => 'Test Template Title',
        ]);
        // Create a question template for range type
        $questionTemplate = Question_template::create([
            'type' => 'range',
            'min_value' => 1,
            'max_value' => 5,
        ]);
        // Create a survey
        $survey = Feedback::create([
            'user_id' => $teacher->id,
            'feedback_template_id' => $template->id,
            'accesskey' => 'test-key',
            'limit' => -1,
            'already_answered' => 2,
            'expire_date' => now()->addDays(7),
        ]);
        // Create a question
        $question = Question::create([
            'feedback_id' => $survey->id,
            'feedback_template_id' => $template->id,
            'question_template_id' => $questionTemplate->id,
            'question' => 'How would you rate this course?',
        ]);
        // Create some results
        $result1 = Result::create([
            'question_id' => $question->id,
            'submission_id' => (string) \Illuminate\Support\Str::uuid(),
            'value_type' => 'number',
            'rating_value' => '4'
        ]);
        $result2 = Result::create([
            'question_id' => $question->id,
            'submission_id' => (string) \Illuminate\Support\Str::uuid(),
            'value_type' => 'number',
            'rating_value' => '5'
        ]);
        // Act as the teacher and visit the statistics page
        $response = $this->actingAs($teacher)
            ->get(route('surveys.statistics', ['survey' => $survey->id]));
        // Assert the response is successful
        $response->assertStatus(200);
        // Assert the view contains the survey and statistics data
        $response->assertViewHas('survey');
        $response->assertViewHas('statisticsData');
        // Assert the page contains expected content
        $response->assertSee('Survey Statistics');
        $response->assertSee('How would you rate this course?');
        $response->assertSee('Average Rating');
    }
    /**
     * Test that a teacher cannot view statistics for another teacher's survey.
     */
    public function test_teacher_cannot_view_statistics_for_another_teachers_survey(): void
    {
        // Create two users (teachers)
        $teacher1 = User::factory()->create([
            'is_admin' => false,
        ]);
        $teacher2 = User::factory()->create([
            'is_admin' => false,
        ]);
        // Create a feedback template
        $template = Feedback_template::create([
            'name' => 'Test Template',
            'title' => 'Test Template Title',
        ]);
        // Create a survey owned by teacher1
        $survey = Feedback::create([
            'user_id' => $teacher1->id,
            'feedback_template_id' => $template->id,
            'accesskey' => 'test-key',
            'limit' => -1,
            'already_answered' => 0,
            'expire_date' => now()->addDays(7),
        ]);
        // Act as teacher2 and try to visit the statistics page for teacher1's survey
        $response = $this->actingAs($teacher2)
            ->get(route('surveys.statistics', ['survey' => $survey->id]));
        // Assert the response is forbidden
        $response->assertStatus(403);
    }
    /**
     * Test that an unauthenticated user cannot view statistics.
     */
    public function test_unauthenticated_user_cannot_view_statistics(): void
    {
        // Create a user (teacher)
        $teacher = User::factory()->create([
            'is_admin' => false,
        ]);
        // Create a feedback template
        $template = Feedback_template::create([
            'name' => 'Test Template',
            'title' => 'Test Template Title',
        ]);
        // Create a survey
        $survey = Feedback::create([
            'user_id' => $teacher->id,
            'feedback_template_id' => $template->id,
            'accesskey' => 'test-key',
            'limit' => -1,
            'already_answered' => 0,
            'expire_date' => now()->addDays(7),
        ]);
        // Try to visit the statistics page without authentication
        $response = $this->get(route('surveys.statistics', ['survey' => $survey->id]));
        // Assert the response is a redirect to login
        $response->assertRedirect(route('login'));
    }
}
</file>

<file path="tests/Unit/ExampleTest.php">
<?php
namespace Tests\Unit;
use PHPUnit\Framework\TestCase;
class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_that_true_is_true(): void
    {
        $this->assertTrue(true);
    }
}
</file>

<file path="tests/Unit/SurveyServiceTest.php">
<?php
namespace Tests\Unit;
use App\Models\Feedback;
use App\Models\Feedback_template;
use App\Models\Question;
use App\Models\Question_template;
use App\Models\Result;
use App\Models\ResponseValue;
use App\Services\SurveyService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
class SurveyServiceTest extends TestCase
{
    use RefreshDatabase;
    protected SurveyService $surveyService;
    protected function setUp(): void
    {
        parent::setUp();
        $this->surveyService = new SurveyService();
    }
    /**
     * Test calculating statistics for a range question.
     */
    public function test_calculate_statistics_for_range_question(): void
    {
        // Create a feedback template
        $template = Feedback_template::create([
            'name' => 'Test Template',
            'title' => 'Test Template Title',
        ]);
        // Create a question template for range type
        $questionTemplate = Question_template::create([
            'type' => 'range',
            'min_value' => 1,
            'max_value' => 5,
        ]);
        // Create a survey
        $survey = Feedback::create([
            'user_id' => 1,
            'feedback_template_id' => $template->id,
            'accesskey' => 'test-key',
            'limit' => -1,
            'already_answered' => 3,
            'expire_date' => now()->addDays(7),
        ]);
        // Create a question
        $question = Question::create([
            'feedback_id' => $survey->id,
            'feedback_template_id' => $template->id,
            'question_template_id' => $questionTemplate->id,
            'question' => 'How would you rate this course?',
        ]);
        // Create some results with different ratings
        for ($i = 1; $i <= 5; $i++) {
            $result = Result::create([
                'question_id' => $question->id,
                'submission_id' => (string) \Illuminate\Support\Str::uuid(),
                'value_type' => 'number',
                'rating_value' => $i
            ]);
        }
        // Calculate statistics
        $statistics = $this->surveyService->calculateStatisticsForSurvey($survey);
        // Assert statistics are calculated correctly
        $this->assertCount(1, $statistics);
        $this->assertEquals($question->id, $statistics[0]['question']->id);
        $this->assertEquals('range', $statistics[0]['template_type']);
        // Check average rating (1 + 2 + 3 + 4 + 5) / 5 = 3
        $this->assertEquals(3, $statistics[0]['data']['average_rating']);
        // Check median rating (sorted: 1, 2, 3, 4, 5) -> median is 3
        $this->assertEquals(3, $statistics[0]['data']['median_rating']);
        // Check rating counts
        $this->assertCount(5, $statistics[0]['data']['rating_counts']);
        $this->assertEquals(1, $statistics[0]['data']['rating_counts'][1]);
        $this->assertEquals(1, $statistics[0]['data']['rating_counts'][2]);
        $this->assertEquals(1, $statistics[0]['data']['rating_counts'][3]);
        $this->assertEquals(1, $statistics[0]['data']['rating_counts'][4]);
        $this->assertEquals(1, $statistics[0]['data']['rating_counts'][5]);
    }
    /**
     * Test calculating statistics for a text question.
     */
    public function test_calculate_statistics_for_text_question(): void
    {
        // Create a feedback template
        $template = Feedback_template::create([
            'name' => 'Test Template',
            'title' => 'Test Template Title',
        ]);
        // Create a question template for text type
        $questionTemplate = Question_template::create([
            'type' => 'text',
        ]);
        // Create a survey
        $survey = Feedback::create([
            'user_id' => 1,
            'feedback_template_id' => $template->id,
            'accesskey' => 'test-key',
            'limit' => -1,
            'already_answered' => 2,
            'expire_date' => now()->addDays(7),
        ]);
        // Create a question
        $question = Question::create([
            'feedback_id' => $survey->id,
            'feedback_template_id' => $template->id,
            'question_template_id' => $questionTemplate->id,
            'question' => 'What did you like about this course?',
        ]);
        // Create some results with text responses
        for ($i = 1; $i <= 3; $i++) {
            $result = Result::create([
                'question_id' => $question->id,
                'submission_id' => (string) \Illuminate\Support\Str::uuid(),
                'value_type' => 'text',
                'rating_value' => "Sample text response $i"
            ]);
        }
        // Calculate statistics
        $statistics = $this->surveyService->calculateStatisticsForSurvey($survey);
        // Assert statistics are calculated correctly
        $this->assertCount(1, $statistics);
        $this->assertEquals($question->id, $statistics[0]['question']->id);
        $this->assertEquals('text', $statistics[0]['template_type']);
        // Check response count
        $this->assertEquals(3, $statistics[0]['data']['response_count']);
    }
    /**
     * Test error handling in calculateStatisticsForSurvey.
     */
    public function test_calculate_statistics_handles_errors_gracefully(): void
    {
        // Create a mock survey that will cause an error
        $mockSurvey = $this->createMock(Feedback::class);
        $mockSurvey->method('load')->willThrowException(new \Exception('Test exception'));
        $mockSurvey->id = 999;
        // Calculate statistics with the mock survey
        $statistics = $this->surveyService->calculateStatisticsForSurvey($mockSurvey);
        // Assert error is handled gracefully
        $this->assertCount(1, $statistics);
        $this->assertEquals('error', $statistics[0]['template_type']);
        $this->assertEquals('An error occurred while calculating statistics.', $statistics[0]['data']['message']);
    }
}
</file>

<file path="tests/TestCase.php">
<?php
namespace Tests;
use Illuminate\Foundation\Testing\TestCase as BaseTestCase;
abstract class TestCase extends BaseTestCase
{
    //
}
</file>

<file path=".editorconfig">
root = true

[*]
charset = utf-8
end_of_line = lf
indent_size = 4
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true

[*.md]
trim_trailing_whitespace = false

[*.{yml,yaml}]
indent_size = 2

[docker-compose.yml]
indent_size = 4
</file>

<file path=".gitattributes">
* text=auto eol=lf

*.blade.php diff=html
*.css diff=css
*.html diff=html
*.md diff=markdown
*.php diff=php

/.github export-ignore
CHANGELOG.md export-ignore
.styleci.yml export-ignore
</file>

<file path=".gitignore">
/.phpunit.cache
/node_modules
/public/build
/public/hot
/public/storage
/public/vendor
/storage/*.key
/storage/pail
/vendor
.env
.env.backup
.env.production
.phpactor.json
.phpunit.result.cache
Homestead.json
Homestead.yaml
npm-debug.log
yarn-error.log
/auth.json
/.fleet
/.idea
/.nova
/.vscode
/.zed
/.cursor/
/.cursorrules
/.repomix-output.txt
</file>

<file path="artisan">
#!/usr/bin/env php
<?php

use Symfony\Component\Console\Input\ArgvInput;

define('LARAVEL_START', microtime(true));

// Register the Composer autoloader...
require __DIR__.'/vendor/autoload.php';

// Bootstrap Laravel and handle the command...
$status = (require_once __DIR__.'/bootstrap/app.php')
    ->handleCommand(new ArgvInput);

exit($status);
</file>

<file path="CODEOWNERS">
# Allgemeine Regel: Alle Dateien im Repository
* @jl-delife @techmaved @Fovty @duckwithboots
</file>

<file path="composer.json">
{
    "$schema": "https://getcomposer.org/schema.json",
    "name": "laravel/laravel",
    "type": "project",
    "description": "The skeleton application for the Laravel framework.",
    "keywords": [
        "laravel",
        "framework"
    ],
    "license": "MIT",
    "require": {
        "php": "^8.2",
        "blade-ui-kit/blade-icons": "^1.7",
        "doctrine/dbal": "^4.2",
        "laravel/framework": "^11.31",
        "laravel/tinker": "^2.9",
        "livewire/livewire": "^3.4",
        "livewire/volt": "^1.0",
        "owenvoke/blade-fontawesome": "^2.8"
    },
    "require-dev": {
        "fakerphp/faker": "^1.23",
        "laravel/breeze": "^2.3",
        "laravel/pail": "^1.1",
        "laravel/pint": "^1.13",
        "laravel/sail": "^1.26",
        "mockery/mockery": "^1.6",
        "nunomaduro/collision": "^8.1",
        "phpunit/phpunit": "^11.0.1"
    },
    "autoload": {
        "psr-4": {
            "App\\": "app/",
            "Database\\Factories\\": "database/factories/",
            "Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "scripts": {
        "post-autoload-dump": [
            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
            "@php artisan package:discover --ansi"
        ],
        "post-update-cmd": [
            "@php artisan vendor:publish --tag=laravel-assets --ansi --force"
        ],
        "post-root-package-install": [
            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\""
        ],
        "post-create-project-cmd": [
            "@php artisan key:generate --ansi",
            "@php -r \"file_exists('database/database.sqlite') || touch('database/database.sqlite');\"",
            "@php artisan migrate --graceful --ansi"
        ],
        "dev": [
            "Composer\\Config::disableProcessTimeout",
            "npx concurrently -c \"#93c5fd,#c4b5fd,#fb7185,#fdba74\" \"php artisan serve\" \"php artisan queue:listen --tries=1\" \"php artisan pail --timeout=0\" \"npm run dev\" --names=server,queue,logs,vite"
        ]
    },
    "extra": {
        "laravel": {
            "dont-discover": []
        }
    },
    "config": {
        "optimize-autoloader": true,
        "preferred-install": "dist",
        "sort-packages": true,
        "allow-plugins": {
            "pestphp/pest-plugin": true,
            "php-http/discovery": true
        }
    },
    "minimum-stability": "stable",
    "prefer-stable": true
}
</file>

<file path="Database_Relations.md">
### **Entities and Attributes:**

#### **1. users**
- **Primary Key (PK)**: `id`
- **Foreign Key (FK)**: `registerkey_id` (nullable) - Links to the `registerkeys` table.
- **Attributes**:
  - `name`
  - `password`
  - `is_admin`
  - `email`

This table stores information about users who participate in the feedback system. Some users may be linked to a **registration key**.

---

#### **2. registerkeys**
- **Primary Key (PK)**: `id`
- **Attributes**:
  - `code`

This table holds **registration keys** that might be used for user account creation.

---

#### **3. feedbacks**
- **Primary Key (PK)**: `id`
- **Foreign Keys (FK)**:
  - `user_id` → Links to the `users` table.
  - `feedback_template_id` → Links to the `feedback_templates` table.
- **Attributes**:
  - `accesskey`
  - `limit`
  - `already_answered` (nullable) - Now dynamically calculated using distinct submission_ids from the results table
  - `expire_date`
  - `status` - Lifecycle status of the feedback (e.g., 'draft', 'running', 'expired')
  - `school_year` (nullable)
  - `department` (nullable)
  - `grade_level` (nullable)
  - `class` (nullable)
  - `subject` (nullable)

This table represents **feedback forms** created by users, linked to specific feedback templates. Each form can be answered multiple times up to the specified limit. The status field controls the form's lifecycle, determining whether it's available for responses.

---

#### **4. feedback_templates**
- **Primary Key (PK)**: `id`
- **Attributes**:
  - `name`

This table stores different **feedback templates** that can be used to create questionnaires.

---

#### **5. questions**
- **Primary Key (PK)**: `id`
- **Foreign Keys (FK)**:
  - `feedback_template_id` → Links to `feedback_templates`
  - `question_template_id` → Links to `question_templates`
  - `feedback_id` → Links to `feedbacks`
- **Attributes**:
  - `question`
  - `order` (nullable) - Controls the sequence of questions within a survey

This table holds **individual questions** for feedback forms, which are linked to a question template.

---

#### **6. question_templates**
- **Primary Key (PK)**: `id`
- **Attributes**:
  - `type`
  - `max_value`
  - `min_value`

This table defines the **types of questions** that can be used in feedback forms, such as multiple-choice, rating scales, etc.

---

#### **7. results**
- **Primary Key (PK)**: `id`
- **Foreign Keys (FK)**:
  - `question_id` → Links to `questions`
- **Attributes**:
  - `submission_id` (UUID) - Groups multiple results belonging to a single survey submission
  - `value_type` - Indicates the data type of the rating_value ('text', 'number', 'checkbox')
  - `rating_value`

This table stores **responses or ratings** provided by users for specific questions. Each submission (a complete set of answers to a feedback form) is grouped by a unique submission_id, which allows for accurate counting of survey responses.

---

### **Relationships:**
1. **users → feedbacks** (1:N)
   - A user can create **multiple feedback forms**, but each form belongs to one user.

2. **registerkeys → users** (1:N)
   - A **registration key** can be associated with multiple users.

3. **feedback_templates → feedbacks** (1:N)
   - A feedback form is based on one **template**, but multiple feedback instances can be linked to a template.

4. **feedbacks → questions** (1:N)
   - Each **feedback form** consists of multiple **questions**.

5. **question_templates → questions** (1:N)
   - A **question template** can be used for multiple **questions**.

6. **questions → results** (1:N)
   - Each **question** has multiple **responses** in the results table.

7. **results (grouped by submission_id)** (logical grouping)
   - Results with the same submission_id form a logical group representing a single submission response to a feedback form.
   - This enables tracking the number of submissions for each feedback form by counting distinct submission_ids.

---

*Note: Laravel's internal tables (sessions, cache, jobs, etc.) are intentionally omitted from this document as they are not part of the core application domain model.*
</file>

<file path="docker-compose.yml">
services:
    laravel.test:
        build:
            context: './docker/8.4'
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${WWWGROUP}'
        image: 'sail-8.4/app'
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        ports:
            - '${APP_PORT:-80}:80'
            - '${VITE_PORT:-5173}:${VITE_PORT:-5173}'
        environment:
            WWWUSER: '${WWWUSER}'
            LARAVEL_SAIL: 1
            XDEBUG_MODE: '${SAIL_XDEBUG_MODE:-off}'
            XDEBUG_CONFIG: '${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}'
            IGNITION_LOCAL_SITES_PATH: '${PWD}'
        volumes:
            - '.:/var/www/html'
        networks:
            - sail
        depends_on:
            - pgsql
    queue-worker:
        build:
            context: './docker/8.4'
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${WWWGROUP}'
        image: 'sail-8.4/app'
        environment:
            WWWUSER: '${WWWUSER}'
            LARAVEL_SAIL: 1
        command: ['php', '/var/www/html/artisan', 'queue:work']
        volumes:
            - '.:/var/www/html'
        networks:
            - sail
        depends_on:
            - laravel.test
            - pgsql
    pgsql:
        image: 'postgres:17'
        ports:
            - '${FORWARD_DB_PORT:-5432}:5432'
        environment:
            PGPASSWORD: '${DB_PASSWORD:-secret}'
            POSTGRES_DB: '${DB_DATABASE}'
            POSTGRES_USER: '${DB_USERNAME}'
            POSTGRES_PASSWORD: '${DB_PASSWORD:-secret}'
        volumes:
            - 'sail-pgsql:/var/lib/postgresql/data'
            - './docker/pgsql/create-testing-database.sql:/docker-entrypoint-initdb.d/10-create-testing-database.sql'
        networks:
            - sail
        healthcheck:
            test:
                - CMD
                - pg_isready
                - '-q'
                - '-d'
                - '${DB_DATABASE}'
                - '-U'
                - '${DB_USERNAME}'
            retries: 3
            timeout: 5s
    pgadmin:
        image: 'dpage/pgadmin4'
        ports:
            - "4444:80"
        environment:
            PGADMIN_DEFAULT_EMAIL: root@domain.com
            PGADMIN_DEFAULT_PASSWORD: root
        volumes:
            - 'pgadmin:/var/lib/pgadmin'
        networks:
            - sail
networks:
    sail:
        driver: bridge
volumes:
    sail-pgsql:
        driver: local
    pgadmin:
        driver: local
</file>

<file path="Dockerfile">
# Build stage
FROM php:8.4-fpm-alpine AS builder

# Install system dependencies
RUN apk add --no-cache \
    postgresql-dev \
    nodejs \
    npm \
    git \
    zip \
    unzip \
    libzip-dev

# Install PHP extensions
RUN docker-php-ext-install pdo pdo_pgsql zip opcache

# Install composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Set working directory
WORKDIR /app

# Copy composer files first for better caching
COPY composer.* ./
COPY package*.json ./

# Create required directories
RUN mkdir -p resources/svg

# Install PHP dependencies
RUN composer install --no-dev --no-scripts --no-autoloader --prefer-dist

# Install Node dependencies
RUN npm ci

# Copy application files
COPY . .

# Copy .env.example to .env
COPY .env.example .env

# Generate optimized autoload files
RUN composer dump-autoload --optimize

# Build frontend assets
RUN npm run build

# Production stage
FROM php:8.4-fpm-alpine

# Add Git SHA as build argument and environment variable
ARG GIT_SHA
ENV GIT_SHA=${GIT_SHA}

# Install production dependencies
RUN apk add --no-cache postgresql-dev
RUN docker-php-ext-install pdo pdo_pgsql opcache

WORKDIR /app

# Copy application from builder
COPY --from=builder /app /app

# Set proper permissions
RUN chown -R www-data:www-data /app/storage /app/bootstrap/cache && \
    chmod -R 775 /app/storage /app/bootstrap/cache

# Create PHP-FPM configuration
RUN echo "php_admin_flag[log_errors] = on" >> /usr/local/etc/php-fpm.d/www.conf && \
    echo "php_admin_flag[display_errors] = off" >> /usr/local/etc/php-fpm.d/www.conf && \
    echo "php_admin_value[error_log] = /dev/stderr" >> /usr/local/etc/php-fpm.d/www.conf

# Add health check
HEALTHCHECK --interval=30s --timeout=3s \
    CMD php artisan health || exit 1

EXPOSE 9000

# Run PHP-FPM in foreground
CMD ["php-fpm", "-F"]
</file>

<file path="Makefile">
.PHONY: up down build install migrate fresh test npm-install npm-build npm-dev logs ps key seed

# Start the application
up:
	./vendor/bin/sail up -d

# Stop the application
down:
	./vendor/bin/sail down

# Build containers
build:
	./vendor/bin/sail build

# Install composer dependencies
install:
	docker run --rm --interactive --tty \
		--volume $(PWD):/app \
		composer install

# Run migrations
migrate:
	./vendor/bin/sail artisan migrate

# Refresh
refresh:
	./vendor/bin/sail artisan migrate:fresh

# Clear
clear:
	./vendor/bin/sail artisan config:clear
	./vendor/bin/sail artisan cache:clear
	./vendor/bin/sail artisan view:clear
	./vendor/bin/sail artisan route:clear

# Install npm dependencies
npm-install:
	./vendor/bin/sail npm install

# Build assets
npm-build:
	./vendor/bin/sail npm run build

# Run npm dev
npm-dev:
	./vendor/bin/sail npm run dev

# View logs
logs:
	./vendor/bin/sail logs

# List containers
ps:
	./vendor/bin/sail ps

# Generate application key
key:
	./vendor/bin/sail artisan key:generate

# Seed database
seed:
	./vendor/bin/sail artisan db:seed
</file>

<file path="package.json">
{
    "private": true,
    "type": "module",
    "scripts": {
        "build": "vite build",
        "dev": "vite"
    },
    "devDependencies": {
        "@tailwindcss/forms": "^0.5.2",
        "autoprefixer": "^10.4.2",
        "axios": "^1.8.2",
        "concurrently": "^9.0.1",
        "laravel-vite-plugin": "^1.0",
        "postcss": "^8.4.31",
        "tailwindcss": "^3.1.0",
        "vite": "^6.2"
    },
    "dependencies": {
        "alpinejs": "^3.14.8",
        "qrcode": "^1.5.4"
    }
}
</file>

<file path="phpunit.xml">
<?xml version="1.0" encoding="UTF-8"?>
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="vendor/phpunit/phpunit/phpunit.xsd"
         bootstrap="vendor/autoload.php"
         colors="true"
>
    <testsuites>
        <testsuite name="Unit">
            <directory>tests/Unit</directory>
        </testsuite>
        <testsuite name="Feature">
            <directory>tests/Feature</directory>
        </testsuite>
    </testsuites>
    <source>
        <include>
            <directory>app</directory>
        </include>
    </source>
    <php>
        <env name="APP_ENV" value="testing"/>
        <env name="APP_MAINTENANCE_DRIVER" value="file"/>
        <env name="BCRYPT_ROUNDS" value="4"/>
        <env name="CACHE_STORE" value="array"/>
        <env name="DB_DATABASE" value="testing"/>
        <env name="MAIL_MAILER" value="array"/>
        <env name="PULSE_ENABLED" value="false"/>
        <env name="QUEUE_CONNECTION" value="sync"/>
        <env name="SESSION_DRIVER" value="array"/>
        <env name="TELESCOPE_ENABLED" value="false"/>
    </php>
</phpunit>
</file>

<file path="postcss.config.js">
export default {
    plugins: {
        tailwindcss: {},
        autoprefixer: {},
    },
};
</file>

<file path="README.md">
<p align="center"><a href="https://laravel.com" target="_blank"><img src="https://raw.githubusercontent.com/laravel/art/master/logo-lockup/5%20SVG/2%20CMYK/1%20Full%20Color/laravel-logolockup-cmyk-red.svg" width="400" alt="Laravel Logo"></a></p>

<p align="center">
<a href="https://github.com/laravel/framework/actions"><img src="https://github.com/laravel/framework/workflows/tests/badge.svg" alt="Build Status"></a>
<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/dt/laravel/framework" alt="Total Downloads"></a>
<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/v/laravel/framework" alt="Latest Stable Version"></a>
<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/l/laravel/framework" alt="License"></a>
</p>

## About Laravel

Laravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable and creative experience to be truly fulfilling. Laravel takes the pain out of development by easing common tasks used in many web projects, such as:

- [Simple, fast routing engine](https://laravel.com/docs/routing).
- [Powerful dependency injection container](https://laravel.com/docs/container).
- Multiple back-ends for [session](https://laravel.com/docs/session) and [cache](https://laravel.com/docs/cache) storage.
- Expressive, intuitive [database ORM](https://laravel.com/docs/eloquent).
- Database agnostic [schema migrations](https://laravel.com/docs/migrations).
- [Robust background job processing](https://laravel.com/docs/queues).
- [Real-time event broadcasting](https://laravel.com/docs/broadcasting).

Laravel is accessible, powerful, and provides tools required for large, robust applications.

## Learning Laravel

Laravel has the most extensive and thorough [documentation](https://laravel.com/docs) and video tutorial library of all modern web application frameworks, making it a breeze to get started with the framework.

You may also try the [Laravel Bootcamp](https://bootcamp.laravel.com), where you will be guided through building a modern Laravel application from scratch.

If you don't feel like reading, [Laracasts](https://laracasts.com) can help. Laracasts contains thousands of video tutorials on a range of topics including Laravel, modern PHP, unit testing, and JavaScript. Boost your skills by digging into our comprehensive video library.

## Laravel Sponsors

We would like to extend our thanks to the following sponsors for funding Laravel development. If you are interested in becoming a sponsor, please visit the [Laravel Partners program](https://partners.laravel.com).

### Premium Partners

- **[Vehikl](https://vehikl.com/)**
- **[Tighten Co.](https://tighten.co)**
- **[WebReinvent](https://webreinvent.com/)**
- **[Kirschbaum Development Group](https://kirschbaumdevelopment.com)**
- **[64 Robots](https://64robots.com)**
- **[Curotec](https://www.curotec.com/services/technologies/laravel/)**
- **[Cyber-Duck](https://cyber-duck.co.uk)**
- **[DevSquad](https://devsquad.com/hire-laravel-developers)**
- **[Jump24](https://jump24.co.uk)**
- **[Redberry](https://redberry.international/laravel/)**
- **[Active Logic](https://activelogic.com)**
- **[byte5](https://byte5.de)**
- **[OP.GG](https://op.gg)**

## Contributing

Thank you for considering contributing to the Laravel framework! The contribution guide can be found in the [Laravel documentation](https://laravel.com/docs/contributions).

## Code of Conduct

In order to ensure that the Laravel community is welcoming to all, please review and abide by the [Code of Conduct](https://laravel.com/docs/contributions#code-of-conduct).

## Security Vulnerabilities

If you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell via [taylor@laravel.com](mailto:taylor@laravel.com). All security vulnerabilities will be promptly addressed.

## License

The Laravel framework is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).
</file>

<file path="statistics-page.html">
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8" />
        <meta http-equiv="refresh" content="0;url='http://localhost/login'" />
        <title>Redirecting to http://localhost/login</title>
    </head>
    <body>
        Redirecting to <a href="http://localhost/login">http://localhost/login</a>.
    </body>
</html>
</file>

<file path="tailwind.config.js">
import defaultTheme from 'tailwindcss/defaultTheme';
import forms from '@tailwindcss/forms';
/** @type {import('tailwindcss').Config} */
export default {
    content: [
        './vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php',
        './storage/framework/views/*.php',
        './resources/views/**/*.blade.php',
    ],
    theme: {
        extend: {
            fontFamily: {
                sans: ['Figtree', ...defaultTheme.fontFamily.sans],
            },
        },
    },
    plugins: [forms],
};
</file>

<file path="vite.config.js">
import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';
export default defineConfig({
    plugins: [
        laravel({
            input: ['resources/css/app.css', 'resources/js/app.js'],
            refresh: true,
        }),
    ],
});
</file>

</files>
